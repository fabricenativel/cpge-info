{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cours d'informatique en CPGE","text":"<p>Cours d'informatique en MP2I Cours d'Informatique Tronc Commun </p> <p> Cr\u00e9dit : undraw.co</p> Ce site et tout son contenu sont sous la licence This work is licensed under a \u00a0Creative Commons Attribution 4.0 International License"},{"location":"colles/","title":"Programme de colles","text":""},{"location":"colles/#semaines-du-0109-du-0809-et-du-1509","title":"Semaines du 01/09, du 08/09 et du 15/09","text":"<ul> <li>Commandes de base d'un syst\u00e8me Linux (<code>cd</code>, <code>mkdir</code>, <code>ls</code>, ...)</li> <li>Traits g\u00e9n\u00e9raux du langage C (passage par valeur, port\u00e9e, typage, comportement ind\u00e9fini)</li> <li>Types de bases (<code>int</code>, <code>float</code>, <code>double</code>, <code>char</code>) et op\u00e9rateurs associ\u00e9s</li> <li>Op\u00e9rateurs de comparaison</li> <li>Tableaux statique, lecture et \u00e9criture d'un terme avec <code>tab[i]</code></li> <li>Instructions conditionnelles, boucle <code>for</code> et <code>while</code></li> <li>A partir du 08/09 : validation, jeu de tests, graphe de flot de contr\u00f4le</li> <li>A partir du 15/09 : terminaison d'un algorithme, variant</li> </ul>"},{"location":"colles/#semaines-du-2209-du-2906-et-du-0609","title":"Semaines du 22/09, du 29/06 et du 06/09","text":"<ul> <li>Terminaison et correction d'algorithme simples. Les variants et invariants peuvent \u00eatre sugg\u00e9r\u00e9s aux \u00e9l\u00e8ves. Exemples trait\u00e9s en cours/TD : multiplication par addition successives, quotient et reste dans la division euclidienne, recherche de max/min dans un tableau, multiplication \u00e0 la russe.</li> <li>Mod\u00e8le m\u00e9moire du langage C, pile, allocation dynamique dans le tas. Utilisation des op\u00e9rateurs <code>*</code> afin d'obtenir le contenu d'une adresse et de <code>&amp;</code> pour l'adresse d'une variable. Instructions <code>malloc</code> et <code>free</code>.</li> <li>Ecriture en C de fonctions renvoyant un pointeur vers une zone m\u00e9moire allou\u00e9e sur le tas qui sera trait\u00e9 comme un tableau, on pourra dire par abus de langage \"fonction renvoyant un tableau\"</li> <li>Types structur\u00e9s en C, d\u00e9finition et utilisation. Pointeur vers un type structur\u00e9e, la notation raccourcie <code>s-&gt;champ</code> pour <code>(*s).champ</code> doit \u00eatre connue.</li> <li>Arguments en ligne de commande en C. Fonction <code>atoi</code> et <code>atof</code>.</li> <li>A partir du 29/06 : repr\u00e9sentation des entiers. Formats disponibles en OCaml et en C. Cas de d\u00e9passement de capacit\u00e9.</li> <li>A partir du 06/09 : repr\u00e9sentation des flottants, exemples simples de conversion du type simple pr\u00e9cision en d\u00e9cimal ou inversemment. Probl\u00e8me de fiabilit\u00e9 des calculs en arithm\u00e9tique \u00e0 virgule flottante.</li> </ul>"},{"location":"colles/#semaines-du-2710-du-0311-et-du-1011","title":"Semaines du 27/10, du 03/11 et du 10/11","text":"<ul> <li>Types structur\u00e9s en C, utilisation de pointeurs vers de tels types.</li> <li>Repr\u00e9sentation des entiers et des flottants</li> <li>A partir du 03/11 : R\u00e9cursivit\u00e9. Preuve de terminaison et correction d'algorithmes r\u00e9cursifs. Ecriture de fonctions simples en versions r\u00e9cursives (somme, minimum, puissance, dessins \u00e0 l'aide d'instructions <code>print</code>). R\u00e9cursivit\u00e9 crois\u00e9e.</li> <li>A partir du 10/11 : Aspects fonctionnels de OCaml. Ecriture et \u00e9valuation d'expressions en OCaml. D\u00e9finition de fonctions, expressions conditionnelles. Type <code>list</code>, correspondance de motifs.</li> </ul>"},{"location":"evaluations/","title":"Evaluations","text":""},{"location":"evaluations/#mp2i","title":"MP2I","text":""},{"location":"evaluations/#devoirs-surveilles","title":"Devoirs surveill\u00e9s","text":"N\u00b0 Date Th\u00e8mes Titre Enonc\u00e9 Corrig\u00e9 1 20/09/2025 Langage C, terminaison, correction 2 pr\u00e9vu le 08/11/2025 ....... 3 pr\u00e9vu le 06/12/2025 ....... 4 pr\u00e9vu le 14/02/2026 ....... 5 pr\u00e9vu le 11/04/2026 ....... 6 pr\u00e9vu le 20/05/2026 ......."},{"location":"evaluations/#interrogation-de-cours","title":"Interrogation de cours","text":"N\u00b0 Date Th\u00e8mes Titre Enonc\u00e9 Corrig\u00e9 1 28/08/2025 Ligne de commande - C 2 11/09/2025 Validation et tests 3 17/09/2025 Pointeurs 4 03/10/2025 Repr\u00e9sentation des entiers"},{"location":"evaluations/#travaux-pratiques","title":"Travaux pratiques","text":"N\u00b0 Date Th\u00e8mes Titre Enonc\u00e9 Corrig\u00e9 1 17/09/2025 Bases du C 2 08/10/2025 Nombres harshad"},{"location":"evaluations/#devoirs-maison","title":"Devoirs maison","text":"N\u00b0 Th\u00e8mes Titre Enonc\u00e9 Corrig\u00e9 1 Algorithme de Luhn 2 Nombre de Lychrel"},{"location":"evaluations/#pcsi","title":"PCSI","text":""},{"location":"evaluations/#devoirs-surveilles_1","title":"Devoirs surveill\u00e9s","text":"N\u00b0 Date Th\u00e8mes Titre Enonc\u00e9 Corrig\u00e9 0 01/10/2025 Bases de Python 1 pr\u00e9vu le 17/12/2025 ....... 2 pr\u00e9vu le 25/03/2026 ....... 3 pr\u00e9vu le 20/05/2026 ......."},{"location":"evaluations/#interrogation-de-cours_1","title":"Interrogation de cours","text":"N\u00b0 Date Th\u00e8mes Titre Enonc\u00e9 Corrig\u00e9"},{"location":"evaluations/#travaux-pratiques_1","title":"Travaux pratiques","text":"N\u00b0 Date Th\u00e8mes Titre Enonc\u00e9 Corrig\u00e9"},{"location":"evaluations/#pc","title":"PC","text":""},{"location":"evaluations/#devoirs-surveilles_2","title":"Devoirs surveill\u00e9s","text":"N\u00b0 Date Th\u00e8mes Titre Enonc\u00e9 Corrig\u00e9 1 pr\u00e9vu le 13/11/2025 ......."},{"location":"evaluations/#interrogation-de-cours_2","title":"Interrogation de cours","text":"N\u00b0 Date Th\u00e8mes Titre Enonc\u00e9 Corrig\u00e9"},{"location":"evaluations/#travaux-pratiques_2","title":"Travaux pratiques","text":"N\u00b0 Date Th\u00e8mes Titre Enonc\u00e9 Corrig\u00e9"},{"location":"futur_mp2i/","title":"Se pr\u00e9parer \u00e0 l'informatique en MP2I","text":"<p>Le premier conseil est d'arriv\u00e9 repos\u00e9 et motiv\u00e9  ! Le rythme en classe pr\u00e9paratoire est bien plus soutenu que dans le secondaire et prendre de l'avance mais arriv\u00e9 \u00e9puis\u00e9 ne sera pas productif. M\u00eame si vous n'avez pas fait nsi au lyc\u00e9e, tout sera repris depuis le d\u00e9but, inutile de vous inqui\u00e9ter ! Ceci dit, voici quelques conseils pour consolider ou v\u00e9rifier que vous avez les bases normalement acquises au lyc\u00e9e :</p>"},{"location":"futur_mp2i/#des-bases-en-programmation","title":"Des bases en programmation","text":"<p>Bien que  Python ne soit pas au programme de la MP2I, une connaissance \u00e9l\u00e9mentaire de ce langage est attendue \u00e0 l'entr\u00e9e en MP2I  et notamment des concepts suivants :</p> <ul> <li>expressions et op\u00e9rateurs arithm\u00e9tique</li> <li>variables et affectations</li> <li>bool\u00e9ens, op\u00e9rateurs <code>and</code>, <code>or</code> et <code>not</code></li> <li>instructions conditionnelles et boucles</li> <li>fonctions</li> </ul> <p>Pour v\u00e9rifier votre niveau en Python, voici quelques ressources :</p> <ol> <li>Futurecoder propose un cours en ligne adapt\u00e9 aux d\u00e9butants</li> <li>Le site France-IOI propose une initiation accompagn\u00e9e d'exercices</li> <li>Ce site d'un collectif d'enseignants de NSI propose aussi de nombreux exercices \u00e0 faire directement dans le navigateur sans aucune installation. Les exercices sont class\u00e9s par niveau de difficult\u00e9, les plus faciles sont abordables m\u00eame sans avoir fait nsi.</li> </ol>"},{"location":"futur_mp2i/#sans-oublier-les-mathematiques","title":"Sans oublier les math\u00e9matiques !","text":"<p>L'informatique c'est aussi des math\u00e9matiques, \u00e0 votre arriv\u00e9e en MP2I des notions comme  les calculs sur les puissances ou le raisonnement par r\u00e9currence seront suppos\u00e9es connues.</p>"},{"location":"futur_mp2i/#environnement-de-travail","title":"Environnement de travail","text":"<p>Une pratique r\u00e9guli\u00e8re de la programmation est indispensable pour progresser cette ann\u00e9e, aussi il vous faudra disposer d'un ordinateur personnel avec un environnement de travail adapt\u00e9 \u00e0 la MP2I. Deux langages sont au programme en mp2i : Le C et le  OCaml. L'\"\u00e9cosyst\u00e8me\" naturel de ces deux langages est le syst\u00e8me d'exploitation Linux. Au lyc\u00e9e, la distribution Linux install\u00e9 est Debian. En d\u00e9but d'ann\u00e9e, une \"install party\" sera organis\u00e9e mais vous pouvez prendre un peu d'avance :</p>"},{"location":"futur_mp2i/#installer-linux","title":"Installer Linux","text":"<p>Trois options sont possibles :</p> <ol> <li> <p>L'installer en parall\u00e8le de windows et utiliser un dual-boot, c'est sans doute la meilleure option. Voici en d\u00e9tail la proc\u00e9dure \u00e0 suivre :</p> <ol> <li>T\u00e9l\u00e9charger la derni\u00e8re version stable de Debian sous la forme d'un fichier <code>.iso</code> (prendre l'image d'installation de taille r\u00e9duite pour PC 64 bits).</li> <li>T\u00e9lecharger et installer balena etcher un logiciel permettant de flasher des cl\u00e9s usb</li> <li>Lancer balena etcher et flasher sur une cl\u00e9 usb (vide) l'iso r\u00e9cup\u00e9r\u00e9 \u00e0 l'\u00e9tape a.</li> <li>Ins\u00e9rer la cl\u00e9 usb et red\u00e9marrer votre ordinateur, s'il d\u00e9marre sur la cl\u00e9 usb et vous propose d'installer Ubuntu c'est gagn\u00e9, aller directement \u00e0 l'\u00e9tape f. </li> <li>Si l'ordinateur ne red\u00e9marre pas directement sur la cl\u00e9 usb c'est qu'il est configur\u00e9 pour d\u00e9marrer directement sur le disque dur. Pour modifier ce comportement, lors de la phase de d\u00e9marrage une touche (g\u00e9n\u00e9ralement il s'agit de F2 ou Del ou F8) vous permet d'acc\u00e9der \u00e0 un menu et de s\u00e9lectionner la cl\u00e9 usb comme p\u00e9riph\u00e9rique de d\u00e9marrage.</li> <li> <p>Suiver simplement les instructions d'installation.</p> <p>Danger</p> <p>Debian d\u00e9tectera que Windows est d\u00e9j\u00e0 install\u00e9 sur votre ordinateur et vous proposera de s'installer \"\u00e0 c\u00f4t\u00e9\" et de partitionner votre disque dur. Attention \u00e0 bien s\u00e9lectionner cette option (vous risquez de perdre l'installation de windows dans le cas contraire)</p> </li> </ol> </li> <li> <p>Utiliser une machine virtuelle</p> </li> <li>Utiliser WSL</li> </ol>"},{"location":"liens/","title":"Liens","text":""},{"location":"liens/#autre-cours-de-mp2i-en-ligne","title":"Autre cours de MP2I en ligne","text":"<ul> <li>Cours d'informatique en MP2I de Quentin Fortier avec notamment les libraries des algorithmes de MP2I en Ocaml et en C. Du m\u00eame auteur, un site de cours et exercices SQL</li> <li>Informatique au CIV de Marc de Falco les chapitres sont disponibles en ligne ou en pdf</li> <li>Informatique MP2I Lyc\u00e9e Paul Val\u00e9ry (Paris) de Ines Klimann avec un cahier de vacances vers la MPI.</li> <li>Des TD et TP du cours 2021/2022 au lyc\u00e9e Fermat de Toulouse par Anne-Elisabeth Falq </li> <li>Cours d'informatique, TD et TP de Julien Reichert</li> <li>Le framagit de Justine Benouwt</li> <li>Les cours d'Anthony Lick</li> <li>Ivan Noyer</li> <li>Cours de J.B Bianquis (Lyc\u00e9e du Parc 2021-2022) au format pdf</li> <li>MP2I de Fermat</li> </ul>"},{"location":"liens/#ressources-pour-linformatique-tronc-commun","title":"Ressources pour l'Informatique Tronc Commun","text":"<ul> <li>CPGE-SII</li> <li>PC* Lyc\u00e9e Berthelot (Jean-Pierre Becirspahic)</li> <li>Cours d'ITC2 Julien Reichert</li> </ul>"},{"location":"liens/#concours-et-initiation-ludiques-a-la-programmation","title":"Concours et initiation ludiques \u00e0 la programmation","text":"<ul> <li>py-rates r\u00e9soudre les huit niveaux d'un jeu de plateau \u00e0 l'aide de programmes en python.</li> <li>France IOI : site d'entra\u00eenement et de d\u00e9couverte de la programmation et de l'algorithmique.</li> <li>Concours Algorea : le site du concours de programmation organis\u00e9 chaque ann\u00e9e par France IOI.</li> <li>Checkio : un site de d\u00e9couverte ludique de la programmation (en anglais).</li> <li>Alkindi : d\u00e9couverte de la cryptographie.</li> <li>Projet Euler : un site d'exercices de programmation autour des math\u00e9matiques (an anglais). </li> <li>Prologin : concours de programmation.</li> <li>Python Challenge : un site d'\u00e9nigmes \u00e0 r\u00e9soudre en utilisant Python (en anglais).</li> <li>Codingame : site de d\u00e9fi de programmation, attention le niveau est \u00e9lev\u00e9.</li> <li>Advent of Code : Tous les ans depuis 2015, le site propose un calendrier de l'avent sous la forme d'un puzzle de programmation \u00e0 r\u00e9soudre par jour dans le langage de son choix. Le niveau devient \u00e9lev\u00e9 d\u00e8s qu'on passe les premiers jours !</li> </ul>"},{"location":"oraux/","title":"Fichiers \u00e0 t\u00e9l\u00e9charger pour la pr\u00e9paration aux oraux","text":"<p>Attention</p> <p>T\u00e9l\u00e9charger uniquement le fichier utilis\u00e9 pour votre exercice !</p>"},{"location":"oraux/#liste-des-fichiers","title":"Liste des fichiers","text":""},{"location":"oraux/#sujet-a-tableaux-autoreferents","title":"Sujet A : Tableaux autor\u00e9f\u00e9rents","text":"<p>Fichier </p>"},{"location":"oraux/#sujet-c-probleme-du-sac-a-dos","title":"Sujet C : Probl\u00e8me du sac \u00e0 dos","text":"<p>Fichier </p>"},{"location":"oraux/#sujet-d-carre-magique","title":"Sujet D : Carr\u00e9 magique","text":"<p>Fichier </p>"},{"location":"oraux/#sujet-e-tranche-maximale-dans-un-tableau","title":"Sujet E : Tranche maximale dans un tableau","text":"<p>Fichier </p>"},{"location":"oraux/#sujet-g-liste-chainee-circulaire","title":"Sujet G : Liste chain\u00e9e circulaire","text":"<p>Fichier </p>"},{"location":"programmes/","title":"Programme d'informatique en MP2I","text":"<ul> <li> <p>Le programme complet d'informatique en MP2I/MPI </p> </li> <li> <p>Annexe pour le langage C </p> </li> <li> <p>Annexe pour le langage OCaml </p> </li> </ul>"},{"location":"programmes/#programme-de-mathematiques-en-mp2i","title":"Programme de math\u00e9matiques en MP2I","text":"<ul> <li>Programme de math\u00e9matiques </li> </ul>"},{"location":"programmes/#programme-dinformatique-en-tronc-commun","title":"Programme d'informatique en tronc commun","text":"<ul> <li>Le programme complet d'ITC </li> </ul>"},{"location":"tags/","title":"Tags","text":""},{"location":"annales/","title":"Annales des sujets d'ITC fil\u00e8re PC","text":"<p>Note</p> <ul> <li>Les sujets et rapports sont extraits des pages officielles des banques de concours :<ul> <li>Concours X-ENS</li> <li>Concours Commun Mines-Pont (les pages  relatives \u00e0 l'\u00e9preuve d'informatique commune ont \u00e9t\u00e9 extraites du rapport de l'\u00e9crit)</li> <li>Concours Commun INP </li> </ul> </li> <li>Les sujets sont disponibles depuis 2023 (date d'entr\u00e9e en vigueur du nouveau programme d'informatique commune de cpge)</li> <li>Les sujets du concours commun mines-ponts sont la propri\u00e9t\u00e9 du gip ccmp, ils sont distribu\u00e9s sous la licence Creative Commons Attribution (voir la page des annales du concours)</li> <li>En fili\u00e8re PC, il n'y a plus d'\u00e9preuve \u00e9crite d'informatique au concours centrale sup\u00e9lec depuis 2022</li> </ul>"},{"location":"annales/#annee-2023","title":"Ann\u00e9e 2023","text":"Banque Sujet Rapport Corrig\u00e9 X-ENS Gestion de versions de grands textes  non disponible CCMP La typographie informatis\u00e9e  non disponible CCINP Reconnaissance optique de caract\u00e8res  non disponible"},{"location":"annales/#annee-2024","title":"Ann\u00e9e 2024","text":"Banque Sujet Rapport Corrig\u00e9 X-ENS Logimage  non disponible CCMP Introduction \u00e0 deux probl\u00e8mes en communication num\u00e9rique  (V. Picard) CCINP Le jeu de l'awal\u00e9  (F. Nativel)"},{"location":"annales/#annee-2025","title":"Ann\u00e9e 2025","text":"Banque Sujet Rapport Corrig\u00e9 X-ENS Le jeu de R\u00f6ckse  non disponible CCMP Autour du sac \u00e0 dos  non disponible CCINP Gestion de randonn\u00e9es  non disponible"},{"location":"annales/CCINP2023/CCINP2023/","title":"CCINP \u00a02023","text":""},{"location":"annales/CCINP2023/CCINP2023/#enonce","title":"Enonc\u00e9","text":"<p>Enonc\u00e9 </p>"},{"location":"annales/CCINP2023/CCINP2023/#partie-i-acquisition-du-document","title":"Partie I - Acquisition du document","text":""},{"location":"annales/CCINP2023/CCINP2023/#question-1","title":"Question 1","text":"<p>Note</p> <p>Les calculatrices \u00e9tant interdites, on effectue le calcul en ordre de grandeur.</p> <ul> <li>Comme \\(256 = 2^8\\), il faut un mot de 8 bits c'est \u00e0 dire un octet pour un repr\u00e9senter un entier compris entre 0 et 255. Par cons\u00e9quent il faut 3 octets pour chaque pixel.</li> <li>La largeur du format A4 est de \\(21\\) cm soit environ \\(8.4\\) pouces avec une r\u00e9solution de 300 ppp on a donc environ 2500 pixels sur la largeur.</li> <li>La longueur du format A4 est de \\(29,7\\) cm soit environ \\(12\\) pouces ce qui donne avec la r\u00e9solution de 300 ppp environ 3600 pixels sur la longueur. Au final la taille de l'image sera environ \\(2.5 \\times 3.6 \\times 10^6 \\times 3  \\simeq 30 \\times 10^6\\) octets c'est \u00e0 dire 30 Mo.</li> </ul>"},{"location":"annales/CCINP2023/CCINP2023/#question-2","title":"Question 2","text":"<p>Attention</p> <p>La fonction de conversion propos\u00e9e dans l'\u00e9nonc\u00e9 semble contenir des erreurs, on propose les corrections suivantes :</p> <ul> <li>\u00e0 la ligne 3, <code>initialise(n0,n1,0)</code> au lieu de <code>initialise(p,q,0)</code></li> <li>\u00e0 la ligne 8, <code>img[i][j] = int(val)</code> au lieu de <code>img[i,j] = int(val)</code></li> </ul> <p>L'\u00e9nonc\u00e9 ne pr\u00e9cise pas la complexit\u00e9 de la foncion <code>initialise</code> appel\u00e9e par <code>conversion_gris</code> on suppose dans la suite qu'elle est de complexit\u00e9 \\(\\mathcal{O}(n_0\\,n_1)\\) (initialisation d'une liste de liste de taille \\(n_0 \\times n_1\\)). La complexit\u00e9 de la fonction <code>conversion_gris</code> est  alors aussi \\(\\mathcal{O}(n_0\\,n_1)\\), en effet elle utilise deux boucles imbriqu\u00e9es effectu\u00e9es respectivement \\(n_0\\) et \\(n_1\\) fois et la boucle int\u00e9rieure n'effectue que des op\u00e9rations \u00e9l\u00e9mentaires (affectation et calcul). </p>"},{"location":"annales/CCINP2023/CCINP2023/#question-3","title":"Question 3","text":"<pre><code>def binarisation(imgG:array, seuil:int) -&gt; array:\n    n0, n1, _ = dimension(img)\n    img_nb = initialise(n0, n1, 0)\n    for i in range(n0):\n        for j in range(n1):\n            if imgG[i][j]&gt;seuil:\n                img_nb[i][j] = 255\n    return img_nb\n</code></pre>"},{"location":"annales/CCINP2023/CCINP2023/#partie-ii-reconnaissance-du-document","title":"Partie II - Reconnaissance du document","text":""},{"location":"annales/CCINP2023/CCINP2023/#question-4","title":"Question 4","text":"<p>La proposition d\u00e9crite dans l'\u00e9nonc\u00e9 correspond \u00e0 la deuxi\u00e8me fonction du document r\u00e9ponse : <pre><code>def bilineaire(im : array, x:float, y: float) -&gt; int :\n    x0 = int(x)\n    x1 = xo + 1\n    y0 = int(y)\n    y1 = y0 + 1\n    a = lineaire(y, y0, y1, im[x0][y0], im[x0][y1])\n    b = lineaire(y, y0, y1, im[x1][y0], im[x1][y1])\n    c = lineaire(x, x0, x1, a, b)\n    return int(c)\n</code></pre></p>"},{"location":"annales/CCINP2024/CCINP2024/","title":"CCINP \u00a02024","text":"<p>Note</p> <ul> <li>Ce corrig\u00e9 peut contenir des erreurs ! Merci de me les signaler si vous en trouvez</li> <li>Un code complet permettant de jouer \u00e0 l'awale en joueur contre joueur ou contre une IA (algorithme min max) et cr\u00e9e au fil des questions est donn\u00e9 en fin de corrig\u00e9</li> </ul>"},{"location":"annales/CCINP2024/CCINP2024/#enonce","title":"Enonc\u00e9","text":"<p>Enonc\u00e9 </p>"},{"location":"annales/CCINP2024/CCINP2024/#partie-i-presentation-et-regles","title":"Partie I - Pr\u00e9sentation et r\u00e8gles","text":""},{"location":"annales/CCINP2024/CCINP2024/#question-1","title":"Question 1","text":"<p>Alice peut choisir de jouer n'importe quelle case non vide de son camp, donc ici les cases 2, 4 et 5</p>"},{"location":"annales/CCINP2024/CCINP2024/#question-2","title":"Question 2","text":"<p>La situation initiale est :</p> 101012 0020165 <p>Voici les diff\u00e9rentes configurations obtenues selon le coup jou\u00e9 :</p> <ul> <li>Si Alice joue la case 2, son gain est nul</li> </ul> 101012 0001175 <ul> <li>Si Alice joue la case 4 elle r\u00e9colte les cases 7 (3 graines), 8 (2 graines) et 9 (3 graines) pour un gain de 8:</li> </ul> 210004 113107 <ul> <li>Si Alice joue la case 5, son gain est nul</li> </ul> 112123 0020160"},{"location":"annales/CCINP2024/CCINP2024/#question-3","title":"Question 3","text":"<p>Dans les deux situations, Alice ne peut jouer que la case 5.</p> <ul> <li>Dans la premi\u00e8re situation, on obtient :</li> </ul> 022222 000000 <p>Mais la r\u00e9colte d'Alice affame alors son adversaire et donc le coup n'est pas valide !</p> <ul> <li>Dans la seconde situation, on obtient :</li> </ul> 100000 000000 <p>Car Alice peut alors r\u00e9colter les cases 6 \u00e0 10 (qui contiennent chacune 2 graines) pour un gain de 10.</p>"},{"location":"annales/CCINP2024/CCINP2024/#partie-ii-programmation-de-la-structure-du-jeu","title":"Partie II - Programmation de la structure du jeu","text":""},{"location":"annales/CCINP2024/CCINP2024/#question-4","title":"Question 4","text":"<pre><code>    def tour_joueur1(jeu):\n        '''Renvoie True si c'est le tour du joueur 1, False sinon.'''\n        # jeu['n'] est nombre de tour d\u00e9j\u00e0 jou\u00e9s c'est le tour du joueur 1 lorsque jeu['n'] est pair\n        return jeu['n'] % 2 == 0\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-5","title":"Question 5","text":"<pre><code>    def tourner_plateau(jeu):\n        '''Ne renvoie rien et modifie le plateau pour inverses les cases des joueurs 1 et 2'''\n        jeu['plateau'][0:6], jeu['plateau'][6:12] = jeu['plateau'][6:12], jeu['plateau'][0:6]\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-6","title":"Question 6","text":"<p>Au plus, une case contient la totalit\u00e9 des graines donc 48. Donc 6 bits sont n\u00e9cessaires pour stocker le nombre de graines de chaque case comme \\(2^6 = 64\\), on peut repr\u00e9senter sur 6 bits les entiers de \\(0\\) \u00e0 \\(65\\).</p>"},{"location":"annales/CCINP2024/CCINP2024/#question-7","title":"Question 7","text":"<pre><code>    def copie(jeu):\n        '''Renvoie une copie du dictionnaire jeu'''\n        copie_jeu = {}\n        copie_jeu['joueur1'] = jeu['joueur1']\n        copie_jeu['joueur2'] = jeu['joueur2']\n        copie_jeu['score'] = jeu['score'].copy()\n        copie_jeu['n'] = jeu['n']\n        copie_jeu['plateau'] = jeu['plateau'].copy()\n        return copie_jeu\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-8","title":"Question 8","text":"<pre><code>    def deplacer_graines(plateau, case):\n        a_semer = plateau[case]\n        plateau[case] = 0\n        # La prochaine position o\u00f9 on va semer\n        pos = (case + 1) % 12\n        while a_semer != 0:\n            plateau[pos] += 1\n            a_semer -= 1\n            pos = (pos + 1) % 12\n            # On ne doit pas semer dans la case initiale\n            if (pos == case):\n                pos = (pos + 1) % 12\n        return (pos-1) % 12\n</code></pre> <p>Note</p> <p>On pouvait aussi utiliser la fonction d'initialisation <code>awale_jcj</code> donn\u00e9e dans l'\u00e9nonc\u00e9 pour initialiser la copie et rensuite recopier ensuite les \u00e9l\u00e9ments diff\u00e9rents.</p>"},{"location":"annales/CCINP2024/CCINP2024/#question-9","title":"Question 9","text":"<pre><code>    def case_ramassable(plateau, case):\n        '''Renvoie True si la case est ramassable, False sinon'''\n        return (6 &lt;= case &lt;= 11) and (2 &lt;= plateau[case] &lt;= 3)\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-10","title":"Question 10","text":"<pre><code>    def ramasser_graines(plateau, case):\n        '''Ramasse les graines de la case et renvoie le nombre de graines ramass\u00e9es'''\n        # le cas de base\n        if not case_ramassable(plateau, case):\n            return 0\n        # l'appel r\u00e9cursif\n        recolte = plateau[case]\n        plateau[case] = 0\n        return recolte + ramasser_graines(plateau, case - 1)\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-11","title":"Question 11","text":"<pre><code>    def test_famine(plateau, case):\n        '''Renvoie True lorsque la r\u00e9colte ne conduit pas \u00e0 la famine de l'adversaire'''\n        copie_plateau = plateau.copy()\n        derniere_case = deplacer_graines(copie_plateau, case)\n        recolte = ramasser_graines(copie_plateau, derniere_case)\n        # On parcourt les cases de l'adversaire si l'une contient des graines, il n'y a pas famine\n        for i in range(6, 12):\n            if copie_plateau[i] != 0:\n                return True\n        return False\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-12","title":"Question 12","text":"<p>On a surlign\u00e9 la ligne \u00e0 compl\u00e9ter (on v\u00e9rifie simplement que les 3 conditions de l'\u00e9nonc\u00e9 sont valides)</p> <pre><code>    def test_case(plateau, case):\n        '''V\u00e9rfie si la case choisie par le joueur est acceptable \n        renvoie True si la case est acceptable, False sinon'''\n        condition3 = test_famine(plateau, case)\n        # case acceptable\n        test = (0 &lt;= case &lt;= 5) and (plateau[case] != 0) and condition3\n        return test\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-13","title":"Question 13","text":"<pre><code>    def cases_possibles(jeu):\n        '''Renvoie la liste des cases jouables'''\n        plateau = jeu['plateau']\n        return [i for i in range(6) if test_case(plateau, i)]\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-14","title":"Question 14","text":"<pre><code>    def tour_suivant(jeu):\n        '''Renvoie True si le jeu peut continuer'''\n        # On v\u00e9rifie les conditions de fin de partie (voir page 9 du sujet)\n        # 1. Un joueur a r\u00e9colt\u00e9 au moins 25 graines\n        if jeu['score'][0] &gt;= 25 or jeu['score'][1] &gt;= 25:\n            return False\n        # 2. Le nombre de tours jou\u00e9s &gt;= 100\n        if jeu['n']&gt;=100:\n            return False\n        # 3. Il reste moins de 3 graines sur le plateau\n        reste = 0\n        for graines in jeu['plateau']:\n            reste += graines\n        if reste &lt;= 3:\n            return False\n        # 4. Le joueur actif n'a pas de coup valide\n        if len(cases_possibles(jeu)) == 0:\n            return False\n        return True\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-15","title":"Question 15","text":"<pre><code>    def tour_jeu(jeu, case):\n        plateau = jeu['plateau']\n        if test_case(plateau, case):  # La case jou\u00e9e est acceptable\n            # Semer et r\u00e9cup\u00e9rer la derniere case atteinte\n            derniere_case = deplacer_graines(plateau, case)\n            # R\u00e9colter depuis la derniere case\n            graines_gagnees = ramasser_graines(plateau, derniere_case)\n            if tour_joueur1(jeu):\n                jeu['score'][0] += graines_gagnees\n            else:\n                jeu['score'][1] += graines_gagnees\n            jeu['n'] += 1\n            tourner_plateau(jeu)\n            return tour_suivant(jeu)\n        else:\n            print(\"La case choisie n'est pas valide !\")\n            return True\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-16","title":"Question 16","text":"<pre><code>    def gagnant(jeu):\n        # Suivant le joueur actif on regarde quelle partie du plateau ramsser\n        if tour_joueur1(jeu):\n            for i in range(0, 6):\n                jeu['score'][0] += jeu['plateau'][i]\n            for i in range(6, 12):\n                jeu['score'][1] += jeu['plateau'][i]\n        else:\n            for i in range(6, 12):\n                jeu['score'][0] += jeu['plateau'][i]\n            for i in range(0, 6):\n                jeu['score'][1] += jeu['plateau'][i]\n        if jeu['score'][0] &gt; jeu['score'][1]:\n            return jeu['joueur1']\n        elif jeu['score'][0] &lt; jeu['score'][1]:\n            return jeu['joueur2']\n        else:\n            return \"\u00e9galit\u00e9\"\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#partie-iii-programmation-de-lintelligence-artificielle-ia","title":"Partie III - Programmation de l'Intelligence Artificielle (IA)","text":""},{"location":"annales/CCINP2024/CCINP2024/#question-17","title":"Question 17","text":"<pre><code>    def gain(jeu, case):\n        '''Renvoie le nombre de graines gagn\u00e9es et un nouveau dictionnaire'''\n        njeu = copie(jeu)\n        plateau = njeu[\"plateau\"]\n        # Semer et r\u00e9cup\u00e9rer la derniere case atteinte\n        derniere_case = deplacer_graines(plateau, case)\n        # R\u00e9colter depuis la derniere case\n        graines_gagnees = ramasser_graines(plateau, derniere_case)\n        if tour_joueur1(jeu):\n            jeu['score'][0] += graines_gagnees\n        else:\n            jeu['score'][1] += graines_gagnees\n        njeu['n'] += 1\n        tourner_plateau(njeu)\n        return graines_gagnees, njeu\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-18","title":"Question 18","text":"<p>Alice jouera la case 5 (branche centrale), en effet la valeur de jeu remont\u00e9e pour cette branche est 2 (elle gagne 2 graines et Bob ne peut obtenir aucun gain au coup suivant). La branche gauche remonte une valeur de jeu nulle (elle gagne 4 graines, mais un des coups suivants de Bob lui permet aussi de gagner 4 graines) et il en est de m\u00eame pour la branche droite.</p>"},{"location":"annales/CCINP2024/CCINP2024/#question-19","title":"Question 19","text":"<p>Les lignes qui devaient \u00eatre compl\u00e9t\u00e9es sont surlign\u00e9es</p> <pre><code>    def Negawale(jeu, profondeur_max, profondeur):\n        #Ce sont les conditions d\u00e9crites \u00e0 la page 12 du sujet : noeud feuille, profondeur maximale atteinte ou autre\n        # Condition1 : noeud feuille (le jeu se termine)\n        if (not tour_suivant(jeu)):\n            if (tour_joueur1(jeu) and gagnant(jeu)==jeu[\"joueur1\"]) or (not tour_joueur1(jeu) and gagnant(jeu)==jeu[\"joueur2\"]):\n                return 500\n            elif (tour_joueur1(jeu) and gagnant(jeu)==jeu[\"joueur2\"]) or (not tour_joueur1(jeu) and gagnant(jeu)==jeu[\"joueur1\"]):\n                return -500\n            else:\n                return 0\n        # Condition 2 : profondeur maximale atteinte\n        elif profondeur==profondeur_max:\n            return 0\n        else:\n            choix_cases = cases_possibles(jeu)\n            vals_jeu = []\n            for case in choix_cases:\n                g, nouveau_jeu = gain(jeu, case)\n                p = Negawale(nouveau_jeu,profondeur_max, profondeur+1)\n                vals_jeu.append([case, g-p])\n            return max_vals(vals_jeu, profondeur)\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-20","title":"Question 20","text":"<pre><code>    def max_vals(vals_jeu, profondeur):\n        # On recherche l'indice du maximum\n        ind_max = 0\n        for i in range(1, len(vals_jeu)):\n            # vals_jeu contient des couples (case, valeur de jeu) \n            if vals_jeu[i][1] &gt; vals_jeu[ind_max][1]:\n                ind_max  = i\n        # Les deux cas \u00e0 distinguer (le noeud de d\u00e9part correspond \u00e0 une profondeur nulle)\n        if profondeur==0:\n            return vals_jeu[ind_max][0]\n        else:\n            return vals_jeu[ind_max][1]\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-21","title":"Question 21","text":"<p>La ligne modifi\u00e9e par rapport \u00e0 <code>awale_jcj</code> a \u00e9t\u00e9 surlign\u00e9e.</p> <pre><code>    def awale_ia(nom_joueur1, nom_joueur2):\n        jeu = initialisation(nom_joueur1, nom_joueur2)\n        jeu_continue = True\n        while jeu_continue:\n            affiche(jeu)\n            case_choisie = Negawale(jeu, 6, 0)\n            jeu_continue = tour_jeu(jeu, case_choisie)\n            _ = input(\"\")\n        return gagnant(jeu)\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-22","title":"Question 22","text":"<pre><code>SELECT id_Joueur\nFROM Joueur\nWHERE niveau&gt;1900\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-23","title":"Question 23","text":"<p>La requ\u00eate suivante donne le nombre de parties victorieuse pour le joueur 1 lorsque la case \"0\" (lettre 'a') a \u00e9t\u00e9 jou\u00e9e au premier coup, on l'utilise dans une sous requ\u00eate dans la r\u00e9ponse <pre><code>SELECT COUNT(*)\nFROM Partie\nWHERE jeu LIKE \"a%\" AND resultat=1;\n</code></pre></p> <pre><code>SELECT 100.0 * (SELECT COUNT(*)\n        FROM Partie\n        WHERE jeu LIKE \"a%\" AND resultat=1) / COUNT(*)\nFROM Partie WHERE jeu LIKE \"a%\";\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-24","title":"Question 24","text":"<pre><code>SELECT nom, prenom\nFROM Joueur\nORDER BY niveau DESC\nLIMIT 3 ;\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#question-25","title":"Question 25","text":"<pre><code>SELECT nom , prenom , COUNT (*) AS nbVic\nFROM Joueur\nJOIN Partie ON id_Joueur = id_joueur1\nWHERE resultat = 1.0\nGROUP BY id_Joueur\nHAVING nbVic &gt; 100\nORDER BY nbVic DESC ;\n</code></pre>"},{"location":"annales/CCINP2024/CCINP2024/#totalite-du-programme-awale","title":"Totalit\u00e9 du programme Awal\u00e9","text":"<p>Fichier Python complet du jeu </p>"},{"location":"annales/CCMP2024/CCMP2024/","title":"CCMP \u00a02024","text":"<p>Note</p> <p>Corrig\u00e9 \u00e9crit par V. Picard</p>"},{"location":"annales/CCMP2024/CCMP2024/#enonce","title":"Enonc\u00e9","text":"<p>Enonc\u00e9 </p>"},{"location":"annales/CCMP2024/CCMP2024/#compression-du-message-dalice-codage-arithmetique","title":"Compression du message d'Alice : codage arithm\u00e9tique","text":""},{"location":"annales/CCMP2024/CCMP2024/#question-1","title":"Question 1","text":"<p>On peut utiliser le code suivant :</p> Caract\u00e8re Code 'a' <code>0</code> 'b' <code>10</code> 'c' <code>11</code> <p>Le codage de <code>s='abaabaca'</code> est alors : <code>0 10 0 0 10 0 11 0</code> (11 bits)</p> <p>Le texte peut-\u00eatre d\u00e9cod\u00e9 sans ambiguit\u00e9 : lorsqu'on rencontre un <code>0</code>, on d\u00e9code en <code>a</code>, lorsqu'on rencontre un <code>1</code>, on lit le bit suivant, si c'est un <code>0</code> on d\u00e9code en <code>b</code> sinon en <code>c</code>.</p>"},{"location":"annales/CCMP2024/CCMP2024/#question-2","title":"Question 2","text":"<pre><code>def nbCaracteres(c: str, s: str) -&gt; int:\n    compteur = 0\n    for l in s:\n        if l == c:\n            compteur += 1\n    return compteur\n</code></pre>"},{"location":"annales/CCMP2024/CCMP2024/#question-3","title":"Question 3","text":"<p>Pour l'entr\u00e9e <code>abaabaca</code> la fonction <code>listeCaracteres</code> renvoie la liste <code>['a','b','c']</code> c'est \u00e0 dire sans r\u00e9p\u00e9tition la liste des caract\u00e8res pr\u00e9sents dans <code>s</code>. Son principe de fonctionnement est le suivant :  </p> <ul> <li>on parcourt les indices de la chaine <code>s</code></li> <li>on maintient \u00e0 jour dans la variable <code>listeCar</code> la liste des caract\u00e8res  de <code>s[0:i]</code> sans doublons (c'est l'invariant de boucle initialement vrai)</li> <li>\u00e0 l'it\u00e9ration d'indice <code>i</code>, si le caract\u00e8re <code>s[i]</code> n'est pas pr\u00e9sent dans <code>listeCar</code> on l'ajoute</li> <li>\u00e0 la fin, l'invariant est vrai donc <code>listeCar</code> contient la liste des caract\u00e8res de <code>s[0:n]=s</code>.</li> </ul>"},{"location":"annales/CCMP2024/CCMP2024/#question-4","title":"Question 4","text":"<p>La boucle <code>for</code> du programme s'ex\u00e9cute exactement <code>n</code> fois. Comme rappel\u00e9 dans l'\u00e9nonc\u00e9 le <code>append</code> de la ligne est de complexit\u00e9 constante mais le <code>in</code> de la ligne de 6 est de complexit\u00e9 lin\u00e9aire en la taille de la liste qui est de taille maximale <code>k</code>. Les complexit\u00e9 est donc en \\(\\mathcal{O}(nk)\\).</p>"},{"location":"annales/CCMP2024/CCMP2024/#question-5","title":"Question 5","text":"<p>La fonction renvoie pour la chaine <code>s</code> donn\u00e9e en argument une liste de couples (tuples de deux \u00e9l\u00e9ments) <code>(c,k)</code> o\u00f9 <code>c</code> est un caract\u00e8re de la chaine <code>s</code> et <code>k</code> le nombre d'occurrences du caract\u00e8re <code>c</code> dans <code>s</code>. Par exemple sur l'entr\u00e9e <code>analyseTexte(\"babaaaabca\")</code> la fonction renvoie <code>[('b',3),('a',6),('c',1)]</code>.</p>"},{"location":"annales/CCMP2024/CCMP2024/#question-6","title":"Question 6","text":"<p>La fonction appelle <code>listeCaracteres</code> qui a une complexit\u00e9 \\(\\mathcal{O}(nk)\\), puis elle effectue une boucle <code>for</code> qui it\u00e8re <code>k</code> fois. le corps de la boucle fait appel <code>nbCaracteres(c,s)</code> qui a une complexit\u00e9 \\(\\mathcal{O}(n)\\). La complexit\u00e9 est donc : \\(\\mathcal{O}(nk) + k\\mathcal{O}(n) = \\mathcal{O}(nk) + \\mathcal{O}(nk) = \\mathcal{O}(nk)\\).</p>"},{"location":"annales/CCMP2024/CCMP2024/#question-7","title":"Question 7","text":"<pre><code>def analyseTexteDictionnaire(s: str):\n    R = {}\n    for c in s:\n        if c in R:  # Caract\u00e8re d\u00e9j\u00e0 rencontr\u00e9 : on incr\u00e9mente son nombre d'occurrences\n            R[c] = R[c] + 1\n        else:  # Le caract\u00e8re appara\u00eet pour la premi\u00e8re fois\n            R[c] = 1\n    return R\n</code></pre> <p>La boucle <code>for</code> s'ex\u00e9cute <code>n</code> fois, le corps de la boucle ne contient que des op\u00e9ration \u00e9l\u00e9mentaires car le teste d'appartenance au dictionnaire est suppos\u00e9 en \\(\\mathcal{O}(1)\\). La complexit\u00e9 de cette nouvelle version est donc \\(n\\mathcal{O}(1) = \\mathcal{O}(n)\\)</p>"},{"location":"annales/CCMP2024/CCMP2024/#question-8","title":"Question 8","text":"<pre><code>SELECT DISTINCT auteur FROM corpus;\n</code></pre>"},{"location":"annales/CCMP2024/CCMP2024/#question-9","title":"Question 9","text":"<p>La requ\u00eate suivante permet d'obtenir le nombre total \\(N\\) de caract\u00e8res en fran\u00e7ais dans l'ensemble de tous les oeuvres : <pre><code>SELECT SUM(nombreCaracteres) \nFROM corpus\nWHERE langue='Fran\u00e7ais';\n</code></pre> On peut alors calculer le nombre d'occurrences de chaque symbole dans l'ensemble des oeuvres en fran\u00e7ais puis diviser le r\u00e9sultat par \\(N\\) \u00e0 l'aide d'une requ\u00eate imbriqu\u00e9e : <pre><code>SELECT symbole, SUM(nombreOccurrences)/(SELECT SUM(nombreCaracteres) FROM corpus WHERE langue='Fran\u00e7ais')\nFROM caractere \nJOIN corpus \nJOIN occurrences\nON caractere.idCar = occurrences.idCar\nAND corpus.idLivre = occurrences.idLivre\nWHERE langue = 'Fran\u00e7ais'\nGROUP BY symbole;\n</code></pre></p>"},{"location":"annales/CCMP2024/CCMP2024/#question-10","title":"Question 10","text":"<p>On applique l'algorithme propos\u00e9 :</p> <ul> <li>On part de l'intervalle \\([0;1[\\) qui sera progressivement affin\u00e9.</li> <li>La premi\u00e8re lettre <code>b</code> correspond \u00e0 l'intervalle \\([0.2;0.3[\\)</li> <li>Pour la lettre suivante <code>a</code> on doit prendre 20% de cet intervalle (fr\u00e9quence de <code>a</code>) \u00e0 partir du d\u00e9but : \\([0.20;0.22[\\)</li> <li>Pour la lettre suivante <code>c</code> on doit prendre 20% de cet intervalle (fr\u00e9quence de <code>c</code>) \u00e0 partir de 30% : \\([0.206;0.210[\\)</li> </ul>"},{"location":"annales/CCMP2024/CCMP2024/#question-11","title":"Question 11","text":"<pre><code>def codage(s: str) -&gt; (float, float):\n    # Bornes de l'intervalle actuel\n    g = 0.0\n    d = 1.0\n    for c in s:\n        (g, d) = codeCar(c, g, d)\n    return g, d\n</code></pre>"},{"location":"annales/CCMP2024/CCMP2024/#question-12","title":"Question 12","text":"<p>Le mot <code>'ad'</code> conduit \u00e0 l'intervalle de codage \\([0.1;0.18[\\) :</p> mot intervalle <code>a</code> \\([0;0.2[\\) <code>ad</code> \\([0.1;0.18[\\) <p>Il nous faut donc calculer \u00e0 quelle proportion de l'intervalle \\([0.1;0.18[\\) le nombre \\(x=0.123\\) se situe :</p> <p>\\(\\dfrac{0.123-0.1}{0.18-0.1} \\simeq 0.28\\)</p> <p>Ce qui correspond \u00e0 l'intervalle \\([0.2;0.3[\\), le prochain caract\u00e8re est donc un <code>b</code>.</p>"},{"location":"annales/CCMP2024/CCMP2024/#question-13","title":"Question 13","text":"<p>Le mot <code>ba</code> est cod\u00e9 par l'intervalle \\([0.2;0.22]\\) et peut donc \u00eatre repr\u00e9sent\u00e9 par le flottant \\(0.2\\). Le mot <code>baa</code> est cod\u00e9 par l'intervalle \\([0.2;0.204]\\) et peut donc \u00eatre repr\u00e9sent\u00e9 par le flottant \\(0.2\\). Comme \\(0\\) est dans l'intervalle repr\u00e9sentant <code>a</code>, on peut ajouter des <code>a</code> au mot sans changer le codage, il faut savoir quand le mot cod\u00e9 se termine.</p>"},{"location":"annales/CCMP2024/CCMP2024/#question-14","title":"Question 14","text":"<p>On d\u00e9termine le caract\u00e8re \\(c\\) correspondant \u00e0 \\(x\\) dans \\([0;1[\\) gr\u00e2ce \u00e0 la fonction <code>decodeCar</code>, ceci est la premi\u00e8re lettre du mot \u00e0 d\u00e9coder. On r\u00e9p\u00e8te ensuite le processus avec le sous-intervalle correspondant \u00e0 \\(c\\) que l'on obtient en utilisant la fonction <code>codeCar</code>, on r\u00e9p\u00e8te le processus jusqu'\u00e0 aboutir au caract\u00e8re de terminaison <code>#</code>. <pre><code>def decodage(x: float) -&gt; str:\n    g, d = 0.0, 1.0\n    s = \"\"\n    c = decodeCar(x, g, d)\n    while c != \"#\":\n        s = s+c\n        g, d = codeCar(c, g, d)\n        c = decodeCar(x, g, d)\n    return s\n</code></pre></p>"},{"location":"annales/CCMP2024/CCMP2024/#decodage-du-message-recu-par-bob-a-laide-de-lalgorithme-de-viterbi","title":"D\u00e9codage du message re\u00e7u par Bob \u00e0 l'aide de l'algorithme de Viterbi","text":""},{"location":"annales/CCMP2024/CCMP2024/#question-15","title":"Question 15","text":"<p>En excluant \\(\\sigma\\) et \\(\\tau\\), il y a \\(NK\\) sommets (les sommets sont les \\(S_{i,j}\\) avec \\(0 \\leqslant i \\leqslant K-1\\) indiquant  du symbole \u00e9mis et \\(0 \\leqslant j \\leqslant N-1\\) indiquant l'indice d'observation). Chaque sommet poss\u00e8de \\(K\\) arcs sortants except\u00e9s ceux correspondants \u00e0 la derni\u00e8re \u00e9mission (c'est \u00e0 dire les \\(S_{j,N-1}, 0\\leqslant j \\leqslant N-1\\). Donc il y a en tout \\((N-1)K^2\\) arcs.</p>"},{"location":"annales/CCMP2024/CCMP2024/#question-16","title":"Question 16","text":"<p>On place :</p> <ul> <li>les sommets \\(\\sigma\\) et \\(\\tau\\)</li> <li>Les sommets \\(S_{i,j}\\) par couche (de la gauche vers la droite l'indice d'observation et de haut en bas le symbole \u00e9mis)</li> <li>On relie tous les sommets de la premi\u00e8re colonne \u00e0 \\(\\sigma\\) et tous ceux de la derni\u00e8re \u00e0 \\(\\tau\\)</li> <li>Chaque somme \\(S_{i,j}\\) est reli\u00e9 \u00e0 tous les sommets de la colonne suivante (les \\(S_{k,j+1}\\)).</li> <li>On sait que Alice a emis <code>[2, 0]</code> donc les arcs quittant \\(\\sigma\\) sont pond\u00e9r\u00e9s par la derni\u00e8re ligne de la matrice \\(E\\) (celle issue du symbole 2).</li> <li>Comme indiqu\u00e9 dans l'\u00e9nonc\u00e9, \"les arcs internes entre \\(S_{i,j}\\) et \\(S_{k,j+1}\\) sont pond\u00e9r\u00e9s par la probabilit\u00e9 \\(E_{obs_{j+1},k}P_{i,k}\\)\".</li> </ul> <p>On obtient donc :</p> <p></p> <p>Le chemin de probabilit\u00e9 maximale est repr\u00e9sent\u00e9 en gras et correspondant au d\u00e9codage <code>[2, 2]</code> (le dernier symbole a \u00e9t\u00e9 corrig\u00e9)</p>"},{"location":"annales/CCMP2024/CCMP2024/#question-17","title":"Question 17","text":"<p>Notons \\(C_N\\), le nombre de chemins dans le graphe pour un message de longueur \\(N \\in \\mathbb{N}\\). On a initialement \\(C_0=1\\). Si le message est de longueur \\(N \\in \\mathbb{N}^*]\\), on a initialement \\(K\\) choix pour le premier arc menant \u00e0 \\(S_{i,0}\\). On peut alors voir le reste du chemin comme celui correspondant \u00e0 un graphe poss\u00e9dant une colonne de moins et dans lequel l'\u00e9tat de d\u00e9part est \\(S_{i,0}\\). On obtient alors la relation de r\u00e9currence suivante : \\(\\left\\{     \\begin{eqnarray}     C_0 &amp; = &amp; 1 \\\\     C_N &amp; = &amp; KC_{N-1} \\text{ pour tout } N \\in \\mathbb{N}^*     \\end{eqnarray} \\right.\\)</p> <p>C'est donc une suite g\u00e9om\u00e9trique de terme g\u00e9n\u00e9ral \\(C_N = K^N\\). On en conclut que le nombre de chemins est exponentiel en la longueur du message et que donc une exploration exhaustive n'est pas envisageable.</p>"},{"location":"annales/CCMP2024/CCMP2024/#question-18","title":"Question 18","text":"<pre><code>def maximumListe(liste: [float]) -&gt; (float, int):\n    '''Pour une liste de flottant renvoie le couple (maximum des \u00e9l\u00e9ments, indice de la 1ere occurrence de ce maximum)'''\n    assert len(liste) &gt; 0\n    vmax = liste[0]\n    imax = 0\n    for i in range(1, len(liste)):\n        if liste[i] &gt; vmax:\n            vmax = liste[i]\n            imax = i\n    return (vmax, imax)\n</code></pre>"},{"location":"annales/CCMP2024/CCMP2024/#question-19","title":"Question 19","text":"<p>Attention</p> <p>La fonction <code>initialiserGlouton</code> propos\u00e9 dans le suhet comporte certaines erreurs. Tout d'abord le prototype de la fonction est <code>initialiserGlouton(Obs:[int],E:[[float]], K) -&gt; int</code> car <code>Obs</code> est une liste et non une matrice. De plus, il faut bien parcourir la ligne d'indice <code>Obs[0]</code> et non la colonne. Le programme propos\u00e9 comporte une erreur de syntaxe \u00e0 la ligne 2, en voici une version corrig\u00e9e : <pre><code>def initialiserGlouton(Obs, E, K):\n    probasInitiales = [E[Obs[0]][i] for i in range(K)]\n    s, symbole = maximumListe(probasInitiales)\n    return symbole\n</code></pre></p> <pre><code>def glouton(Obs: [int], P: [[float]], E: [[float]], K: int, N: int) -&gt; [int]:\n    chemin = []\n    symbole_prec = initialiserGlouton(Obs, E, K)\n    chemin.append(symbole_prec)\n    for symbole in Obs[1:]:\n        probas = [P[symbole_prec][j] * E[symbole][j] for j in range(K)]\n        s, symbole_prec = maximumListe(probas)\n        chemin.append(symbole_prec)\n    return chemin\n</code></pre>"},{"location":"annales/CCMP2024/CCMP2024/#question-20","title":"Question 20","text":"<p>La fonction <code>InitialiserGlouton</code> a un co\u00fbt \\(\\mathcal{O}(K) + \\mathcal{O}(K) =  \\mathcal{O}(K)\\) correspondant \u00e0 la cr\u00e9ation de la liste par compr\u00e9hesion puis \u00e0 la recherche du maximum. La boucle <code>for</code> de la fonction <code>glouton</code> s'ex\u00e9cute \\(N-1\\) fois et le corps de cette boucle est de complexit\u00e9 \\(\\mathcal{O}(K)\\). La complexit\u00e9 est donc \\(\\mathcal{O}(K) + (N-1)\\times\\mathcal{O}(K) = \\mathcal{O}(NK)\\) Ce qui am\u00e9liore nettement le complexit\u00e9 exponentielle de la recherche exhaustive.</p>"},{"location":"annales/CCMP2024/CCMP2024/#question-21","title":"Question 21","text":"<p>L'algorithme choisit d'abord l'arc de probabilit\u00e9 \\(0.6\\) puis celui de probabilit\u00e9 \\(0.5\\) le chemin obtenu par l'algorithme glouton est donc <code>[0,0]</code> avec une probabilit\u00e9 \\(0.6 \\times 0.5 = 0.3\\).</p> <p>Cependant, ce n'est pas le chemin optimal, en effet le d\u00e9codage <code>[1,0]</code> a une probabilit\u00e9 \\(0.4 \\times 0.9 = 0.36\\).</p> <p>Cet exemple prouve donc que l'approche gloutonne est abordable en terme de complexit\u00e9 mais ne conduit pas n\u00e9cessairement au meilleur d\u00e9codage possible.</p>"},{"location":"annales/CCMP2024/CCMP2024/#question-22","title":"Question 22","text":"<p>En transformant chacune des probabilit\u00e9s \\(p\\) pond\u00e9rant les arcs par \\(1-p\\), le chemin de probabilit\u00e9 maximale devient le chemin de probabilit\u00e9 minimale et on peut donc utiliser l'algorithme de Djikstra qui permet de rechercher les plus courts chemins \u00e0 partir d'un sommet source dans un graphe pond\u00e9r\u00e9.</p>"},{"location":"annales/CCMP2024/CCMP2024/#question-23","title":"Question 23","text":"<p>La fonction <code>initialiserViterbi</code> fournie dans l'\u00e9nonc\u00e9 permet de d\u00e9terminer les \\(T_{i,0}\\) et les \\(argT_{i,0}\\), on applique alors les formules de r\u00e9currences donn\u00e9es dans l'\u00e9nonc\u00e9 afin de construire les termes suivantes i.e. les \\(T_{i,j}\\) et les \\(argT_{i,j}\\) pour \\(0 \\leqslant j \\leqslant N-1\\). Ce qui donne :</p> <pre><code>def construireTableauViterbi(Obs:[int], P:[[float]], E:[[float]], K:int, N:int) -&gt; ([[float]],[[int]]):\n    T, argT = initialiserViterbi(E, Obs[0], K, N)\n    for j in range(1, N):\n        for i in range(K):\n            temp = [T[k][j-1]*P[k][i]*E[Obs[j][i] for k in range(K)]]\n            T[i][j], argT[i][j] = maximumListe(temp)\n    return T, argT\n</code></pre>"},{"location":"annales/CCMP2024/CCMP2024/#question-24","title":"Question 24","text":"<p>La probabilit\u00e9 maximale dans la derni\u00e8re colonne est \\(1.8e-05\\) et correspond au symbole <code>0</code>, on utilise alors le deuxi\u00e8me tableau qui donne pour chaque symbole le pr\u00e9d\u00e9cesseur :</p> <p>\\(\\left(\\begin{matrix} -1 &amp; 2 &amp; \\color{red}{0} &amp; \\color{red}{0} &amp; 2 &amp; 1 &amp; 1 &amp; \\color{red}{0} \\\\ -1 &amp; 2 &amp; 2 &amp; 2 &amp; 2 &amp; \\color{red}{1} &amp; \\color{red}{1} &amp; 0 \\\\ -1 &amp; \\color{red}{2} &amp; 0 &amp; 0 &amp; \\color{red}{2} &amp; 1 &amp; 1 &amp; 0 \\\\ \\end{matrix}\\right)\\)</p> <p>La s\u00e9quence d'\u00e9tat la plus probable est donc <code>[2,0,0,2,1,1,0,0]</code></p>"},{"location":"annales/CCMP2024/CCMP2024/#question-25","title":"Question 25","text":"<p>L'initialisation des tableaux \\(T\\) et \\(argT\\) a une complexit\u00e9 \\(\\mathcal{O}(NK)\\) (d\u00e9finition par compr\u00e9hension en \\(\\mathcal{O}(NK) puis remplissage de la premi\u00e8re colonne en \\mathcal{O}(K)\\)). La construction des tableaux s'effectue dans deux boucles imbriqu\u00e9es de tailles respectives \\(N-1\\) et \\(K\\) et fait appel \u00e0 la fonction de recherche du maximum de complexit\u00e9 la taille de la liste c'est \u00e0 dire \\(\\mathcal{O}(K)\\), ce qui donne une complexit\u00e9 en \\(\\mathcal{O}((N-1)\\times K \\times K) = \\mathcal{O}(NK^2)\\). Au total on a donc une complexit\u00e9 temporelle en \\(\\mathcal{O}(NK^2)\\).</p> <p>La complexit\u00e9 spatiale est celle de la taille des deux tableaux cr\u00e9es c'est \u00e0 dire \\(\\mathcal{O}(NK)\\)</p>"},{"location":"annales/X-ENS2024/X-Ens2024/","title":"Enonc\u00e9","text":"<p>Enonc\u00e9 </p>"},{"location":"annales/X-ENS2024/X-Ens2024/#correction","title":"Correction","text":""},{"location":"annales/X-ENS2024/X-Ens2024/#partie-i-preliminaires-et-verifications-dune-solution","title":"Partie I - Pr\u00e9liminaires et v\u00e9rifications d'une solution","text":""},{"location":"annales/X-ENS2024/X-Ens2024/#question-1","title":"Question 1","text":"<p>La complexit\u00e9 en est \\(\\mathcal{O}(\\mathtt{nl} \\times \\mathtt{nc})\\).</p>"},{"location":"annales/X-ENS2024/X-Ens2024/#question-2","title":"Question 2","text":""},{"location":"annales/X-ENS2024/X-Ens2024/#question-3","title":"Question 3","text":""},{"location":"annales/X-ENS2024/X-Ens2024/#question-4","title":"Question 4","text":"<ol> <li> <p>Deux exemples o\u00f9 la fonction renvoie <code>False</code> : </p> <ul> <li>Avec <code>sol = [[1,0,1]]</code> et <code>cle_l = [[1]]</code>, illustre le cas o\u00f9 un bloc ne figure pas dans la liste des cl\u00e9s. Au 3\u00e8me tour de boucle <code>i_bloc</code> vaut 1 et donc la fonction renvoie <code>False</code> (la premi\u00e8re condition du <code>and</code> est fausse).</li> <li>Avec <code>sol = [[1,1,0]]</code> et <code>cle_l = [[1]]</code>, illustre le cas o\u00f9 la taille d'un bloc n'est pas correcte. Au 3\u00e8me tour de boucle <code>taille</code> vaut 2 et donc la fonction renvoie <code>False</code> (la seconde condition du <code>and</code> est fausse).</li> </ul> </li> <li> <p>La fonction ne v\u00e9rifie pas :</p> <ul> <li>que tous les valeurs de <code>sol[i]</code> sont biens des <code>0</code> ou <code>1</code>. Pour le faire, on pourrait par exemple ajouter en d\u00e9but de fonction : <pre><code>if any(v!=0 and v!=1 for v in sol[i]):\n    return False\n</code></pre></li> <li>que le nombre de blocs est bien \u00e9gale \u00e0 <code>i_bloc</code> en quittant la boucle <code>for</code>, on peut corriger en rempla\u00e7ant le <code>return True</code> par <code>return i_bloc == len(cle_l[i])</code></li> </ul> </li> </ol>"},{"location":"annales/X-ENS2024/X-Ens2024/#partie-ii-resolution-systematique","title":"Partie II - R\u00e9solution syst\u00e9matique","text":""},{"location":"annales/X-ENS2024/X-Ens2024/#question-5","title":"Question 5","text":"<p>Les \\(n\\) cases remplies sont celles des \\(k\\) premi\u00e8res lignes (donc \\(k \\times \\mathtt{nc}\\)) plus \\(l\\)  cases de la (k+1)\u00e8me ligne (\\(l&lt; \\mathtt{nc}\\)). Donc, \\(n = k\\times \\mathtt{nc} + l\\) avec \\(l&lt; \\mathtt{nc}\\), c'est \u00e0 dire que \\(k\\) et \\(l\\) sont respectivement le reste et le quotient dans la division euclidienne de \\(n\\) par \\(\\mathtt{nc}\\).</p>"},{"location":"annales/X-ENS2024/X-Ens2024/#question-6","title":"Question 6","text":"<p> La complexit\u00e9 de cette fonction est \\(\\mathcal{O}\\left(2^{\\mathtt{nl}\\times\\mathtt{nc}}\\times\\mathtt{nl}\\times\\mathtt{nc}\\right)\\), en effet on g\u00e9n\u00e8re les \\(2^{\\mathtt{nl}\\times\\mathtt{nc}}\\) possibilit\u00e9s et la v\u00e9rification de chacune d'entre elle est en \\(\\mathcal{O}(\\mathtt{nl}\\times\\mathtt{nc})\\)</p>"},{"location":"annales/X-ENS2024/X-Ens2024/#question-7","title":"Question 7","text":"<p>Dans la fonction <code>liste_solution_aux</code> ci-dessus, on peut v\u00e9rifier avant de cr\u00e9er <code>candidat1</code>  que le nombre de un sur la ligne et la colonne ne d\u00e9passe pas celui indiqu\u00e9 dans <code>cle_l</code> et <code>cle_c</code>.  Par exemple \u00e0 l'aide d'une fonction annexe <code>nb_un</code> qui prend en entr\u00e9e une solution partielle <code>sol_p</code> ainsi qu'un indice de ligne ou de colonne et renvoie le nombre de un de la solution sur cette ligne et cette colonne.</p>"},{"location":"annales/X-ENS2024/X-Ens2024/#partie-iii-placements-possibles-dun-bloc","title":"Partie III - Placements possibles d'un bloc","text":""},{"location":"annales/X-ENS2024/X-Ens2024/#question-8","title":"Question 8","text":"<p> La complexit\u00e9 est en \\(\\mathcal{O}(s)\\) car on a une boucle r\u00e9p\u00e9t\u00e9e au plus <code>s</code> fois et qui ne contient que des instructions \u00e9l\u00e9mentaires.</p>"},{"location":"itc/algojeux/","title":"C21 Algorithme pour l'\u00e9tude des jeux","text":""},{"location":"itc/algojeux/#cours","title":"Cours","text":"<p>Support de cours chapitre 21 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"itc/algojeux/#travaux-pratique","title":"Travaux pratique","text":""},{"location":"itc/algojeux/#exercice-1-representation-par-liste-dadjacence","title":"Exercice 1 : Repr\u00e9sentation par liste d'adjacence","text":"<p>On rappelle qu'un graphe peut-\u00eatre repr\u00e9sent\u00e9 par liste d'adjacence et qu'en Python, on peut utiliser un dictionnaire dont les cl\u00e9s sont les noeuds du graphe et les valeurs  la liste des successeurs de la cl\u00e9. Par exemple, le graphe </p> <pre><code>graph LR\nA((\"A\"))\nB((\"B\"))\nC((\"C\"))\nD((\"D\"))\nE((\"E\"))\nA --&gt; B\nA --&gt; C\nC --&gt; E\nD --&gt; E\nB --&gt; C\nC --&gt; D</code></pre> <p>est repr\u00e9sent\u00e9 par le dictionnaire </p> <pre><code>ex_graphe = {\n    'A' : [B,C],\n    'C' : [E,D],\n    'D' : [E],\n    'B' : [C],\n    'E' : [],\n}\n</code></pre> <ol> <li> <p>Ecrire en Python une fonction <code>ajoute_arc</code> qui prend en argument un dictionnaire repr\u00e9sentant un graphe par liste d'adjacence ainsi que deux sommets et ajoute cet arc dans le dictionnaire.</p> <p>Aide</p> <p>Penser \u00e0 pr\u00e9voir le cas o\u00f9 les sommets n'existent pas encore dans le dictionnaire.</p> </li> <li> <p>Utiliser cette fonction pour en partant d'un dictionnaire vide, construire le dictionnaire repr\u00e9sentant le graphe ci-dessus</p> </li> <li> <p>Le module <code>graphviz</code> de Python permet de visualiser un graphe, ajouter l'instruction permettant d'importer de module au d\u00e9but de votre programme.</p> </li> <li> <p>Aucune connaissance sur l'utilisation de ce module n'est attendue aussi on fournit ci-dessous une fonction <code>visualise</code> permettant  de visualiser un graphe repr\u00e9sent\u00e9 par liste d'adjacence \u00e0 l'aide d'un dictionnaire. Recopier cette fonction et l'utiliser afin de visualiser le graphe construit ci-dessus. <pre><code>def visualise(graphe):\n        img_graphe = graphviz.Digraph()\n        for s in graphe:\n             img_graphe.node(s)\n             for t in graphe[s]:\n                  img_graphe.edge(s,t)\n        img_graphe.view()\n</code></pre></p> </li> <li> <p>Ecrire une fonction <code>ajoute</code> qui cr\u00e9e un sommet dans le graphe. Si ce sommet existe d\u00e9j\u00e0, la fonction ne fait rien.</p> </li> <li> <p>Ecrire une fonction <code>supprimer</code> qui supprime un sommet ainsi que tous les arcs (entrant ou sortant) de ce sommet. Si ce sommet n'existe pas, la fonction ne fait rien.</p> </li> <li> <p>Ecrire une fonction <code>supprime</code> qui permet d'enlever un arc dans le graphe (si l'arc n'existe pas la fonction ne fait rien)</p> </li> <li> <p>Tester vos fonctions en construisant et en visualisant le graphe de votre choix.</p> </li> </ol>"},{"location":"itc/algojeux/#exercice-2-representation-par-matrice-dadjacence","title":"Exercice 2 : Repr\u00e9sentation par matrice d'adjacence","text":"<p>On rappelle qu'un graphe peut-\u00eatre repr\u00e9sent\u00e9 par une matrice d'adjacence \\(M\\), si \\(M_{ij}=1\\) alors il y a un arc allant sur sommet \\(i\\) au sommet \\(j\\). En Python, on utilisera une liste de liste afin de repr\u00e9sent\u00e9 la matrice et pour simplifier, les noms des sommets seront leur index dans la liste.Par exemple, le graphe </p> <pre><code>graph LR\nA((\"A\"))\nB((\"B\"))\nC((\"C\"))\nD((\"D\"))\nE((\"E\"))\nA --&gt; B\nA --&gt; C\nC --&gt; E\nD --&gt; E\nB --&gt; C\nC --&gt; D</code></pre> <p>est repr\u00e9sent\u00e9 par la liste de liste  :</p> <p><pre><code>ex_graphe = [\n    [0,1,1,0,1],\n    [0,0,1,0,0],\n    [0,0,0,1,1],\n    [0,0,0,0,1],\n    [0,0,0,0,0]\n]\n</code></pre> Le graphe vide  est repr\u00e9sent\u00e9 par la liste vide.</p> <ol> <li> <p>Ecrire une fonction <code>ajoute_sommet</code> qui prend en argument un graphe repr\u00e9sent\u00e9e par une liste de liste et ajoute un nouveau sommet.</p> <p>Aide</p> <p>Il faut donc ajouter une nouvelle liste et un 0 \u00e0 la fin de toutes les lignes.</p> </li> <li> <p>Ecrire une fonction <code>ajoute_arc</code> qui prend en argument l'indice de deux sommets et ajoute l'arc correspondant.</p> <p>Aide</p> <p>Penser \u00e0 utiliser la fonction pr\u00e9c\u00e9dente pour ajouter des sommets si l'indice des sommets \u00e0 ajouter d\u00e9passe la taille du graphe</p> </li> <li> <p>Utiliser la fonction pr\u00e9c\u00e9dente afin de construire le graphe donn\u00e9e en exemple ci-dessus en partant du graphe vide (qui est repr\u00e9sent\u00e9 par <code>[]</code>)</p> </li> <li> <p>Comme dans l'exercice pr\u00e9c\u00e9dent, visualiser votre graphe \u00e0 l'aide de la fonction fournie ci-dessous (ne pas oublier d'importer le module <code>graphviz</code>). On rappelle que les sommets sont ici nomm\u00e9s avec leur indice dans la matrice, donc \\(0, 1, \\dots\\)</p> </li> </ol>"},{"location":"itc/algojeux/#exercice-3-parcours-en-profondeur","title":"Exercice 3 : Parcours en profondeur","text":"<pre><code>graph LR\nA((\"A\"))\nB((\"B\"))\nC((\"C\"))\nD((\"D\"))\nE((\"E\"))\nF((\"F\"))\nG((\"G\"))\nH((\"H\"))\nA --&gt; B\nA --&gt; C\nC --&gt; F\nC --&gt; G\nE --&gt; G\nG --&gt; F\nB --&gt; E\nC --&gt; H\nB --&gt; D\nD --&gt; C\nE --&gt; D</code></pre> <ol> <li> <p>Visualisation d'un parcours depth first search Un outil en ligne, permet de visualiser le r\u00e9sultat du parcours en profondeur d'un graphe. Utiliser cet outil pour construire le graphe ci-dessus puis l'utiliser pour visualiser le parcours en profondeur.</p> <p>Attention</p> <p>Dans le menu bien choisir: DFS</p> </li> <li> <p>Rappeler le principe de l'algorithme de parcours en profondeur (voir le cours ou le code en pseudo-langage donn\u00e9 dans l'outil de visualisation)</p> </li> <li> <p>Ecrire cet algorithme en Python en utilisant la repr\u00e9sentation du graphe sous forme d'une liste d'adjacence.</p> </li> <li> <p>Tester votre impl\u00e9mentation en comparant avec les r\u00e9sultats obtenus sur l'outil de visualisation</p> </li> </ol>"},{"location":"itc/algojeux/#exercice-4-file-et-module-deque","title":"Exercice 4 : File et module deque","text":"<p>On rappelle qu'une file est une structure de donn\u00e9es de type fifo (premier entr\u00e9, premier sorti). Les op\u00e9rations de base (enfiler ou d\u00e9filer) doivent s'effectuer de fa\u00e7on efficace (c'est-\u00e0-dire en \\(O(1)\\))</p> <ol> <li> <p>Si on consid\u00e8re qu'une liste de Python est une file (la sortie de la file est \u00e0 la fin), quelle op\u00e9ration permet d'enfiler ? de d\u00e9filer ?</p> </li> <li> <p>Ecrire les op\u00e9rations <code>enfiler</code> et <code>defiler</code> sur une liste de Python.</p> </li> <li> <p>V\u00e9rifier exp\u00e9rimentalement que <code>defiler</code> ne s'effectue pas en temps constant.</p> <p>Aide</p> <p>On peut mesurer le temps d'execution d'une op\u00e9ration \u00e0 l'aide de la fonction <code>perf_counter</code> du module <code>time</code></p> </li> <li> <p>Le module <code>deque</code> (accessible avec <code>from collections import deque</code>) permet en Python une impl\u00e9mentation efficace des files. Les op\u00e9rations de base sont donn\u00e9es ci-dessous : <pre><code>ma_file = deque() #cr\u00e9ation d'une file vide\nma_file.appendleft(42) #On enfile 42\nres = ma_file.pop() #on d\u00e9file 42 (dans res)\n</code></pre> Utiliser cette nouvelle impl\u00e9mentation et v\u00e9rifier exp\u00e9rimentalement que les op\u00e9rations s'effectuent bien en \\(O(1)\\).</p> </li> </ol>"},{"location":"itc/algojeux/#exercice-5-parcours-en-largeur","title":"Exercice 5 : Parcours en largeur","text":"<pre><code>graph LR\nA((\"A\"))\nB((\"B\"))\nC((\"C\"))\nD((\"D\"))\nE((\"E\"))\nF((\"F\"))\nG((\"G\"))\nH((\"H\"))\nA --&gt; B\nA --&gt; C\nC --&gt; F\nC --&gt; G\nE --&gt; G\nG --&gt; F\nB --&gt; E\nC --&gt; H\nB --&gt; D\nD --&gt; C\nE --&gt; D</code></pre> <ol> <li> <p>Visualisation d'un parcours breadth first search Un outil en ligne, permet de visualiser le r\u00e9sultat du parcours en largeur d'un graphe. Utiliser cet outil pour construire le graphe ci-dessus puis l'utiliser pour visualiser le parcours en largeur.</p> <p>Attention</p> <p>Dans le menu bien choisir: BFS</p> </li> <li> <p>Rappeler le principe de l'algorithme de parcours en largeur (voir le cours ou le code en pseudo-langage donn\u00e9 dans l'outil de visualisation)</p> </li> <li> <p>Ecrire cet algorithme en Python en utilisant la repr\u00e9sentation du graphe sous forme d'une liste d'adjacence.</p> <p>Aide</p> <p>On pourra utiliser le module <code>deque</code> pour g\u00e9rer la file contenant les sommets \u00e0 traiter mais aussi une simple liste (\u00e9tant donn\u00e9 la taille du graphe, les consid\u00e9rations de performance sont sans importance)</p> </li> <li> <p>Tester votre impl\u00e9mentation en comparant avec les r\u00e9sultats obtenus sur l'outil de visualisation</p> </li> </ol>"},{"location":"itc/bases/","title":"C1 Bases de Python","text":""},{"location":"itc/bases/#installation","title":"Installation","text":""},{"location":"itc/bases/#python","title":"Python","text":"LinuxWindowsMacOS <p>Python fait normalement partie int\u00e9grante de toutes les distributions Linux, aucune installation n'est n\u00e9cessaire. Pour le v\u00e9rifier taper simplement la commande <code>python3 --version</code> dans un terminal (sous ubuntu le raccourci clavier pour ouvrir un terminal est Ctrl\uff0bAlt\uff0bT).</p> <ol> <li>T\u00e9l\u00e9charger les fichiers d'installation sur python.org. Il faut s\u00e9lectionner dans les stable releases, le fichier d'installation correspondant \u00e0 votre ordinateur (sur un ordinateur r\u00e9cent cela devrait \u00eatre la version <code>64-bit</code>)</li> <li>Lancer l'installation en prenant soin de bien cocher l'option <code>Add Python to PATH</code> (en bas de la fen\u00eatre du programme d'installation)</li> <li>Ouvrir un terminal et y taper simplement <code>python</code> pour v\u00e9rifier que tout s'est d\u00e9roul\u00e9 correctement</li> </ol> <p>Sur les ordinateurs Apple r\u00e9cents, Python devrait \u00eatre d\u00e9j\u00e0 install\u00e9. Pour le v\u00e9rifier, lancer un terminal et taper la commande <code>python3 --version</code>.</p>"},{"location":"itc/bases/#ide","title":"IDE","text":"<p>De nombreux environnement int\u00e9gr\u00e9 de d\u00e9veloppement (IDE pour Integratred Developement Environment en anglais) existent pour programmer en Python. Parmi les plus connus (que vous avez peut-\u00eatre rencontr\u00e9 au lyc\u00e9e), on peut citer spyder, Visual Studio Code ou encore thonny. Vous \u00eates libre d'utiliser celui qui vous convient. En cours, les exemples seront trait\u00e9s avec thonny, c'est aussi l'IDE d\u00e9j\u00e0 install\u00e9 sur les ordinateurs de la salle de TP.</p>"},{"location":"itc/bases/#en-cas-de-problemes","title":"En cas de probl\u00e8mes ...","text":"<p>Le mini IDE d\u00e9j\u00e0 rencontr\u00e9 au chapitre pr\u00e9c\u00e9dent ne n\u00e9cessite aucune installation et sera toujours disponible ci-dessous :</p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur"},{"location":"itc/bases/#premiers-pas-dans-la-console","title":"Premiers pas dans la console","text":"<p>Pour acc\u00e9der \u00e0 une console Python, taper la commande <code>python</code> dans un terminal sur votre ordinateur ou utiliser le terminal ci-dessous int\u00e9gr\u00e9 dans votre navigateur et qui fonctionnera sans aucune installation de logiciel tiers. </p> Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papier"},{"location":"itc/bases/#expressions-arithmetiques","title":"Expressions arithm\u00e9tiques","text":"<p>Taper dans le terminal <code>6*7</code> puis la touche Enter pour voir appara\u00eetre la r\u00e9ponse \u00e0 la grande question sur la vie, l'Univers et le reste. En mode console Python \u00e9value donc les expressions arithm\u00e9tiques entr\u00e9es au clavier et affiche leur valeur dans la console. Les op\u00e9rateurs utilis\u00e9s dans ces expressions sont rappel\u00e9s ci-dessous</p> <p>A retenir !</p> <p>En Python, les expressions arithm\u00e9tiques utilisent les op\u00e9rateurs suivants :</p> <ul> <li><code>+</code> : addition</li> <li><code>-</code> : soustraction</li> <li><code>*</code> : multiplication</li> <li><code>/</code> : division d\u00e9cimale</li> <li><code>//</code>: quotient dans la division euclidienne</li> <li><code>%</code> : reste dans la division euclidienne (particuli\u00e8rement utile pour les tests de divisibilit\u00e9)</li> </ul>"},{"location":"itc/bases/#exercice-1-evaluations-dexpressions-arithmetiques","title":"Exercice 1 : Evaluations d'expressions arithm\u00e9tiques","text":"<p>Calculer les expressions suivantes (vous pouvez v\u00e9rifier vos r\u00e9sultats en les entrant dans le formulaire idoine)</p> <ul> <li> <p>Calculer \\((547 \\times 915) + (1789 \\times 1815)\\) </p> </li> <li> <p>Calculer \\(212^{7} - 313^{3}\\) </p> </li> <li> <p>D\u00e9terminer le reste dans la division euclidienne de 123456789 par 2024 </p> </li> <li> <p>Donner les 5 derniers chiffres de \\(2024^{30}\\) </p> </li> </ul> Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papier"},{"location":"itc/bases/#entiers-et-flottants","title":"Entiers et flottants","text":"<p>Le dernier exemple de l'exercice pr\u00e9c\u00e9dent semble montrer qu'il n'y a pas de limitations au nombre de chiffres des entiers en Python. En tapant <code>2024.0**30</code> dans la console, on obtient un r\u00e9sultat bien diff\u00e9rent. En effet, <code>2024</code> est un entier de Python, il est du type <code>int</code> alors que <code>2024.0</code> est un nombre \u00e0 virgule flottante de Python, il est du type <code>float</code>. Les repr\u00e9sentations internes et les algorithmes de calculs utilis\u00e9s sur ces deux types de nombres sont diff\u00e9rents (ces points seront abord\u00e9s dans le courant de l'ann\u00e9e). En tapant <code>2024.0**100</code>, on peut aussi constater que les nombres trop grands ne semblent pas avoir de repr\u00e9sentation flottante (on parle de d\u00e9passement de capacit\u00e9 ou overflow en anglais), alors que <code>2024**100</code> ne posera aucun probl\u00e8me \u00e0 Python.</p> <p>A retenir</p> <p>Python utilise deux types de nombres :</p> <ul> <li>les entiers (type <code>int</code>) dont la taille n'est pas limit\u00e9e. </li> <li>les flottants (type <code>float</code>) qui s'\u00e9crivent toujours avec le s\u00e9parateur d\u00e9cimal <code>.</code> et sur lesquels des d\u00e9passements de capacit\u00e9 sont possibles.</li> <li>ces deux types num\u00e9riques partagent les m\u00eames op\u00e9rateurs <code>+,-,*,/,**</code></li> <li>On utilisera la division euclidienne (<code>//</code> pour le quotient, et <code>%</code> pour le reste) uniquement sur les entiers positifs.</li> </ul>"},{"location":"itc/bases/#comparaisons","title":"Comparaisons","text":"<p>En tapant <code>20 &gt; 7</code> dans une console Python, on obtient <code>True</code>, <code>8 &lt; 1</code> donne <code>False</code>. Ces deux expressions sont dites bool\u00e9ennes, elles ne peuvent prendre que deux valeurs qui en Python sont donc <code>True</code> ou <code>False</code>. Les autres op\u00e9rateurs de comparaisons sont donn\u00e9s ci-dessous, on prendra bien garde au fait que le test d'\u00e9galit\u00e9 est <code>==</code> (et pas <code>=</code>).</p> <p>Les op\u00e9rateurs <code>not</code> (unaires), <code>or</code> et <code>and</code> (binaires) sont d\u00e9finies sur les expressions bool\u00e9ennes, tester par exemple (en essayant de pr\u00e9voir le r\u00e9sultat en amont):</p> <ul> <li><code>not 6!=7</code></li> <li><code>6&lt;5 or 12&gt;10</code></li> <li><code>11!=7 and 6!=7</code></li> </ul> <p>A retenir</p> <p>Les op\u00e9rateurs de comparaison sont :</p> <ul> <li><code>&lt;</code> ou <code>&gt;</code> : strictement inf\u00e9rieur et strictement sup\u00e9rieur</li> <li><code>&lt;=</code> ou <code>&gt;=</code> : inf\u00e9rieur ou \u00e9gal  et sup\u00e9rieur ou \u00e9gal</li> <li><code>==</code> ou <code>!=</code> : \u00e9gal et diff\u00e9rent</li> <li>L'op\u00e9rateur unaire <code>not</code> renvoie la n\u00e9gation d'un expression bool\u00e9enne (<code>not a</code> vaut <code>True</code> ssi <code>a</code> vaut <code>False</code>)</li> <li>L'op\u00e9rateur binaire <code>and</code> renvoie la conjonction de deux expression bool\u00e9enne (<code>a and b</code> vaut True ssi <code>a</code> et <code>b</code> valent <code>True</code>)</li> <li>L'op\u00e9rateur binaire <code>or</code> renvoie la disjonction de deux expression bool\u00e9enne (<code>a or b</code> vaut True ssi <code>a</code> ou <code>b</code> valent <code>True</code>)</li> </ul>"},{"location":"itc/bases/#exercice-2-expression-booleene","title":"Exercice 2 : Expression bool\u00e9ene","text":"<p>Ecrire une expression bool\u00e9enne qui correspond au ou exclusif, entre deux valeurs bool\u00e9ennes <code>a</code> et <code>b</code>, c'est-\u00e0-dire qui vaut vraie si <code>a</code> ou <code>b</code> est vraie mais pas les deux \u00e0 la fois.</p>"},{"location":"itc/bases/#variables","title":"Variables","text":"<p>En tapant <code>annee = 2024</code> dans la console, on cr\u00e9e une variable de nom (ou d'identifiant) <code>annee</code> et de valeur <code>2024</code>. Pour attribuer cette valeur, on a utilis\u00e9 le symbole <code>=</code>, on dit que c'est le symbole d'affectation.</p> <p>Note</p> <ul> <li>Le caract\u00e8re espace <code></code> n'est pas autoris\u00e9 dans un nom de variable, l'usage est de le remplacer par l'underscore <code>_</code>. A l'exception de ce dernier, il est recommand\u00e9 de ne pas utiliser de caract\u00e8res sp\u00e9ciaux dans les noms de variables.</li> <li>Les chiffres sont autoris\u00e9s mais un nom de variable ne peut pas commencer par un chiffre</li> <li>Python distingue les majuscules et les minuscules dans les noms de variables, donc <code>test</code> et <code>Test</code> sont deux noms de variables diff\u00e9rents</li> </ul> <p>Cette variable peut \u00eatre utilis\u00e9 dans d'autre calculs, par exemple <code>age = annee - 2006</code> calculera l'age d'une personne n\u00e9e en 2006. Et l'ann\u00e9e prochaine est \u00e9videmment donn\u00e9e par <code>annee_prochaine = annee + 1</code>, on peut se passer de <code>annee_prochaine</code> pour \u00e9crire <code>annee = annee + 1</code>, cette derni\u00e8re expression devant \u00eatre comprise comme remplacer la valeur de <code>annee</code> par sa valeur plus un.</p>"},{"location":"itc/bases/#exercice-3-manipulations-de-variables","title":"Exercice 3 : Manipulations de variables","text":"Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papier <ol> <li> <p>Cr\u00e9er une variable <code>pi</code> de valeur \u00a0<code>3.14</code>, calculer l'aire d'un disque de rayon \\(7,5\\) en utilisant cette valeur de <code>pi</code>.</p> </li> <li> <p>On consid\u00e8re le programme de calcul suivant :</p> <ol> <li>choisir un nombre entier positif</li> <li>ajouter 3 \u00e0 ce nombre</li> <li>multiplier par le nombre choisi au d\u00e9part</li> <li>soustraire 9</li> </ol> <p>On note <code>a</code> le nombre de d\u00e9part, et <code>b</code>, <code>c</code> et <code>d</code> les nombres obtenus aux \u00e9tapes suivantes, \u00e9crire les affectations permettant de calculer <code>b</code>, <code>c</code> et <code>d</code>. </p> <p>Ecrire une unique instruction d'affectation permettant de remplacer le nombre <code>a</code> choisi au d\u00e9part par le r\u00e9sultat du programme de calcul en utilisant uniquement <code>a</code> comme variable.</p> </li> <li> <p>On suppose d\u00e9j\u00e0 cr\u00e9es deux variables <code>x</code> et <code>y</code>, \u00e9crire une suite d'affectations permettant d'\u00e9changer les valeurs de ces deux variables.</p> </li> </ol>"},{"location":"itc/bases/#chaines-de-caracteres","title":"Chaines de caract\u00e8res","text":"<p>Python manipule aussi des variables non num\u00e9riques : les chaines de caract\u00e8res (type <code>str</code>) toujours donn\u00e9es entre guillemets simple (<code>'</code>) ou double (<code>\"</code>). Par exemple, <code>mot = \"Hello\"</code>, ou <code>phrase = \"L'informatique, c'est fantastique\"</code>. Attention, remplacer les guillemets double <code>\"</code>, par des simples dans l'instruction pr\u00e9c\u00e9dente, serait probl\u00e9matique ... voyez-vous pourquoi ?</p> <p>Les op\u00e9rateurs suivants sont d\u00e9finis sur les chaines de caract\u00e8res :</p> <ul> <li><code>+</code> qui ajoute bout \u00e0 bout deux chaines de caract\u00e8res, on parle d'op\u00e9rateur de concat\u00e9nation. Par exemple <code>\"Hello\"</code>+<code>\"world\"</code> donne <code>Helloworld</code>.</li> <li><code>*</code> dont le second op\u00e9rande est un entier <code>n</code> et qui concat\u00e8ne <code>n</code> fois la chaine donn\u00e9e en argument avec elle m\u00eame. Par exemple <code>\"bla\"*3</code> done <code>\"blablabla\"</code>.</li> <li>Les crochets <code>[]</code> permettent d'acc\u00e9der aux caract\u00e8res d'une chaine en donnant leur position num\u00e9rot\u00e9e \u00e0 partir de 0, par exemple, si <code>langage = \"Python\"</code>, alors <code>langage[0]</code> donne <code>P</code>.</li> <li>La fonction <code>len</code> renvoie la longueur d'une chaine de caract\u00e8res, par exemple <code>len(\"Python\")</code> donne 6.</li> </ul>"},{"location":"itc/bases/#premiers-programmes","title":"Premiers programmes","text":"<p>Vous pouvez tester les programmes ci-dessous en les recopiant dans la partie sup\u00e9rieure du mini IDE :</p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur"},{"location":"itc/bases/#instruction-print","title":"Instruction <code>print</code>","text":"<p>Le mode programme consiste \u00e0 \u00e9crire une s\u00e9quence d'instructions puis \u00e0 la faire executer par Python. Dans ce mode, les valeurs calcul\u00e9es ne sont pas affich\u00e9es directement, une instruction sp\u00e9cifique permet de demander un affichage, c'est l'instruction <code>print</code>. Par exemple, dans le programme suivant, seule la valeur de <code>d</code> sera affich\u00e9e (gr\u00e2ce \u00e0 l'instruction <code>print</code> de la ligne 5.)</p> <pre><code>a = 1\nb = -12\nc = 35\nd = b**2 - 4* a* c\nprint(d)\n</code></pre> <p>A retenir</p> <ul> <li>En mode programme, Python ex\u00e9cute une s\u00e9quence d'instructions</li> <li>Seuls les affichages explicitement demand\u00e9s \u00e0 l'aide d'instructions <code>print</code> sont r\u00e9alis\u00e9s</li> <li>Un m\u00eame instruction <code>print</code> peut produire plusieurs affichages, on s\u00e9pare alors les \u00e9l\u00e9ments \u00e0 afficher par des virgules. Par exemple si <code>a</code> vaut 10, <code>print(\"La variable a vaut \",a)</code> affichera <code>La variable a vaut 10</code>.</li> </ul>"},{"location":"itc/bases/#instructions-conditionnelles","title":"Instructions conditionnelles","text":"<p>En Python, on peut \u00e9crire : <pre><code>if &lt;condition&gt;:\n    &lt;instructions&gt;\n</code></pre> o\u00f9 <code>&lt;condition&gt;</code> est une expression bool\u00e9enne de fa\u00e7on \u00e0 ex\u00e9cuter le bloc <code>&lt;instruction&gt;</code> seulement lorsque <code>&lt;condition&gt;</code> s'\u00e9value \u00e0 <code>True</code>. On fera bien attention \u00e0 la syntaxe notamment au caract\u00e8re <code>:</code> qui suit la condition et \u00e0 l'indentation (d\u00e9calage vers la droite) du bloc d'instructions. Dans l'exemple ci-dessous, si la variable <code>x</code> est diff\u00e9rente de z\u00e9ro, alors on d\u00e9finit une variable <code>y</code> valant <code>1/x</code>. <pre><code>if x!=0:\n    y = 1/x\n</code></pre> Une instruction conditionnelle peut comporter une clause <code>else</code> qui indique les instructions \u00e0 effectuer lorsque la condition n'est pas v\u00e9rifi\u00e9e : <pre><code>if &lt;condition&gt;:\n    &lt;instructions1&gt;\nelse:\n    &lt;instructions2&gt;\n</code></pre> c'est-\u00e0-dire que si <code>&lt;condition&gt;</code> s'\u00e9value \u00e0 <code>True</code> alors c'est <code>&lt;instructions1&gt;</code> qui est ex\u00e9cut\u00e9 sinon c'est <code>&lt;instructions2&gt;</code>. Par exemple : <pre><code>if jour==\"Samedi\" or jour==\"Dimanche\":\n    print(\"Bon week-end !\")\nelse:\n    print(\"Au boulot !\")\n</code></pre> Affichera <code>Bon week-end !</code> si la variable <code>jour</code> vaut <code>\"Samedi\"</code> ou <code>\"Dimanche\"</code> et <code>\"Au boulot !\"</code> sinon.</p> <p>Danger</p> <p>La condition de la ligne 1 ci-dessous, pourrait s'\u00e9crire en fran\u00e7ais, \"Si le jour est samedi ou dimanche\". Ce qu'on pourrait vouloir traduire en Python par <code>if jour==\"Samedi\" or \"Dimanche\"</code>. Cette construction bien qu'accept\u00e9e par Python n'est PAS le test d\u00e9sir\u00e9 (et s'\u00e9value en fait toujours \u00e0 <code>True</code>). On fera donc attention \u00e0 toujours avoir une comparaison dans les deux op\u00e9randes d'un <code>and</code> (ou d'un <code>or</code>).</p>"},{"location":"itc/bases/#exercice-4-instructions-conditionnelles","title":"Exercice 4 : Instructions conditionnelles","text":"###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur <ol> <li>On suppose d\u00e9j\u00e0 d\u00e9finie une variable <code>reponse</code> et une variable <code>points</code>, \u00e9crire une instruction conditionnelle qui affiche <code>Bonne r\u00e9ponse</code> lorsque <code>reponse</code> vaut 2 et incr\u00e9mente la variable <code>points</code>. Dans le cas contraire <code>points</code> est d\u00e9cr\u00e9ment\u00e9 et on affiche <code>Erreur</code></li> <li>On suppose d\u00e9j\u00e0 d\u00e9finies deux variables <code>a</code> et <code>b</code>, \u00e9crire une instruction conditionnelle qui permet de d\u00e9finir la variable <code>c</code> \u00e9gale au maximum entre <code>a</code> et <code>b</code></li> </ol>"},{"location":"itc/bases/#boucles","title":"Boucles","text":"<p>Pour afficher un carr\u00e9 de 5 sur 5 constitu\u00e9 de caract\u00e8res <code>#</code>, on pourrait \u00e9crire : <pre><code>print(\"#\"*5)\nprint(\"#\"*5)\nprint(\"#\"*5)\nprint(\"#\"*5)\nprint(\"#\"*5)\n</code></pre> c'est-\u00e0-dire qu'on doit r\u00e9p\u00e9ter un nombre donn\u00e9 de fois une m\u00eame instruction, ce qui peut-\u00eatre r\u00e9alis\u00e9 de fa\u00e7on beaucoup plus concise et qui se g\u00e9n\u00e9ralise ais\u00e9ment \u00e0 un nombre quelconque de ligne \u00e0 l'aide d'une boucle : <pre><code>for i in range(5):\n    print(\"#\"*5)\n</code></pre></p> <p>A retenir</p> <ul> <li>L'instruction <code>for &lt;variable&gt; in range(&lt;entier&gt;)</code>  permet de cr\u00e9er une variable parcourant les entiers de 0 (inclus) \u00e0 <code>&lt;entier&gt;</code> (exclu)</li> <li>Les instructions indent\u00e9es suivantes seront ex\u00e9cut\u00e9es pour chaque valeur prise par la variable</li> <li>La boucle <code>for</code> permet donc notamment de r\u00e9p\u00e9ter un nombre pr\u00e9d\u00e9fini de fois des instructions, on dit que c'est une boucle born\u00e9e.</li> <li>L'instruction <code>range</code>, peut \u00eatre utilis\u00e9e :<ul> <li>avec un seul param\u00e8tre <code>n</code>, la variable prend alors les valeurs enti\u00e8res de l'intervalle \\([0;n-1]\\)</li> <li>avec deux param\u00e8tres <code>m</code> et <code>n</code>, la variable prend alors les valeurs enti\u00e8res de l'intervalle \\([m;n-1]\\)</li> <li>avec trois param\u00e8tres <code>m</code>, <code>n</code> et <code>s</code> la variable prend alors les valeurs de \\([m;n-1] \\cap \\{ m + ks; k \\in \\mathbb{N}\\}\\).</li> </ul> </li> </ul> <p>Lorsqu'il n'est pas possible de conna\u00eetre \u00e0 l'avance le nombre de r\u00e9p\u00e9titions n\u00e9cessaires, on utilise une boucle <code>while</code> qui s'ex\u00e9cute tant qu'une condition est vraie. Par exemple, si on suppose qu'on a plac\u00e9 un capital \u00e0 un taux d'int\u00e9r\u00eat \\(t=3 \\%\\), et qu'on veut savoir au bout de combien d'ann\u00e9es ce capital aura doubl\u00e9, on peut utiliser le programme suivant : <pre><code>annee = 1\ntaux = 1.03\ntaux_global = taux\nwhile taux_global&lt;2:\n    annee = annee + 1\n    taux_global = taux*taux_global\nprint(\"Apr\u00e8s, \",annee,\" ann\u00e9es, le capital aura doubl\u00e9\")\n</code></pre></p>"},{"location":"itc/bases/#exercice-5-quelques-boucles-a-ecrire","title":"Exercice 5 : Quelques boucles \u00e0 \u00e9crire","text":"###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur <ol> <li>Ecrire un programme utilisant une boucle et affichant : <pre><code>**********\n*        *\n*        *\n*        *\n*        *\n*        *\n*        *\n*        *\n*        *\n**********\n</code></pre></li> <li>Ecrire un programme utilisant une boucle et qui affiche les 10 premiers multiples de 42.</li> <li>Ecrire un programme utilisant une boucle et qui affiche un compte \u00e0 rebours de 10 \u00e0 1.</li> <li>La coupe du monde de football se d\u00e9roule tout les quatre ans et sa premi\u00e8re \u00e9dition date de 1930. D'autre part, \u00e0 cause de la seconde guerre mondiale, la comp\u00e9tition n'a pas eu lieu en 1942 et en 1946. Ecrire un programme Python qui liste toutes les ann\u00e9es o\u00f9 la coupe du monde s'est d\u00e9roul\u00e9e de 1930 \u00e0 nos jours. Compl\u00e9ter ce programme de fa\u00e7on \u00e0 afficher le num\u00e9ro de l'\u00e9dition pour chaque ann\u00e9e.</li> <li>Ecrire un programme Python qui utilise une boucle et qui calcule la somme des entiers impairs entre 1 et 999 (compris).</li> </ol>"},{"location":"itc/bases/#fonctions","title":"Fonctions","text":"<p>La formule permettant de convertir les degr\u00e9s Celsius (\\(c\\)) en degr\u00e9 Fahrenheit est (\\(f\\)) : \\(f = \\dfrac{9}{5} c +32\\). Cette conversion peut-\u00eatre repr\u00e9sent\u00e9e par une fonction de Python qui prend en entr\u00e9e un param\u00e8tre \\(c\\) (les degr\u00e9s Celsius) et renvoie un r\u00e9sultat \\(f\\) (les degr\u00e9s Fahrenheit) :</p> Un premier exemple de fonction<pre><code>def celsius_en_fahrenheit(c):\n    f = (9/5)*c + 32\n    return f\n</code></pre> <p>Maintenant en tapant, par exemple <code>celsius_en_fahrenheit(10)</code>, on effectue un appel \u00e0 cette fonction, qui renvoie un r\u00e9sultat, ce r\u00e9sultat peut \u00eatre m\u00e9moris\u00e9 dans une variable, utilis\u00e9 comme param\u00e8tre d'une autre fonction, affich\u00e9, ... Par exemple, si on souhaite simplement afficher le nombre de degr\u00e9s Fahrenheit correspondant \u00e0 100 degr\u00e9 Celsius, on pourrait ajouter la ligne suivante au programme pr\u00e9c\u00e9dent :</p> <p><code>print(\"100 degr\u00e9s celsius =\",celsius_en_farenheit(100),\" degr\u00e9s Fahrenheit\")</code></p> <p>A retenir</p> <ul> <li>La definition d'une fonction en Python commence par le mot cl\u00e9 <code>def</code> suivi du nom de la fonction puis de ses arguments entre parenth\u00e8ses et s\u00e9par\u00e9s par des virgules</li> <li>Une fonction peut prendre 0, un, ou plusieurs arguments</li> <li>Les instructions qui forment le corps de la fonction sont indent\u00e9s, la fin de cette indentation marque la fin du bloc d'instructions de la fonction</li> <li>Une fonction peut renvoyer un r\u00e9sultat \u00e0 l'aide d'une instruction <code>return</code></li> <li>Exemple : la fonction suivante, prend deux param\u00e8tres (<code>largeur</code> et <code>longueur</code>) et renvoie le p\u00e9rim\u00e8tre d'un rectangle de dimension <code>largeur x longueur</code> :      <pre><code>def perimetre(longueur,largeur):\n    p = 2 * (longueur+largeur)\n    return p\n</code></pre></li> <li>Une fonction peut ne rien renvoyer et par exemple produire simplement un affichage :     <pre><code>def repete(caractere,n):\n    print(caractere*n)\n</code></pre></li> <li>Les deux exemples pr\u00e9c\u00e9dents, montrent qu'il ne faut pas confondre <code>print</code> et <code>return</code>. Dans un cas on renvoie un r\u00e9sultat (qui est r\u00e9cup\u00e9r\u00e9 et peut \u00eatre r\u00e9utilis\u00e9 \u00e0 l'endroit de l'appel de la fonction), dans le second on effectue simplement un affichage rien n'est renvoy\u00e9 vers l'appel \u00e0 la fonction. Ainsi on pourrait logiquement \u00e9crire <code>p = perimetre(2,7)</code> (et <code>p</code> aurait la valeur <code>18</code>, mais ne sera pas affich\u00e9) alors que <code>x = repete('*',10)</code> n'affectera rien \u00e0 <code>x</code> (mais produira un affichage).</li> </ul>"},{"location":"itc/bases/#exercice-6-quelques-fonctions-elementaires","title":"Exercice 6 : Quelques fonctions \u00e9l\u00e9mentaires","text":"###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur <ol> <li>Ecrire une fonction qui prend en argument une valeur num\u00e9rique <code>x</code> et renvoie son carr\u00e9.</li> <li>Ecrire une fonction qui prend trois arguments <code>a,b</code> et <code>c</code> et calcule \\(b^2 - 4ac\\).</li> <li>Ecrire une fonction qui prend en argument un entier et renvoie <code>True</code> si cet entier est divisible par 7 et qu'il se termine par 9.</li> <li> <p>Ecrire une fonction qui renvoie la valeur absolue du nombre <code>x</code> donn\u00e9 en argument.</p> <p>Note</p> <p>Cette fonction existe d\u00e9j\u00e0 et s'appelle <code>abs</code>.</p> </li> <li> <p>Ecrire une fonction qui renvoie <code>True</code> si l'entier donn\u00e9 en argument est une ann\u00e9e bissextile. Une ann\u00e9e est bissextile si elle est divisible par 4 mais pas par 100 ou s'il est divisible par 400.</p> </li> <li>Ecrire une fonction qui prend en argument une chaine de caract\u00e8res et renvoie son dernier caract\u00e8re.</li> <li> <p>Ecrire une fonction <code>est_triangle</code> qui prend en argument trois nombres <code>a</code>, <code>b</code> et <code>c</code> et qui renvoie <code>True</code> si ces trois entiers peuvent \u00eatre les longueurs des trois c\u00f4t\u00e9s d'un triangle.</p> <p>Aide</p> <ul> <li>Cela revient \u00e0 v\u00e9rifier que les trois entiers v\u00e9rifient l'in\u00e9galit\u00e9 triangulaire ou encore que le plus grand des trois est inf\u00e9rieur \u00e0 la somme des deux autres</li> <li>La fonction permettant de d\u00e9terminer le maximum d'une liste de nombres existe d\u00e9j\u00e0 et s'appelle <code>max</code>.</li> </ul> </li> </ol>"},{"location":"itc/bases/#instruction-input","title":"Instruction <code>input</code>","text":"<p>Lorsqu'un programme Python rencontre une instruction comme <code>variable = input()</code>, il attend la saisie d'un texte au clavier (suivie de l'appui de la touche entr\u00e9e Enter) et la chaine de caract\u00e8res saisie est alors affect\u00e9e \u00e0 la variable <code>variable</code>. On peut pr\u00e9ciser le message \u00e0 afficher avant la saisie en argument de <code>input</code>. Par exemple : <pre><code>prenom = input(\"Entrer votre pr\u00e9nom\")\nprint(\"Bonjour,\",prenom)\n</code></pre></p> <p>Danger</p> <p>Ce qui est saisi au clavier est toujours interpr\u00e9t\u00e9 par Python comme du texte (type <code>str</code>), pour l'utiliser comme nombre il faudra effectuer une conversion vers le type souhaite (<code>int</code> ou <code>float</code>).</p>"},{"location":"itc/bases/#cours","title":"Cours","text":"<p>Fiche de cours chapitre 1 </p>"},{"location":"itc/bases/#exercices-de-synthese","title":"Exercices de synth\u00e8se","text":""},{"location":"itc/bases/#exercice-7-factorielle","title":"Exercice 7 : Factorielle","text":"<p>On appelle factorielle d'un entier \\(n\\) et on note \\(n!\\) le produit de cet entier par tous ceux qui le pr\u00e9c\u00e8dent \u00e0 l'exception de z\u00e9ro. Et on convient d'autre part que \\(0!=1\\). Par exemple \\(5! = 5 \\times 4 \\times \\times 3 \\times 2 \\times 1 = 120\\). Ecrire une fonction <code>factorielle</code> qui prend en argument un entier <code>n</code> et renvoie sa factorielle.</p> <p>V\u00e9rifier en entrant ici la valeur de \\(42!\\) :   </p>"},{"location":"itc/bases/#exercice-8-puissance","title":"Exercice 8 : Puissance","text":"<p>Le but de l'exercice est d'\u00e9crire la fonction puissance (sans utiliser l'op\u00e9rateur <code>**</code> de Python).</p> <ol> <li>En supposant <code>n</code> entier et positif, \u00e9crire sans utiliser l'op\u00e9rateur <code>**</code> de Python, une fonction <code>puissance_positif</code> qui prend en entr\u00e9e un nombre <code>x</code> et <code>n</code>  et renvoie \\(x^n\\).</li> <li> <p>Ecrire une nouvelle fonction <code>puissance</code> qui prend en argument un nombre <code>x</code> et un entier <code>n</code> et renvoie \\(x^n\\).</p> <p>Aide</p> <p>Attention \u00e0 bien traiter tous les cas possibles.</p> </li> </ol>"},{"location":"itc/bases/#exercice-9-un-peu-de-dessin","title":"Exercice 9 : Un peu de dessin","text":"<ol> <li> <p>Ecrire une fonction <code>carre_plein</code> prenant comme param\u00e8tre un entier <code>cote</code> et un caract\u00e8re <code>car</code> et permettant d'afficher un carr\u00e9 de c\u00f4t\u00e9 <code>cote</code> rempli de caract\u00e8res <code>car</code>. Par exemple, <code>carre(5,'C')</code> produit l'affichage suivant : <pre><code>CCCCC\nCCCCC\nCCCCC\nCCCCC\nCCCCC\n</code></pre></p> </li> <li> <p>Ecrire une fonction <code>rectangle_creux</code>  prenant trois param\u00e8tres : deux entiers <code>largeur</code> et <code>longueur</code> et un caract\u00e8re <code>car</code> permettant d'afficher un rectangle creux de dimensions <code>largeur</code> sur <code>longueur</code> dont la bordure est constitu\u00e9 de caract\u00e8res <code>car</code>. Par exemple <code>rectangle_creux(3,7,'~')</code> devrait produire l'affichage suivant : <pre><code>~~~~~~~\n~     ~\n~~~~~~~\n</code></pre></p> </li> <li> <p>De la m\u00eame fa\u00e7on \u00e9crire une fonction <code>triangle</code> prenant comme param\u00e8tre un entier <code>hauteur</code> et un caract\u00e8re <code>car</code> telle que <code>triangle(6,'*')</code> produise l'affichage suivant : <pre><code>     *\n    ***\n   *****\n  *******\n *********\n***********\n</code></pre></p> </li> </ol>"},{"location":"itc/bases/#exercice-10-nombres-premiers","title":"Exercice 10 : Nombres premiers","text":"<ol> <li> <p>Ecrire une fonction <code>racine</code> qui prend en entr\u00e9e un entier <code>n</code> positif et renvoie le plus grand entier <code>k</code> tel que <code>k * k &lt;= n</code>.     Par exemple, <code>racine(9)</code> renvoie 3 et <code>racine(18)</code> renvoie 4.</p> </li> <li> <p>Ecrire une fonction qui prend en argument un nombre et renvoie <code>True</code> lorsque ce nombre est premier et <code>False</code> sinon.</p> <p>Aide</p> <p>On peut se contenter de tester si les entiers \\(k\\) compris entre 2 et la partie enti\u00e8re de \\(\\sqrt{n}\\) inclus divisent \\(n\\) et utiliser la question 1.</p> </li> <li> <p>Ecrire une fonction <code>somme_premiers</code> qui prend en entr\u00e9e un entier <code>n</code> et calcule la somme des nombres premiers inf\u00e9rieurs ou \u00e9gaux \u00e0 <code>n</code>. Par exemple <code>somme_premiers(10)</code> vaut <code>2 + 3 + 5 + 7 = 17</code></p> </li> <li> <p>Tester votre fonction en calculant <code>somme_premiers(10000)</code> : </p> </li> </ol>"},{"location":"itc/bases/#exercice-11-palindrome","title":"Exercice 11 : Palindrome","text":"<p>Ecrire une fonction qui v\u00e9rifie si la chaine pass\u00e9e en argument est un palindrome (c'est-\u00e0-dire qu'elle s'\u00e9crit \u00e0 l'identique de droite \u00e0 gauche ou de gauche \u00e0 droite, comme le mot radar).</p>"},{"location":"itc/bases/#exercice-12-parcours-de-chaine-de-caracteres","title":"Exercice 12 : Parcours de chaine de caract\u00e8res","text":"<ol> <li> <p>Ecrire une fonction <code>contient</code> qui prend en argument une chaine de caract\u00e8res <code>chaine</code> et un caractere <code>c</code> et qui renvoie <code>True</code> si <code>c</code> est dans <code>chaine</code> et \u00a0<code>False</code> sinon.</p> </li> <li> <p>Ecrire une fonction <code>occurrence</code> qui prend en argument une chaine de caract\u00e8res <code>chaine</code> et un caractere <code>c</code> et qui renvoie le nombre d'apparitions de <code>c</code> dans <code>chaine</code>.</p> </li> <li> <p>On consid\u00e8re la chaine <code>mystere</code> ci-dessous compos\u00e9e de caract\u00e8res tr\u00e8s semblables difficiles \u00e0 distinguer \u00e0 l'oeil nu : <pre><code>mystere = \"O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8\"\n</code></pre> Combien de <code>O</code> contient cette chaine ? V\u00e9rifier votre r\u00e9ponse :   </p> </li> </ol>"},{"location":"itc/bases/#exercice-13-conjecture-de-syracuse","title":"Exercice 13 : Conjecture de syracuse","text":"<p>La conjecture de syracuse est l'hypoth\u00e8se selon laquelle la suite  \\((u_n)_{n \\in \\mathbb{N}}\\) d\u00e9finie par son premier terme \\(u_0\\) et la relation de r\u00e9currence : \\(u_{n+1} = \\left\\{ \\begin{array}{ll} \\dfrac{u_n}{2} &amp; \\mathrm{\\ si\\ } u_n \\mathrm{\\ est \\ paire} \\\\ 3u_n+1 &amp; \\mathrm{\\ sinon} \\\\ \\end{array} \\right.\\) atteint 1. Dans la suite de cette exercice on supposera cette conjecture v\u00e9rifi\u00e9e (bien qu'elle n'ait pas \u00e9t\u00e9 math\u00e9matiquement prouv\u00e9e, la conjecture a \u00e9t\u00e9 v\u00e9rifi\u00e9e num\u00e9riquement pour tous les entiers jusqu'\u00e0 \\(2^{58}\\)).</p> <ol> <li>Ecrire la fonction <code>terme_suivant</code> qui prend en argument un entier \\(n\\) et renvoie \\(\\dfrac{n}{2}\\) si \\(n\\) est paire et \\(3n+1\\) sinon.</li> <li> <p>Ecrire une fonction <code>duree_vol</code> qui prend en argument un entier \\(u_0\\) et renvoie le plus petit entier \\(n\\) appel\u00e9 dur\u00e9e de vol tel que \\(u_n=1\\). Par exemple <code>duree_vol(7)</code> doit renvoyer 16, en effet les termes successif de la suite sont <code>7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4 ,2, 1</code>. Tester votre fonction en calculant la dur\u00e9e de vol de 123456789 :  V\u00e9rifier votre r\u00e9ponse :   </p> </li> <li> <p>Quelle est la plus grande dur\u00e9e de vol lorsque \\(1 \\leq u_0 \\leq 10000\\) ? V\u00e9rifier votre r\u00e9ponse :   </p> </li> <li> <p>V\u00e9rifier que cette dur\u00e9e de vol maximale est atteinte pour une seule valeur de \\(u_0\\), quelle est cette valeur ? V\u00e9rifier votre r\u00e9ponse :   </p> </li> <li> <p>L'altitude maximale est la valeur maximale atteinte par la suite de Syracuse. Ecrire une fonction prenant \\(u_0\\) et renvoyant l'altitude maximale atteinte. Par exemple l'altitude maximal de \\(u_0 = 7\\) est \\(52\\) (voir les termes de cette suite \u00e0 la question 2.).</p> </li> <li> <p>Quelle est l'altitude maximale de \\(9331\\) ? V\u00e9rifier votre r\u00e9ponse :   </p> </li> </ol>"},{"location":"itc/complexite/","title":"C12 Complexit\u00e9","text":""},{"location":"itc/complexite/#cours","title":"Cours","text":"<p>Support de cours chapitre 12 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"itc/complexite/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"itc/complexite/#exercice-1-constante-de-kaprekar","title":"Exercice 1 : Constante de Kaprekar","text":"<p>Etant donn\u00e9 un nombre \\(n\\) \u00e0 4 chiffres, on calcule le nombre \\(k(n)\\) en faisant la diff\u00e9rence entre le nombre form\u00e9 par les chiffres de \\(n\\) dans l'ordre d\u00e9croissant et celui form\u00e9 par les chiffres de \\(n\\) dans l'ordre croissant. Par exemple, \\(k(2025) = 5220 - 0225 = 4995\\). Attention : si le nombre ne poss\u00e8de pas 4 chiffres alors on compl\u00e8te la liste de ses chiffres par des 0 pour en avoir 4. Par exemple \\(k(113) = 3110 - 113 = 2997\\) (on compl\u00e9t\u00e9 la liste des chiffres avec un 0)</p> <ol> <li> <p>Ecrire la fonction <code>kaprekar</code> qui prend en entr\u00e9e un entier <code>n</code> et renvoie <code>k(n)</code></p> </li> <li> <p>L'algorithme de Kaprekar consiste \u00e0 it\u00e9rer le processus pr\u00e9c\u00e9dent afin d'obtenir pour un entier \\(n\\) de d\u00e9part la suite \\(u_0 = n\\) et \\(u_n = k(u_{n-1})\\). Ecrire la fonction <code>kaprekar</code> qui prend en entr\u00e9e un nombre <code>n</code> et construit la suite \\(u\\) jusqu'\u00e0 obtenir un point fixe.</p> </li> <li> <p>V\u00e9rifier si \\(n\\) est un nombre \u00e0 4 chiffres, n'ayant pas tous ces chiffres \u00e9gaux alors le point fixe est toujours 6174</p> </li> <li> <p>Quel est le plus grand nombre n\u00e9cessitant le plus d'it\u00e9ration avant d'atteindre la valeur \\(6174\\) ?     V\u00e9rifier votre r\u00e9ponse :   </p> </li> </ol>"},{"location":"itc/complexite/#exercice-2-verification-de-numeros-de-cartes-de-credit","title":"Exercice 2 : V\u00e9rification de num\u00e9ros de cartes de cr\u00e9dit","text":"<p>Le but de l'exercice est d'impl\u00e9menter l'algorithme de Luhn qui est utilis\u00e9 pour v\u00e9rifier qu'un num\u00e9ro de carte de cr\u00e9dit est valide (cela permet d'indiquer \u00e0 un utilisateur une \u00e9ventuelle erreur de saisie). </p> <ol> <li> <p>Ecrire une fonction <code>mult2</code> qui prend en argument un entier \\(c\\) compris entre 0 (inclus) et 9 (inclus) et renvoie \\(2c\\) si \\(2c &lt;10\\) et la somme des deux chiffres de \\(2c\\) sinon. Par exemple <code>mult2(3)</code> renvoie 6 et <code>mult2(7)</code> renvoie 5.</p> </li> <li> <p>Ecrire une fonction <code>pair_impair</code> qui prend en argument un entier <code>n</code> et renvoie la liste des chiffres de rang pair de <code>n</code> et celle des chiffres de rang impair (on num\u00e9rote les chiffres de la droite vers la gauche en partant du dernier, ainsi le dernier chiffre est de rang impair, l'avant dernier pair et ainsi de suite). Par exemple <code>pair_impair(437716)</code> renvoie <code>[4, 7, 1], [3, 7, 6]</code></p> </li> <li> <p>Ecrire une fonction <code>somme</code> qui prend en argument une liste et renvoie la somme de ses \u00e9l\u00e9ments.</p> </li> <li> <p>L'algorithme de Luhn consiste \u00e0 utiliser la fonction <code>mult2</code> sur les chiffres de rang pair puis \u00e0 en faire la somme et \u00e0 ajouter \u00e0 la somme des chiffres de la liste des chiffres de rang impair. Si le r\u00e9sultat obtenu est divisible par 10 alors le num\u00e9ro est valide. Sur l'exemple pr\u00e9c\u00e9dent en appliquant \u00a0<code>mult2</code> \u00e0 <code>[4, 7, 1]</code> on obtient <code>[8, 5, 2]</code> de somme <code>15</code>, on y ajoute la somme de <code>[3, 7, 6]</code> et on obtient <code>31</code> et donc <code>437716</code> n'est pas un num\u00e9ro valide.</p> </li> <li> <p>On donne ci-dessous une liste de 100 num\u00e9ros de carte de cr\u00e9dit, quel est le seul num\u00e9ro non valide ? <pre><code>numeros = [44724396297190980, 43812941463968050, 40336859619021165, 97597964422415457, 63536337821290779, 23593379330529192, 97589837393456264, 49578407512545811, 61260793581116966, 18229030539250716, 37661419230027694, 83581156863942036, 74789447939228909, 81951217181555722, 61458591443397390, 32616836055289686, 46290817839070207, 26437148529668464, 86755609112796028, 14389645842408464, 72720990480661263, 49874256626186371, 16903438994602296, 64128901250176874, 53533020809649422, 98705680238646633, 85084614929430435, 41112520608651663, 60019959766331664, 21281815098526996, 95450502161757745, 85678747145461081, 82458220821170890, 67599313123885579, 84856804675179117, 52069983417800204, 47585990612571006, 87506528950643599, 30803020167237142, 13940485924959645, 48298029626456742, 47138507898189063, 32386029801404399, 12354409205786577, 34853968470741591, 46003466701348719, 92693026950309371, 96173793280834549, 96281186183874465, 12510865919923254, 65193723559088809, 20330035658177402, 39127055853219640, 41057010958900453, 10443299015945605, 46593450887667429, 84983986612972153, 28781094621777423, 23001254903010795, 67742266247507485, 11626476304983383, 88445443233414572, 51696521110319347, 25122716434857190, 97952551849249814, 46392651429528390, 39373396873361454, 59233755763273459, 46368053811925930, 35311694316315746, 78237568108638542, 22231222579719332, 38119418911655365, 78471175610145217, 34899096301750635, 40720878286084573, 41155227796966741, 80881300081257552, 32557104073371197, 87179522658944421, 85770043209533859, 30704767511944407, 70563312858597934, 90699235054330625, 85812123348689794, 89448070096465873, 42563782299333777, 87017731661435741, 60070092775907955, 95358303409643638, 75812507878201098, 28998138610436481, 91287898770743086, 66348314720609533, 63370008434111897, 74458945060046982, 46194937943385775, 75423184274922445, 38537036031496736, 76948153146211653]\n</code></pre> Teste votre r\u00e9ponse :   </p> </li> </ol>"},{"location":"itc/complexite/#exercice-3-representation-dun-ensemble-dentiers","title":"Exercice 3 : Repr\u00e9sentation d'un ensemble d'entiers","text":"<p>On propose de repr\u00e9senter un ensemble d'entiers par la liste tri\u00e9e de ses \u00e9l\u00e9ments. Par exemple, l'ensemble \\(\\{5, 7, 2 \\}\\) sera repr\u00e9sent\u00e9e par la liste <code>[2, 5, 7]</code>.</p> <ol> <li> <p>Ecrire une fonction <code>appartient</code> qui prend en argument  un entier <code>x</code> et une liste repr\u00e9sentant un ensemble <code>ens</code> et renvoie <code>True</code> si <code>x</code> est dans <code>ens</code> et <code>False</code> sinon.</p> </li> <li> <p>En utilisant la fonction pr\u00e9c\u00e9dente, \u00e9crire une fonction <code>intersection</code> qui prend en argument deux listes <code>ens1</code> et <code>ens2</code> repr\u00e9sentant chacune un ensemble et renvoie la liste repr\u00e9sentant l'intersection de <code>ens1</code> et <code>ens2</code>.</p> </li> <li> <p>Ecrire une version r\u00e9cursive de la fonction <code>intersection</code> qui utilise le fait que les deux listes soient tri\u00e9es (relancer la r\u00e9cursion en supprimant au moins un \u00e9l\u00e9ment de chacune des deux listes)</p> </li> <li> <p>Comparer les complexit\u00e9s des deux m\u00e9thodes</p> </li> <li> <p>Ecrire la fonction <code>insere</code> qui prend en argument  un entier <code>x</code> et une liste repr\u00e9sentant un ensemble <code>ens</code> et renvoie la liste repr\u00e9sentant l'ensemble <code>ens</code> dans lequel on a ajout\u00e9 <code>x</code>. Par exemple <code>insere(4, [2, 5, 7])</code> renvoie <code>2, 4, 5, 7</code> et <code>insere(5, [2, 5, 7])</code> renvoie <code>[2, 5, 7]</code>.</p> </li> </ol>"},{"location":"itc/complexite/#exercice-4-jeu-de-la-vie","title":"Exercice 4 : Jeu de la vie","text":"<p>On s'int\u00e9resse dans cet exercice, \u00e0 une version unidimensionnelle du jeu de la vie, c'est \u00e0 dire qu'on fait \u00e9voluer des cellules ayant deux \u00e9tats possibles (vivantes ou mortes) dans un tableau unidimensionnel (et pas sur une grille). La r\u00e8gle d'\u00e9volution est la suivante : une cellule devient ou reste vivante uniquement lorsqu'elle avait exactement une voisine vivante au tour pr\u00e9c\u00e9dent. </p> <p>Par exemple, dans la configuration suivante, </p> \u2460\u2461 \u2462 \u2463 <p>l'\u00e9volution suivante sera :</p> \u2464\u2465\u2466 <p>En effet :</p> <ul> <li>la cellule num\u00e9rot\u00e9e <code>5</code> est devenue vivante (elle \u00e9tait morte au tour pr\u00e9c\u00e9dent) car elle avait une seule voisine (la cellule \u00a0<code>1</code>)</li> <li>la cellule num\u00e9rot\u00e9e <code>6</code> est l'\u00e9volution de la celulle <code>1</code> qui est rest\u00e9e vivante (elle n'avait qu'une voisine vivante, la cellule <code>2</code>)</li> <li>la cellule num\u00e9rot\u00e9e <code>7</code> est l'\u00e9volution de la celulle <code>2</code> qui est rest\u00e9e vivante</li> <li>Les cellules <code>3</code> et <code>4</code> meurent car elles n'avaient aucune voisine.</li> </ul> <p>Note</p> <p>Le \"jeu\" se d\u00e9roule en th\u00e9orie dans un tableau infini, ici on supposera qu'on se restreint \u00e0 un tableau de taille donn\u00e9e <code>TAILLE</code> et que cette constante est d\u00e9finie en d\u00e9but de programme \u00e0 l'aide de, par exemple, <code>TAILLE=100</code> on ne fait pas \u00e9voluer la premi\u00e8re et la derni\u00e8re case du tableau qui restent toujours des cellules mortes.</p> <ol> <li> <p>Les cellules n'ayant que deux \u00e9tats possibles on repr\u00e9sente un \u00e9tat du jeu par une liste de bool\u00e9ens. Ecrire une fonction de <code>affiche</code>  qui prend en argument un \u00e9tat du jeu et l'affiche dans le terminal sous la forme d'une chaine de caract\u00e8re o\u00f9 <code>#</code> indique les cellules vivantes et <code>.</code> les cellules mortes. Par exemple (avec une taille de 10), si la liste <code>etat</code>contient les valeurs <code>[False,False,False,True,True,False,True,False,True,False]</code> , l'affichage produit dans le terminal sera <code>...##.#.#.</code>.</p> </li> <li> <p>Ecrire une fonction \u00a0<code>evolution</code> qui prend en argument un etat du jeu de la vie et qui renvoie le nouvel \u00e9tat du jeu apr\u00e8s une application de la r\u00e8gle d'\u00e9volution. Par exemple, si le tableau <code>etat</code> contient <code>[False,False,False,True,True,False,True,False,True,False]</code>, alors la fonction evolution renvoie <code>False, False, True, True, True, False, False, False, False, False</code>.</p> </li> <li> <p>D\u00e9finir la constante <code>TAILLE</code> \u00e0 100 et d\u00e9finir un \u00e9tat de jeu ou toutes les cellules sont mortes sauf la cellule d'indice 50 qui est vivante et faire afficher l'\u00e9volution de l'\u00e9tat du jeu pour les 50 premi\u00e8res \u00e9tapes. Le d\u00e9but de l'affichage devrait \u00eatre : <pre><code>..................................................#.................................................\n.................................................#.#................................................\n................................................#...#...............................................\n...............................................#.#.#.#..............................................\n..............................................#.......#.............................................\n.............................................#.#.....#.#............................................\n............................................#...#...#...#...........................................\n...........................................#.#.#.#.#.#.#.#..........................................\n..........................................#...............#.........................................\n.........................................#.#.............#.#........................................\n</code></pre></p> </li> <li> <p>Ecrire une fonction <code>compte</code> qui prend en argument un \u00e9tat du jeu et renvoie le nombre de cellules vivantes.</p> </li> <li> <p>On prend la constante <code>TAILLE</code> \u00e9gale \u00e0 1000, et un tableau initialement vide \u00e0 part la cellule d'indice 500 qui est vivante. Combien de cellules vivantes contient le tableau apr\u00e8s 2024 \u00e9volutions ?  V\u00e9rifier votre r\u00e9ponse :   </p> </li> </ol> <p>Pour aller plus loin</p> <p>Pour aller plus loin, on pourra impl\u00e9menter l'\u00e9volution d'un jeu de la vie classique sur une grille rectangulaire qu'on pourra repr\u00e9senter par une liste de liste.</p>"},{"location":"itc/complexite/#exercice-5-crible-derastothene","title":"Exercice 5 : Crible d'Erastoth\u00e8ne","text":"<p>On rappelle qu'un nombre premier est un entier naturel ayant exactement deux diviseurs 1 et lui-m\u00eame, ainsi 13 est premier mais pas 15. Le crible d'Erastoth\u00e8ne est un algorithme permettant de trouver tous les nombres premiers inf\u00e9rieurs ou \u00e9gaux \u00e0 un entier <code>n</code> donn\u00e9. </p> <p>Algorithme</p> <ul> <li>on cr\u00e9e une liste de bool\u00e9ens <code>premiers</code> de taille <code>n+1</code></li> <li>on initialise le tableau \u00e0 <code>true</code> sauf <code>premiers[0]</code> et <code>premiers[1]</code> qui sont \u00e0 <code>false</code> puisque  \\(0\\) et \\(1\\) ne sont pas premiers.</li> <li>on parcourt ce tableau si <code>premiers[i]</code> est \u00e0 <code>true</code> alors on met tous ses multiples (sauf lui-m\u00eame) \u00e0 <code>false</code></li> <li>le parcours s'arr\u00eate d\u00e8s que l'entier <code>i</code> est sup\u00e9rieur \u00e0 \\(\\sqrt{n}\\).  </li> </ul> <ol> <li> <p>Ecrire une fonction <code>crible</code> qui prend en param\u00e8tre un entier <code>n</code> et impl\u00e9mente cet algorithme. L'utiliser pour afficher les nombres premiers inf\u00e9rieurs \u00e0 100.</p> <p>Aide</p> <p>Vous devriez obtenir : <code>2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97</code></p> </li> <li> <p>Ecrire une fonction <code>somme_premiers</code> qui prend en argument un entier <code>seuil</code> et renvoie la somme de tous les nombres premiers inf\u00e9rieurs ou \u00e9gaux \u00e0 <code>seuil</code>. Par exemple <code>somme_premiers(100)</code> renvoie <code>1060</code></p> </li> <li> <p>Calculer la somme de tous les nombres premiers inf\u00e9rieur \u00e0 10000. V\u00e9rifier votre r\u00e9ponse :   </p> </li> </ol>"},{"location":"itc/dictionnaires/","title":"C5 Dictionnaires","text":""},{"location":"itc/dictionnaires/#introduction","title":"Introduction","text":"<p>On rappelle que pour une liste de Python, les valeurs sont accessibles par l'interm\u00e9diaire de leur indice. Par exemple les \u00e9l\u00e9ments de la liste <code>prenoms = ['Marie', 'Paul', 'Julie', 'Tom', 'Alice']</code>  sont accessibles via les indices <code>0, 1, 2, 3, 4</code> comme illustr\u00e9 ci-dessous :</p> Elements 'Marie' 'Paul' 'Julie' 'Tom' 'Alice' Indice 0 1 2 3 4 <p>Un dictionnaire de Python est similaire \u00e0 une liste mais les \u00e9l\u00e9ments appel\u00e9es valeurs sont reper\u00e9s par des cl\u00e9s. Un dictionnaire est donc comparable \u00e0 un tableau associatif de cl\u00e9s et de valeurs, chaque cl\u00e9 (unique) \u00e9tant associ\u00e9 \u00e0 une valeur. Prenons un premier exemple, un dictionnaire permettant d'associer des cl\u00e9s (des prenoms) \u00e0 des valeurs \u00e0 une adresse mail :</p> Cl\u00e9s 'Marie' 'Paul' 'Tom' Valeurs 'marie@toto.com' 'paul@truc.net' 'tom@bidule.org' <p>Pour cr\u00e9er ce dictionnaire en Python, on utilise la syntaxe suivante :</p> <p><code>adresses = {'Marie' : 'marie@toto.com', 'Paul' : 'paul@truc.net', 'Tom' : 'tom@bidule.org'}</code></p> <p>c'est-\u00e0-dire :</p> <ul> <li>On liste entre accolades <code>{</code> <code>}</code> et s\u00e9par\u00e9s par des virgules <code>,</code> les paires cl\u00e9s/valeurs</li> <li>Les deux \u00e9l\u00e9ments d'une m\u00eame paire sont s\u00e9par\u00e9s par le caract\u00e8re <code>:</code></li> </ul>"},{"location":"itc/dictionnaires/#operation-de-bases-sur-un-dictionnaires","title":"Op\u00e9ration de bases sur un dictionnaires","text":"<ul> <li>Affichage :     Pour afficher la totalit\u00e9 des paires d'un dictionnaire, on utilise l'instruction <code>print</code></li> <li> <p>Acc\u00e8s \u00e0 une valeur :     Pour acc\u00e9der aux valeurs de ce dictionnaire, on utilise une syntaxe similaire \u00e0 celle des listes, mais on donne la cl\u00e9 entre crochets (<code>[</code> et <code>]</code>) et pas l'indice. Par exemple l'adresse mail de <code>'Paul'</code> s'obtient avec <code>adresses['Paul']</code>.</p> <p>Note</p> <p>Tenter d'acc\u00e9der \u00e0 une valeur via une cl\u00e9 inexistante produit une erreur <code>KeyError</code></p> </li> <li> <p>Modifier une valeur :      Pour modifier une valeur dans un dictionnaire, on utilise l'affectation <code>=</code>. Par exemple pour modifier l'adresse de Tom : <code>adresses['Tom'] = tom@mel.org</code> </p> </li> <li>Supprimer une valeur :     Pour supprimer une paire d'un dictionnaire on utilise l'instruction <code>del</code>. Par exemple pour supprimer <code>del adresses['Marie']</code> supprimera la paire <code>'Marie' : 'marie@toto.com'</code> du dictionnaires <code>adresses</code></li> </ul> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur <p>A retenir</p> <ul> <li>Un dictionnaire permet de stocker des donn\u00e9es sous la forme d'associations cl\u00e9s/valeurs</li> <li>Pour cr\u00e9er un dictionnaire, on utilise la syntaxe : <code>mon_dico = {cle1 : valeur1, cle2 : valeur2, cle3:valeur3, ...}</code>. Un dictionnaire vide s'obtient avec <code>{}</code>.</li> <li>On acc\u00e8de \u00e0 une valeur par sa cl\u00e9 avec la syntaxe <code>mon_dico[cle]</code>, si la cl\u00e9 n'existe on obtient l'erreur <code>KeyError</code></li> <li>On modifie une valeur existante ou cr\u00e9er une nouvelle association cl\u00e9/valeur avec une affectation de la forme <code>mon_dico[cle] = nouvelle_valeur</code></li> <li>On peut supprimer un couple cl\u00e9/valeur avec <code>del mon_dico[cle]</code></li> </ul>"},{"location":"itc/dictionnaires/#exercice-1-creer-et-manipuler-un-dictionnaire","title":"Exercice 1 : Cr\u00e9er et manipuler un dictionnaire","text":"<ol> <li>Cr\u00e9er un dictionnaire <code>coefficient</code> permettant d'associer \u00e0 chaque \u00e9preuve finale du bac son coefficient (voir tableau ci-dessous) :  </li> <li>Ecrire une instruction <code>print</code> permettant d'afficher le coefficient du <code>'Grand oral'</code>.</li> <li>Quelle instruction permet de modifier le coefficient de la philosophie en 9 ?</li> <li>Quelle instruction permet de rajouter l'\u00e9preuve <code>'Option'</code> avec un coefficient 2 ?</li> <li>Quelle instruction permet de supprimer l'\u00e9preuve <code>'Option'</code> cr\u00e9e ci-dessus ?</li> </ol>"},{"location":"itc/dictionnaires/#test-dappartenance-a-un-dictionnaire","title":"Test d'appartenance \u00e0 un dictionnaire","text":"<p>On peut tester si une cl\u00e9 existe ou non dans un dictionnaire avec <code>&lt;cle&gt; in &lt;dico&gt;</code> qui renverra <code>true</code> si <code>&lt;cle&gt;</code> est une cl\u00e9 pr\u00e9sente dans <code>&lt;dico&gt;</code> et <code>&lt;false&gt;</code> sinon.</p> <p>Note</p> <p>On peut aussi utiliser <code>in</code> sur les listes pour y tester la pr\u00e9sence d'un \u00e9l\u00e9ment par exemple <code>2 in [1, 9, 4]</code> renvoie <code>false</code>. Pour des raisons qui seront d\u00e9taill\u00e9es plus loin dans le cours, on limitera volontairement l'utilisation du <code>in</code> aux dictionnaires et on l'\u00e9vitera sur les listes.</p>"},{"location":"itc/dictionnaires/#exercice-2-dictionnaire-des-nombres-doccurrences","title":"Exercice 2 : Dictionnaire des nombres d'occurrences","text":"<p>Ecrire une fonction <code>dico_occurrence</code> qui prend en entr\u00e9e une cha\u00eene de caract\u00e8res <code>s</code> et renvoie un dictionnaire dont les cl\u00e9s sont les caract\u00e8res pr\u00e9sents dans <code>s</code> et les valeurs leurs nombres d'occurrences. Par exemple, <code>dico_occurrence(\"Bonjour\")</code> doit renvoyer le dictionnaire <code>{'B' : 1, 'o':2, 'n':1, 'j':1, 'u':1, 'r':1}</code> car tous les caract\u00e8res apparaissent une fois sauf <code>o</code> qui appara\u00eet deux fois.</p> Indices <ol> <li>Cr\u00e9er un dictionnaire vide</li> <li>Parcourir la chaine <code>s</code> caract\u00e8re par caract\u00e8re</li> <li>Si le caract\u00e8re est d\u00e9j\u00e0 pr\u00e9sent dans le dictionnaire incr\u00e9menter son nombre d'occurrence, sinon l'ajouter au dictionnaire avec une occurrence de 1.</li> </ol>"},{"location":"itc/dictionnaires/#parcourir-un-dictionnaire","title":"Parcourir un dictionnaire","text":"<p>On peut parcourir un dicionnaire par cl\u00e9s ou par valeurs et la syntaxe est similaire \u00e0 celle d\u00e9j\u00e0 rencontr\u00e9e sur les autres it\u00e9rables (chaines de caract\u00e8res, tuples, listes) : on utilise une boucle <code>for &lt;cle&gt; in &lt;dico&gt;</code>. Par exemple, dans la boucle <code>for c in {\"A\":6, \"T\":12, \"C\":9, \"G\":14}</code> la variable <code>c</code> prendra les valeurs <code>\"A\"</code>, <code>\"T\"</code>, <code>\"C\"</code> et <code>\"G\"</code>.</p>"},{"location":"itc/dictionnaires/#exercice-3-valeur-dun-mot-au-scrable","title":"Exercice 3 : Valeur d'un mot au Scrable","text":"<p>Au jeu du Scrabble, chaque lettre a une valeur comme indiqu\u00e9 sur l'image ci-dessous :</p> <p></p> <p>Le but de l'exercice est d'\u00e9crire une fonction <code>score</code> qui prend un argument un <code>mot</code> et renvoie la somme des valeurs des lettres de ce mot. Par exemple <code>valeur(\"GIRAFE\")</code> doit renvoyer 10 en effet :  et donc la valeur est \\(2+1+1+1+4+1 = 10\\)</p> <ol> <li> <p>Compl\u00e9ter  une premi\u00e8re version de <code>score</code> qui parcours les lettres du mots et ajoute la valeur suivant la lettre rencontr\u00e9e. <pre><code>def score(mot):\n    total = 0\n    for lettre in ....:\n        if lettre == 'A' or lettre=='E' or lettre=='I' ..... :\n            total += 1\n        if lettre == 'D' or lettre == 'G' or .......:\n            totel += 2\n        ...\n        ...\n    return ...\n</code></pre></p> </li> <li> <p>Les dictionnaires \u00e0 la rescousse</p> <ol> <li> <p>Cr\u00e9er un dictionnaire <code>valeur</code> dont les cl\u00e9s sont les lettres de l'alphabet et qui associe \u00e0 chaque lettre sa valeur.</p> </li> <li> <p>Utiliser ce dictionnaire afin d'\u00e9crire une version bien plus courte et lisible de la fonction <code>score</code>.</p> </li> </ol> </li> </ol>"},{"location":"itc/dictionnaires/#dictionnaires-et-mutabilite","title":"Dictionnaires et mutabilit\u00e9","text":"<p>Les dictionnaires sont des structures de donn\u00e9es mutables de Python, on retrouve donc les deux cons\u00e9quences d\u00e9j\u00e0 observ\u00e9es sur les listes, \u00e0 savoir :</p> <ul> <li> <p>lorsqu'on on cr\u00e9e un dictionnaire avec l'op\u00e9rateur <code>=</code> \u00e0 partir d'un dictionnaire existant, toute modification de l'un entraine une modification de l'autre :</p> <p>###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur</p> <p>Pour cr\u00e9e une \"vraie\" copie d'un dictionnaire <code>dico</code>, on peut utiliser <code>dico.copy()</code>. Par exemple, ci-dessus, on \u00e9crira ligne 2 <code>dico2 = dico1.copy()</code>. Les modifications apport\u00e9es \u00e0 la copie ne se r\u00e9p\u00e8teront pas sur l'original (et inversement)</p> </li> <li> <p>lorsqu'on passe un dictionnaire \u00e0 une fonction, tout modification effectu\u00e9e dans la fonction modifie effectivement le dictionnaire</p> <p>###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur</p> </li> </ul> <p>D'autre part, les cl\u00e9s d'un dictionnaires doivent n\u00e9cessairement \u00eatre non mutables, donc les listes par exemple ne peuvent pas \u00eatre cl\u00e9s d'un dictionnaire, une tentative en ce sens, d\u00e9clenche un <code>TypeError</code>.</p>"},{"location":"itc/dictionnaires/#exercices-de-synthese","title":"Exercices de synth\u00e8se","text":""},{"location":"itc/dictionnaires/#exercice-4-moyennes-des-eleves","title":"Exercice 4 : Moyennes des \u00e9l\u00e8ves","text":"<p>Voici un dictionnaire contenant  les notes obtenus par des \u00e9l\u00e8ves : <pre><code>notes = {\n            \"Albert\"    : [7, 11, 15, 8, 9],\n            \"Alice\"     : [14, 11, 6, 15],\n            \"Bob\"       : [9, 9, 13, 14, 9],\n            \"Louise\"    : [11, 13, 12, 14, 14],\n            \"Michelle\"  : [2, 5, 4, 9],\n            \"Luc\"       : [18, 14, 18, 11]\n        }\n</code></pre></p> <ol> <li> <p>Ecrire une fonction moyenne qui prend en argument une liste non vide d'entiers et renvoie la moyenne des \u00e9l\u00e9ments de cette liste.</p> </li> <li> <p>Cr\u00e9er un dictionnaire poss\u00e9dant les m\u00eames cl\u00e9s (les pr\u00e9noms) et contenant la moyenne de chaque \u00e9l\u00e8ve.</p> </li> </ol>"},{"location":"itc/dictionnaires/#exercice-5-codage-et-decodage","title":"Exercice 5 : Codage et d\u00e9codage","text":"<p>Le dictionnaire suivant repr\u00e9sente un code, les cl\u00e9s sont les lettres de l'alphabet (en majuscule) et les valeurs sont les lettres par lesquelles les remplacer pour effectuer le codage : <pre><code>code = {'A': 'Y', 'B': 'S', 'C': 'B', 'D': 'I', 'E': 'T', \n        'F': 'Q', 'G': 'N', 'H': 'U', 'I': 'X', 'J': 'F',\n        'K': 'C', 'L': 'W', 'M': 'K', 'N': 'H', 'O': 'E',\n        'P': 'G', 'Q': 'O', 'R': 'P', 'S': 'L', 'T': 'M',\n        'U': 'A', 'V': 'J', 'W': 'Z', 'X': 'V', 'Y': 'R',\n        'Z': 'D'}\n</code></pre> Par exemple le codage du mot <code>FACILE</code> est : <code>QYBXWT</code> (en effet la cl\u00e9 <code>F</code> est associ\u00e9e \u00e0 la valeur <code>Q</code>, la cl\u00e9 <code>A</code> \u00e0 la valeur <code>Y</code>, ...)</p> <ol> <li> <p>Ecrire une fonction qui prend en entr\u00e9e une chaine de caract\u00e8re et renvoie son codage. Si des caract\u00e8res autres que des lettres majuscules sont pr\u00e9sentes dans la chaine (ponctuation, espace, ...) ils sont laiss\u00e9es intactes. Tester votre fonction en d\u00e9terminant le codage de la phrase <code>C'EST VRAIMENT SUPER DE FAIRE DU PYTHON !</code>. Tester votre r\u00e9ponse dans le formulaire suivant :  </p> </li> <li> <p>Cr\u00e9er un dictionnaire <code>decode</code> qui \"inverse\" le dictionnaire <code>code</code> c'est-\u00e0-dire que la valeur associ\u00e9e \u00e0 <code>Y</code> est <code>A</code>, celle associ\u00e9e \u00e0 <code>B</code> est <code>S</code>, ...</p> </li> <li> <p>Ecrire une fonction qui prend en entr\u00e9e une chaine de caract\u00e8re et renvoie son d\u00e9codage. Tester votre fonction en d\u00e9codant le message suivant : <code>LAGTP ! JEAL YJTD PTALLX W'TVTPBXBT</code>.</p> </li> </ol>"},{"location":"itc/dictionnaires/#exercice-6-a-la-recherche-du-mot-cache","title":"Exercice 6 : A la recherche du mot cach\u00e9","text":"<p>Vous pouvez t\u00e9l\u00e9charger ci-dessous un fichier <code>mot_cache.txt</code> : mot_cache.txt  </p> <p>ce fichier contient de nombreux caract\u00e8res : tous ceux de code ascii compris entre 33 (<code>!</code>) et 126 (<code>~</code>). Tous ces caract\u00e8res apparaissent au moins \u00e0 50 reprises (et jusqu'\u00e0 100 fois) \u00e0 l'exception de quelques uns qui apparaissent rarement (moins d'une dizaine de fois). Retrouver les caract\u00e8res qui apparaissent rarement, ranger les dans l'ordre de leur nombre d'apparition pour obtenir le mot cach\u00e9. Vous pouvez v\u00e9rifier votre r\u00e9sultat ci-dessous :</p> <p> </p> <p>Aide</p> <ul> <li>Revoir si n\u00e9cessaire comment ouvrir un fichier en Python et en lire le contenu.</li> <li>On pourra construire un dictionnaire dont les cl\u00e9s sont les caract\u00e8res et les valeurs leur nombre d'apparition.</li> </ul>"},{"location":"itc/dictionnaires/#exercice-7-sentrainer-sur-codex","title":"Exercice 7 : S'entrainer sur CodEx","text":"<p>Quelques exercices CodEx pour s'entrainer sur les dictionnaire :</p> <ul> <li>Anniversaire</li> <li>Concours de l'Eurovision</li> <li>D\u00e9composition en facteurs premiers</li> <li>Dictionnaire de J'aime</li> <li>Pangramme</li> </ul>"},{"location":"itc/dictionnaires/#problemes","title":"Probl\u00e8mes","text":""},{"location":"itc/dictionnaires/#exercice-8-algorithme-de-luhn","title":"Exercice 8 : Algorithme de Luhn","text":"<p>L'algorithme de Luhn, du nom de son inventeur  Hans Peter Luhn est c\u00e9l\u00e8bre car il est notamment utilis\u00e9e pour v\u00e9rifier qu'un num\u00e9ro de carte de cr\u00e9dit est valide. Pour valider un num\u00e9ro donn\u00e9 on calcule \u00e0 partir de ses chiffres une valeur appel\u00e9e somme de contr\u00f4le, si cette valeur est divisible par 10 alors le num\u00e9ro est valide.</p> <p>Le but de l'exercice est de mettre en oeuvre cet algorithme puis de le tester. </p> <ol> <li> <p>On commence par \u00e9crire  une fonction annexe qui sera utile dans le calcul de la somme de contr\u00f4le. Ecrire une fonction de <code>mult2</code> qui prend en entr\u00e9e un entier naturel \\(c\\) tel que \\(0\\leqslant c \\leqslant 9\\) et renvoie \\(2c\\)  lorsque \\(0\\leqslant 2c \\leqslant 9\\) et la somme des deux chiffres de \\(2c\\) sinon. On v\u00e9rifiera les pr\u00e9conditions \u00e0 l'aide d'instructions <code>assert</code>.</p> <p>Le calcul de la somme de contr\u00f4le consiste \u00e0 faire la somme des chiffres du num\u00e9ro \u00e0 tester en utilisant au pr\u00e9alable la fonction <code>mult2</code> sur les chiffres dont le rang est pair (c'est \u00e0 dire en partant de la fin du nombre, le 2e chiffre, le 4e, ...). Par exemples :</p> <ul> <li>pour <code>267</code> on doit faire <code>2 + mult2(6) + 7</code> ce qui donne  <code>2+3+7 = 12</code>.</li> <li>pour  <code>15782</code>, on doit faire la somme <code>1 + mult2(5) + 7 + mult2(8) + 2</code>, ce qui donne : <code>1+1+7+7+2 = 18</code>.</li> <li>pour  <code>124586</code>, on doit faire la somme <code>mult2(1) + 2 + mult2(4) + 5 + mult2(8) + 6</code>, ce qui donne : <code>2+2+8+5+7+6 = 30</code>.</li> </ul> <p>On rappelle que le num\u00e9ro est valide lorsque cette somme de contr\u00f4le est divisible par 10, ainsi des trois exemples pr\u00e9c\u00e9dents, seul le dernier est un num\u00e9ro valide.</p> </li> <li> <p>V\u00e9rifier (\u00e0 la main) que le num\u00e9ro <code>4762</code> est valide mais pas le num\u00e9ro <code>5438</code>.</p> </li> <li> <p>Ecrire une fonction de signature <code>valide</code> qui prend en entr\u00e9e un num\u00e9ro <code>n</code> et renvoie un bool\u00e9en indiquant si ce num\u00e9ro est valide.</p> <p>Aide</p> <p>On rappelle que <code>n%10</code> permet d'obtenir le dernier chiffre d'un nombre \u00e9crit en base 10.</p> <p>On donne ci-dessous la d\u00e9finition en Python d'une liste de 100 num\u00e9ros dont un seul n'est pas valide :</p> <pre><code>numeros = [42893834, 469308860, 816927776, 146369152, 577477938, 242383354, 198853863, 497604926, 965166499, 896414216, 252023627, 504900275, 833686900, 25200593, 448977637, 675139265, 651805400, 403834260, 40891723, 34557363, 350052114, 215953688, 947025672, 269564290, 364657825, 610215303, 787228626, 336651237, 451740674, 687031351, 15139298, 19798024, 156340226, 357230580, 691330690, 258981679, 599613932, 890184567, 281750117, 564780427, 311762298, 533773735, 594844219, 145449195, 84137843, 568985378, 345751986, 735943243, 497983155, 386643704, 295664130, 848035267, 127760916, 242689800, 117599563, 492418736, 378068621, 429991706, 829069962, 354972812, 117023051, 844209254, 374770840, 273363275, 726603368, 591265053, 57508467, 326217296, 6613137, 339258576, 416161248, 843538950, 398195826, 11005451, 988988143, 482333671, 105154348, 859903643, 743440430, 603137506, 771710878, 564268084, 451172761, 899471783, 806957882, 93935849, 917054033, 185026515, 523927549, 746123991, 539999326, 640950606, 115496762, 439933680, 439477399, 842100126, 556362267, 496985862, 693480949, 562975391]\n</code></pre> </li> <li> <p>D\u00e9terminer \u00e0 l'aide d'un programme utilisant la fonction de validation lequel de ces num\u00e9ros est invalide. Tester votre r\u00e9ponse    :</p> </li> <li> <p>Ecrire une fonction qui prend en entr\u00e9e un tableau d'entiers et renvoie le nombre de num\u00e9ros valide dans ce tableau. Par exemple sur le tableau <code>numeros</code> de 100 entiers  donn\u00e9 en exemple, cette fonction doit renvoyer 99 puisque un seul num\u00e9ro est invalide.</p> </li> <li> <p>Ecrire une fonction qui prend en entr\u00e9e un entier <code>n</code> et d\u00e9termine quel chiffre ajouter \u00e0 droite de ce nombre de fa\u00e7on \u00e0 ce que le nombre ainsi form\u00e9 soit un num\u00e9ro valide. Par exemple pour 732, cette fonction renvoie 8 car le nombre 7328 est valide : <code>mult2(7) + 3 + mult2(2) + 8 = 5 + 3 + 4 + 8 = 20</code></p> </li> </ol>"},{"location":"itc/dictionnaires/#exercice-9-nombres-harshad","title":"Exercice 9 : Nombres harshad","text":"<p>On dit qu'un entier strictement positif est un nombre harshad (ou nombre de Niven) lorsqu'il est divisible par la somme de ses chiffres dans une base donn\u00e9e. Dans cet exercice, on s'int\u00e9resse aux nombres harshad en base 10. Par exemples, \\(48\\) est un nombre harshad puisque 48 est divisible par \\(12\\), de m\u00eame \\(63\\) (divisible par 9) ou encore \\(190\\) (divisible par 10) sont aussi des nombres harshad. Par contre \\(28\\), ou encore \\(104\\) ne sont pas des nombres harshad. Pour en savoir plus on pourra consulter la page wikipedia d\u00e9di\u00e9e.</p> <ol> <li> <p>Ecrire une fonction <code>est_harshad</code> qui prend en argument un entier <code>n</code> et renvoie <code>True</code> si et seulement si <code>n</code> est un nombre harshad.</p> </li> <li> <p>Ecrire une fonction <code>liste_harshad</code> qui prend en argument deux entiers <code>debut</code> et <code>fin</code> et renvoie la liste des nombres de harshad compris entre <code>debut</code> (inclus) et <code>fin</code> (exclu). Par exemple <code>liste_harshad(10,20)</code> doit renvoyer la liste <code>[10, 12, 18]</code> car ce sont les trois nombres harshad compris entre 10 (inclus) et 18 (exclu). Combien il y a-t-il de nombres harshad entre 10 (inclus) et 1000000 (exclu) ? V\u00e9rifier votre r\u00e9ponse :    .</p> </li> <li> <p>On s'int\u00e9resse maintenant aux suites de nombres cons\u00e9cutifs qui sont tous harshad. Par exemple, on pourra v\u00e9rifier que \\(110, 111, 112\\) forment une suite de trois nombres harshad cons\u00e9cutifs. Ecris une fonction <code>consecutifs</code> qui prend en argument une liste quelconque d'entiers tri\u00e9s dans l'ordre croissant et renvoie le nombre de valeurs maximales cons\u00e9cutifs dans cette liste ainsi que la premi\u00e8re de ces valeurs. Par exemple <code>consecutifs([2,6,7,10,12,13,14,20,21])</code> doit renvoyer le tuple <code>(3,12)</code> car il y a un maximum de 3 valeurs cons\u00e9cutives dans la liste et la premi\u00e8re est 12.</p> </li> <li> <p>Parmi les nombres harshad compris entre 10 (inclus) et 1000000 (exclu), combien au maximum en trouve-t-on de cons\u00e9cutifs ? Et quel est le premier de ces nombres ?   </p> </li> </ol>"},{"location":"itc/dictionnaires/#exercice-10-nombre-de-jours-entre-deux-dates","title":"Exercice 10 : Nombre de jours entre deux dates","text":"<p>On s'int\u00e9resse dans cet exercice au calcul du nombre de jours entre deux dates <code>d1</code> et <code>d2</code> donn\u00e9es au format JJ/MM/AAAA. On propose pour cela, l'algorithme (na\u00eff) suivant : on calcule de fa\u00e7on r\u00e9p\u00e9t\u00e9 le lendemain de la date <code>d1</code> jusqu'\u00e0 obtenir la date <code>d2</code>.</p> <ol> <li> <p>Cr\u00e9er un dictionnaire <code>nb_jours</code> qui fait correspondre \u00e0 chaque num\u00e9ro de mois son nombre de jours.</p> </li> <li> <p>Ecrire une fonction qui renvoie <code>True</code> si et seulement si l'entier donn\u00e9 en argument est une ann\u00e9e bissextile. Une ann\u00e9e est bissextile si elle est divisible par 4 mais pas par 100 ou s'il est divisible par 400.</p> </li> <li> <p>Ecrire une fonction <code>lendemain</code> qui prend en argument trois entiers <code>j</code>, <code>m</code> et <code>a</code>  et renvoie les trois entiers correspondant au lendemain de cette date. Par exemple <code>lendemain(30,6,1950)</code> renvoie <code>1,7,1951</code>.</p> </li> <li> <p>Cr\u00e9er une fonction <code>extrait</code> qui prend en argument une chaine de caract\u00e8re repr\u00e9sentant une date au format <code>JJ/MM/AAAA</code> et renvoie un tuple de trois entiers : le jour, le mois et l'ann\u00e9e de cette date. Par exemple <code>extrait(\"25/01/1942\")</code> renvoie le tuple 25, 1, 1942.</p> </li> <li> <p>En d\u00e9duire une fonction <code>ecart</code> qui prend en argument deux dates et renvoie le nombre de jours qui s\u00e9pare ces deux dates. On consid\u00e8re que l'\u00e9cart entre deux dates cons\u00e9cutives est 1.</p> </li> <li> <p>Calculer l'\u00e9cart entre le <code>25/01/1942</code> et le <code>17/12/2022</code> et v\u00e9rifier votre r\u00e9ponse :    .</p> </li> </ol>"},{"location":"itc/discipline/","title":"C4 Discipline de programmation","text":""},{"location":"itc/discipline/#exemple-introductif","title":"Exemple introductif","text":"<p>On consid\u00e8re la fonction suivante :</p> <pre><code>def imax(l):\n    im = 0\n    maxi = 0\n    for i in range(len(l)):\n        if l[i]&gt;maxi:\n            im = i\n            maxi = l[i]\n    return im\n</code></pre> <p>Pour chacun des appels suivants, quel sera le r\u00e9sultat renvoy\u00e9 par cette fonction ?</p> <ul> <li><code>imax([12, 18, 11, 9, 10])</code> </li> <li><code>imax([7, 7, 7, 7])</code> </li> <li><code>imax([-11, -15, -3])</code> </li> <li><code>imax([])</code></li> </ul> <p>Selon vous, ces r\u00e9sultats sont-ils ceux attendus par le concepteur de la fonction ?</p>"},{"location":"itc/discipline/#definitions","title":"D\u00e9finitions","text":"<p>L'exemple introductif ci-dessus est celui d'une fonction sans sp\u00e9cification, c'est-\u00e0-dire qu'on ne dispose pas d'une description formelle et d\u00e9taill\u00e9e de ses caract\u00e9ristiques, en particulier, on ne sait pas :</p> <ul> <li>quel est le type des arguments et quelles sont leurs valeurs admissibles, c'est ce qu'on appelle les pr\u00e9conditions.</li> <li>ce que renvoie la fonction, ni si elle produit d'autres effets (affichages, modification des arguments, ...), c'est ce qu'on appelle les postconditions</li> </ul> <p>En Python, l'usage est :</p> <ul> <li>de fournir une sp\u00e9cification sous la forme d'une docstring c'est-\u00e0-dire d'une chaine de caract\u00e8res \u00e9crite entre trois guillemets et situ\u00e9e imm\u00e9diatement apr\u00e8s la ligne du <code>def</code> de la fonction. Cette docstring pr\u00e9cise les types attendus en entr\u00e9e pour les arguments et le type renvoy\u00e9.</li> <li>d'inclure des v\u00e9rification des postconditions et des pr\u00e9conditions, si ces v\u00e9rifications \u00e9chouent le programme s'arr\u00eate en produisant un message d'erreur. Ces verifications sont effectu\u00e9es \u00e0 l'aide d'instructions <code>assert</code> qui prennent la forme suivante : <code>assert &lt;condition&gt;, &lt;message d'erreur&gt;</code>. Par exemple <code>assert len(l) != 0, \"La liste doit \u00eatre non vide\"</code> v\u00e9rifie que la liste <code>l</code> n'est pas vide, dans le cas contraire le programme s'arr\u00eate avec le message \"La liste doit \u00eatre non vide\"</li> <li> <p>d'indiquer dans le code m\u00eame de la fonction  des annotations de type. c'est-\u00e0-dire qu'apr\u00e8s chaque argument d'une fonction, on indique son type pr\u00e9c\u00e9d\u00e9 du caract\u00e8re <code>:</code> et qu'on indique le type renvoy\u00e9 par la fonction en le pr\u00e9c\u00e9dant de <code>-&gt;</code>. Par exemple, une fonction <code>exemple</code> prenant en argument une liste <code>l</code> et un entier <code>n</code> et renvoyant un bool\u00e9en s'\u00e9crira : <code>def exemple(l : list, n: int) -&gt; bool</code></p> <p>Note</p> <p>Ces annotations de type ne sont ni obligatoires ni v\u00e9rifi\u00e9es \u00e0 l'execution, cependant dans les sujets de concours r\u00e9cents (depuis 2023), elles apparaissent r\u00e9guli\u00e8rement \u00e0 titre d'exemples :</p> <ul> <li>un extrait du sujet CCMP de 2024 : </li> <li>un extrait du sujet CCINP de 2024 : </li> </ul> </li> </ul>"},{"location":"itc/discipline/#retour-sur-lexemple","title":"Retour sur l'exemple","text":"<p>L'exemple donn\u00e9 ci-dessous, devrait donc plut\u00f4t s'\u00e9crire :</p> <pre><code>def imax(l:list[int])-&gt;int: # (1)!\n    \"\"\"Prend en entr\u00e9e une liste non vide d'entiers \n    et renvoie l'indice de la premi\u00e8re occurence du maximum\"\"\" \n    assert isinstance(l,list),\"l'argument doit \u00eatre une liste\" #(2)!\n    assert l!=[], \"la liste en entr\u00e9e doit \u00eatre non vide\" \n    im = 0\n    maxi = l[0] # (3)!\n    for i in range(1,len(l)):\n        if l[i]&gt;maxi:\n            im = i\n            maxi = l[i]\n    return im\n</code></pre> <ol> <li>La signature de la fonction inclus maintenant les annotations de type et elle est suivie par une sp\u00e9cification de la fonction.</li> <li>Les instructions <code>assert</code> permettant de v\u00e9rifier les pr\u00e9conditions</li> <li>Gr\u00e2ce \u00e0 la pr\u00e9condition, on peut acc\u00e9der sans risque \u00e0 <code>l[0]</code> car on sait que la liste contient au moins un \u00e9l\u00e9ment.</li> </ol> <p>Le comportement correct d'une fonction peut \u00eatre valid\u00e9 (mais pas prouv\u00e9) par l'utilisation d'un jeu de test. c'est-\u00e0-dire un ensemble de couple d'entr\u00e9es de la fonction et de sorties attendues. On teste en particulier les cas limites (edge cases en anglais), par exemple dans le cas d'une fonction travaillant sur les listes, le cas des listes vides ou r\u00e9duites \u00e0 un seul \u00e9l\u00e9ment. Les instructions <code>assert</code> permettent de v\u00e9rifier que la fonction passe les tests. Dans le cas de la fonction ci-dessus, on pourrait par exemple ajouter les tests suivants :</p> <pre><code># Test avec une liste contenant un unique \u00e9l\u00e9ment :\nassert imax([15]) == 0\n# Test avec un maximum n\u00e9gatif\nassert imax([-12,-3,-15]) == 1\n# Test avec le maximum situ\u00e9 en derni\u00e8re position\nassert imax([1, 9, 5, 2, 10]) == 4\n# Test avec plusieurs occurences du maximum\nassert imax([1, 2, 7, 7, 3, 7, 4, 7]) == 2\n</code></pre>"},{"location":"itc/discipline/#exercices-de-synthese","title":"Exercices de synth\u00e8se","text":""},{"location":"itc/discipline/#exercice-1-ecrire-la-specification-dune-fonction","title":"Exercice 1 : Ecrire la sp\u00e9cification d'une fonction","text":"<p>On consid\u00e8re la fonction Python suivante : <pre><code>def cherche_position(element,liste):\n    for pos in range(len(liste)):\n        if liste[pos]==element:\n            return pos\n    return -1\n</code></pre></p> <ol> <li>Pr\u00e9dire la valeur renvoy\u00e9e par <code>cherche_position(\"Y\",[\"P\",\"Y\",\"T\",\"H\",\"O\",\"N\"])</code> puis v\u00e9rifier en testant la fonction.</li> <li>M\u00eame question pour <code>cherche_position(\"A\",[\"P\",\"Y\",\"T\",\"H\",\"O\",\"N\"])</code></li> <li>M\u00eame question pour <code>cherche_position(\"M\",[\"P\",\"R\",\"O\",\"G\",\"R\",\"A\",\"M\",\"M\",\"E\"])</code></li> <li>Que fait cette fonction ? Ecrire sa cha\u00eene de documentation.</li> <li>Ajouter les annonations de type \u00e0 cette fonction.</li> <li>Proposer des tests afin de valider le comportement de cette fonction.</li> </ol>"},{"location":"itc/discipline/#exercice-2-puissance","title":"Exercice 2 : Puissance","text":"<p>Pour un exercice demandant d'\u00e9crire une fonction <code>puissance</code> qui prend entr\u00e9e un nombre <code>x</code> et un entier <code>n</code> et renvoie \\(x^n\\), un \u00e9tudiant a \u00e9crit :</p> <pre><code>def puissance(x,n):\n    p = x\n    for k in range(n-1):\n        p = p * x\n    return p\n</code></pre> <ol> <li>Compl\u00e9ter cette fonction en rajoutant sa sp\u00e9cification.</li> <li>Proposer des tests montrant que cette fonction ne respecte pas compl\u00e8tement sa sp\u00e9cification.</li> <li>Corriger cette fonction et proposer un jeu de tests.</li> </ol>"},{"location":"itc/discipline/#exercice-3-nombre-de-chiffres-dun-entier-positif","title":"Exercice 3 : Nombre de chiffres d'un entier positif","text":"<ol> <li>Ecrire une fonction <code>nombre_chiffres(n : int) -&gt; int</code> qui prend en entr\u00e9e un entier positif et renvoie son nombre de chiffres. Par exemple <code>nombre_chiffres(212)</code> doit renvoyer 3</li> <li>Ecrire les pr\u00e9conditions sous la forme d'instructions <code>assert</code></li> <li>Proposer un jeu de test pour cette fonction.</li> </ol>"},{"location":"itc/discipline/#exercice-4-repetition-dans-une-liste","title":"Exercice 4 : R\u00e9p\u00e9tition dans une liste","text":"<ol> <li>Ecrire une fonction <code>contient_repetition(l : list) -&gt; bool</code> qui renvoie <code>True</code> si la liste donn\u00e9e en argument contient le m\u00eame \u00e9l\u00e9ment r\u00e9p\u00e9t\u00e9 \u00e0 la suite. Par exemple <code>contient_repetition([2, 5, 5, 3])</code> renvoie <code>True</code> mais <code>contient_repetition([2, 5, 3, 5])</code> renvoie <code>False</code></li> <li>Proposer un jeu de test pour cette fonction</li> </ol>"},{"location":"itc/discipline/#sentrainer-sur-codex","title":"S'entrainer sur CodEx","text":"<p>Le site CodEx est un site d\u2019entra\u00eenement \u00e0 la programmation Python, un exercice  :</p> <ul> <li>demande g\u00e9n\u00e9ralement d'\u00e9crire une fonction r\u00e9pondant \u00e0 une sp\u00e9cification pr\u00e9cise</li> <li>inclus des tests visibles sous la forme d'instructions <code>assert</code> de fa\u00e7on \u00e0 valider une premi\u00e8re fois votre fonction </li> <li>inclus des tests cach\u00e9s qui permettent de valider d\u00e9finitivement votre fonction</li> <li>inclus g\u00e9n\u00e9ralement une solution et des conseils qui apparaissent apr\u00e8s r\u00e9ussite ou cinq essais infructueux de validation.</li> </ul> <p>Voici quelques exercices \u00e0 faire pour vous entrainer, mais vous pouvez en chercher d'autres en \u00e9vitant les th\u00e8mes que nous n'avons pas encore abord\u00e9s :</p> <ul> <li>anniversaire de chat</li> <li>dentiste</li> <li>est tri\u00e9</li> <li>moyenne olympique</li> </ul>"},{"location":"itc/entiers/","title":"C9 Repr\u00e9sentation des entiers","text":""},{"location":"itc/entiers/#cours","title":"Cours","text":"<p>Support de cours chapitre 9 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"itc/entiers/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"itc/entiers/#exercice-1-du-binaire-au-decimal","title":"Exercice 1 : Du binaire au d\u00e9cimal","text":"<p>Ecrire une fonction <code>bin_to_dec</code> qui convertit un nombre en \u00e9criture binaire (donn\u00e9e sous la forme d'une chaine de caract\u00e8res compos\u00e9es de '0' et de '1') en \u00e9criture d\u00e9cimale. Par exemples,</p> <ul> <li><code>bin_to_dec(\"10011\")</code> doit renvoyer 19 car \\(\\overset{\\displaystyle{_{2^4}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^3}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^2}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^1}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^0}}}{\\boxed{\\strut1}}\\) = \\(19\\),</li> <li><code>bin_to_dec(\"11000100\")</code> doit renvoyer 196 car \\(\\overset{\\displaystyle{_{2^7}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^6}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^5}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^4}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^3}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^2}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^1}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^0}}}{\\boxed{\\strut0}}\\) = \\(196\\),</li> <li><code>bin_to_dec(\"1001100\")</code> doit renvoyer 76 car \\(\\overset{\\displaystyle{_{2^6}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^5}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^4}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^3}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^2}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^1}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^0}}}{\\boxed{\\strut0}}\\) = \\(76\\).</li> </ul> <p>Aide</p> <p>On pourra parcourir par indice la chaine de caract\u00e8re repr\u00e9sentant l'\u00e9criture binaire \u00e0 partir de la fin (chiffre de \"poids\" \\(2^0\\)) et en revenant au d\u00e9but.</p>"},{"location":"itc/entiers/#exercice-2-de-lhexadecimal-au-binaire","title":"Exercice 2 : De l'hexad\u00e9cimal au binaire","text":"<ol> <li> <p>Ecrire une fonction <code>valeur_chiffre</code> qui prend en argument un caract\u00e8re repr\u00e9sentant un chiffre en base 16 et renvoie la valeur de ce chiffre en base 10. Par exemple <code>valeur_chiffre('8')</code> renvoie 8, et <code>valeur_chiffre('E')</code> renvoie 14.</p> <p>Aide</p> <p>On pourra utiliser le fait que les lettres <code>A</code>,...,<code>E</code> ont des codes ascii cons\u00e9cutifs et utiliser la fonction <code>ord</code> de Python qui renvoie ce code.</p> </li> <li> <p>Ecrire une fonction <code>hex_to_dec</code> qui prend en argument un nombre \u00e9crit en base 16 et renvoie l'\u00e9criture d\u00e9cimale de ce nombre. Par exemple  <code>hex_to_dec(\"C7E\")</code> renvoie <code>3198</code> car \\((C7E)_{16} = (12\\times 16^2 + 7\\times16 + 14)_{10}\\)</p> </li> </ol>"},{"location":"itc/entiers/#exercice-3-algorithme-des-divisions-succesives","title":"Exercice 3 : Algorithme des divisions succesives","text":"<p>Le but de l'exercice est d'\u00e9crire une impl\u00e9mentation en Python de l'algorithme des divisions successives qui permet de convertir un nombre \u00e9crit en base 10 dans une base \\(b\\) quelconque (\\(b \\geqslant 2\\)).</p> <p>On rappelle que l'algorithme consiste  tant que \\(n\\) n'est pas nul \u00e0 :</p> <ul> <li>Ajouter le reste dans la division euclidienne de \\(n\\) par \\(b\\) \u00e0 l'\u00e9criture en base \\(b\\)</li> <li>remplacer \\(n\\) par le quotient de \\(n\\) dans la division euclidienne par \\(b\\)</li> </ul> <p>Si \\(b&gt;10\\), on utilise comme chiffre les lettres de l'alphabet, on d\u00e9clare donc en d\u00e9but de programme une chaine de caract\u00e8res :</p> <pre><code>CHIFFRES=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n</code></pre> <ol> <li> <p>Ecrire une fonction <code>dec_to</code> qui prend en argument un entier <code>n</code> (type <code>int</code>) \u00e9crit en base 10 et une base <code>b</code> (sup\u00e9rieur ou \u00e9gale \u00e0 2) et renvoie l'\u00e9criture de <code>n</code> dans la base <code>b</code></p> </li> <li> <p>Tester votre fonction en affichant l'\u00e9criture en base <code>29</code> de <code>620647</code> (on rappelle qu'il y a 29 chiffres en base 29, les premiers sont <code>0,1, .. ,9</code> et apr\u00e8s on utilise  les lettres <code>A, B, ...</code>). V\u00e9rfier votre r\u00e9ponse   </p> </li> <li> <p>Ecrire une fonction <code>base_to_dec</code> qui prend en argument une chaine de caract\u00e8re repr\u00e9sentant un nombre \u00e9crit dans une base \\(b \\geqslant 2\\) ainsi que cet entier \\(b\\) et renvoie l'\u00e9criture d\u00e9cimale de ce nombre. Par exemple <code>base_to_dec(\"210112\",3)</code> renvoie 581, car le nombre est donn\u00e9 en base 3 et \\(2 \\times 3^5 + 3^4 + 3^2 + 3^1 + 2\\times3^0 = 581\\)</p> </li> </ol>"},{"location":"itc/entiers/#exercice-4-complement-a-deux","title":"Exercice 4 : Compl\u00e9ment \u00e0 deux","text":"<ol> <li> <p>Ecrire une fonction Python <code>binaire(entier)</code> qui prend en entr\u00e9e un entier compris entre 0 et 127 et renvoie une cha\u00eene de caract\u00e8re contenant la repr\u00e9sentation binaire de cet entier sur un octet. Par exemple <code>binaire(42)</code> renvoie <code>\"00101010\"</code>.</p> </li> <li> <p>Ecrire une fonction Python <code>inverse_bit(chaine)</code> qui prend en entr\u00e9e une cha\u00eene de caract\u00e8re et renvoie la cha\u00eene dans laquelle tous les 0 ont \u00e9t\u00e9 remplac\u00e9s par des 1 et tous les 1 par des 0. Par exemple <code>inverse_bit(\"10110001\")</code> renvoie <code>\"01001110\"</code></p> </li> <li> <p>Ecrire une fonction Python <code>ajoute_un(chaine)</code> qui prend en entr\u00e9e une cha\u00eene de caract\u00e8res et effectuer l'addition binaire de 1 au nombre binaire repr\u00e9sent\u00e9 par cette chaine. Par exemple <code>ajoute_un(\"1001010\")</code> renvoie <code>1001011</code>.</p> </li> <li> <p>En utilisant les fonctions ci-dessus, \u00e9crire une fonction Python qui renvoie la repr\u00e9sentation en compl\u00e9ment \u00e0 deux sur 8 bits d'un entier pass\u00e9 en param\u00e8tre.</p> </li> </ol>"},{"location":"itc/fichiers/","title":"C3 Fichiers","text":"<p>Dans de tr\u00e8s nombreuses situations, un programme doit pouvoir r\u00e9cup\u00e9rer ou \u00e9crire des informations dans un fichier. Ce chapitre propose de d\u00e9couvrir les fonctions de Python permettant de le faire. Nous utiliserons trois exemples de fichiers disponibles en t\u00e9l\u00e9chargement ci-dessous :</p> <ul> <li>le fichier informaticiens.txt qui contient une liste d'informaticiens c\u00e9l\u00e8bres</li> <li>le fichier films.txt qui contient une liste de films.</li> <li>le fichier dates.txt qui contient une liste de dates au format <code>JJ/MM/AAAA</code>.</li> </ul> <p>Danger</p> <p>Avant de continuer t\u00e9l\u00e9charger ces fichiers (clic droit sur leurs noms puis <code>Enregistrer la cible du lien sous ...</code>) dans un dossier de votre choix, par la suite vous sauvegarderez vos scripts Python de ce chapitre dans ce m\u00eame r\u00e9pertoire.</p>"},{"location":"itc/fichiers/#ouverture-dun-fichier-en-lecture-seule","title":"Ouverture d'un fichier en lecture seule","text":"<p>Pour ouvrir un fichier, on utilise la fonction <code>open</code>, cette fonction prend comme param\u00e8tre le nom du fichier et elle renvoie une variable appel\u00e9e descripteur de fichier. Par exemple, dans l'instruction suivante : <pre><code>lecteur = open(\"informaticiens.txt\")\n</code></pre> la variable <code>lecteur</code> est notre descripteur de fichier, et nous avons ouvert le fichier ayant pour nom sur le disque dur : <code>informaticiens.txt</code>. Il faut interpr\u00e9ter un descripteur de fichier comme un canal de lecture pour acc\u00e9der \u00e0 ce fichier.</p> <p>Si apr\u00e8s avoir ex\u00e9cut\u00e9 le programme ci-dessous vous obtenez un <code>FileNotFoundError: [Errno 2] No such file or directory:</code> c'est que Python ne trouve pas sur votre disque dur le fichier que vous essayez d'ouvrir, on rappelle que le programme Python et le fichier doivent se trouver dans le m\u00eame r\u00e9pertoire !</p> <p>A retenir</p> <ul> <li>La fonction #!python <code>open</code> permet d'ouvrir un fichier pr\u00e9sent dans le dossier courant.</li> <li>Cette fonction prend en param\u00e8tre un nom de fichier et renvoie un descripteur de fichier.</li> <li>L'erreur <code>FileNotFoundError</code> indique que le fichier n'a pas \u00e9t\u00e9 trouv\u00e9.</li> </ul>"},{"location":"itc/fichiers/#lecture-dun-fichier","title":"Lecture d'un fichier","text":"<p>Si l'instruction <code>lecteur = open(\"informaticiens.txt\")</code> s'est produite correctement, on dispose maintenant d'un canal de lecture vers le fichier. Pour lire les donn\u00e9es on utilise la fonction <code>read</code> sur ce descripteur :</p> <pre><code>lecteur = open(\"informaticiens.txt\")\n# Une fois le fichier ouvert, on effectue les op\u00e9rations de lecture sur le descripteur\ncontenu = lecteur.read()\nprint(contenu)\n</code></pre> <p>Comme vous pouvez le constater, la fonction <code>read</code> lit la totalit\u00e9 du fichier en une seule fois !  D'autre part, une fois le fichier lu tout se passe comme si le descripteur de fichier <code>lecteur</code> \u00e9tait arriv\u00e9 \u00e0 la fin du fichier, ainsi une deuxi\u00e8me lecture du fichier ne retournera plus aucune donn\u00e9e (la fin de fichier est d\u00e9j\u00e0 atteinte).</p> <pre><code>lecteur = open(\"informaticiens.txt\")\n# Une fois le fichier ouvert, on effectue les op\u00e9rations de lecture sur le descripteur\ncontenu = lecteur.read()\nprint(contenu)\ndeuxieme_lecture = lecteur.read()\nprint(\"Deuxieme lecture :\", deuxieme_lecture)\n</code></pre> <p>La variable <code>deuxieme_lecture</code> est vide le descripteur de fichier \u00e9tant positionn\u00e9 \"\u00e0 la fin\" il n'y a plus d'informations \u00e0 lire.</p> <p>A retenir</p> <ul> <li>La fonction <code>read</code> permet de lire la totalit\u00e9 d'un fichier ouvert avec <code>open</code>.</li> <li>Apr\u00e8s lecture, le descripteur de fichier est positionn\u00e9 en fin de fichier et il n'y a plus d'information \u00e0 lire.</li> </ul> <p>Une bonne pratique de programmation consiste \u00e0 fermer un fichier apr\u00e8s l'avoir utilis\u00e9. C'est le r\u00f4le de l'instruction <code>close</code>, le programme pr\u00e9c\u00e9dent devrait donc se terminer par <code>lecteur.close()</code>.</p>"},{"location":"itc/fichiers/#exercice-1-a-vous-de-jouer","title":"Exercice 1 : A vous de jouer !","text":"<ol> <li>En utilisant Python, ouvrir le fichier <code>films.txt</code></li> <li>Lire ce fichier et en afficher le contenu</li> <li>Fermer ce fichier</li> </ol> <p>Au lieu de lire la totalit\u00e9 d'un fichier en une seule fois, il peut \u00eatre pr\u00e9f\u00e9rable d'en r\u00e9cup\u00e9rer les lignes soit dans une liste, soit une \u00e0 une :</p> <ul> <li> <p>afin de r\u00e9cup\u00e9rer les lignes d'un fichier dans une liste, on peut utiliser <code>readlines</code> :     <pre><code>lecteur = open(\"informaticiens.txt\")\nlignes = lecteur.readlines()\nprint(lignes)\nlecteur.close()\n</code></pre>     On remarquera bien la diff\u00e9rence avec <code>read</code> : ici on obtient une liste, ce qui permet par exemple d'acc\u00e9der directement \u00e0 une ligne en particulier du fichier : <code>print(lignes[5])</code>.</p> </li> <li> <p>une autre possibili\u00e9 est d'utiliser <code>readline</code> qui a pour effet de lire une seule ligne du fichier puis de positionner le descripteur de fichier sur la ligne suivante :     <pre><code># Ouverture du fichier\nlecteur = open(\"informaticiens.txt\")\n# Lecture de la premi\u00e8re ligne \nligne1 = lecteur.readline()\n# le pointeur de lecture est positionn\u00e9 \u00e0 la ligne suivante, un autre appel \u00e0 readline lira donc la 2e ligne\nligne2 = lecteur.readline()\n# Lecture termin\u00e9e on ferme le fichier\nlecteur.close()\nprint(ligne1)\nprint(ligne2)\n</code></pre></p> </li> </ul>"},{"location":"itc/fichiers/#exercice-2-affichage-dune-ligne","title":"Exercice 2 : Affichage d'une ligne","text":"<ol> <li>En utilisant <code>readlines</code> lire dans une liste les films pr\u00e9sents dans le fichiers <code>films.txt</code>. Quel film se trouve sur la ligne 4 (on num\u00e9rote les lignes \u00e0 partir de 0).</li> <li>M\u00eame question en utilisant <code>readline</code></li> </ol>"},{"location":"itc/fichiers/#ecriture-dans-un-fichier","title":"Ecriture dans un fichier","text":"<p>Pour \u00e9crire dans un fichier, il faut l'ouvrir en mode <code>'w'</code> (pour write), si le fichier n'existe pas sur votre disque dur, il sera automatiquement cr\u00e9e : <pre><code>fichier_prenoms = open(\"prenoms.txt\",\"w\")\nfichier_prenoms.write(\"Alice\")\nfichier_prenoms.write(\"John\")\nfichier_prenoms.write(\"Billy\")\nfichier_prenoms.close()\n</code></pre> Apr\u00e8s ex\u00e9cution de ce programme, un fichier <code>prenoms.txt</code> est cr\u00e9e dans votre r\u00e9pertoire.</p>"},{"location":"itc/fichiers/#exercice-3-ajouter-les-sauts-de-lignes","title":"Exercice 3 : Ajouter les sauts de lignes","text":"<ol> <li>Ouvrir le fichier <code>prenoms.txt</code>, le lire et en afficher le contenu \u00e0 l'aide de Python. Que remarquez-vous ?</li> <li>Comment ajouter les sauts de lignes ?</li> </ol>"},{"location":"itc/fichiers/#traitement-sur-les-lignes","title":"Traitement sur les lignes","text":"<p>Souvent, chaque donn\u00e9e d'un fichier se trouve sur une ligne, par exemple le fichier dates.txt (que vous du d\u00e9j\u00e0 t\u00e9l\u00e9charg\u00e9 dans votre r\u00e9pertoire travail) contient une date par ligne. En lisant ce fichier avec <code>readlines</code>, on r\u00e9cup\u00e8re donc une listes de dates mais le saut de ligne final est pr\u00e9sent : <pre><code>reader = open(\"dates.txt\")\ncontenu = reader.readlines()\nprint(contenu)\n## affiche ['15/01/2012\\n', '9/09/2007\\n', '24/08/1999\\n', '11/04/2000\\n']\n</code></pre> Pour enlever ce saut de ligne final (et \u00e9ventuellement aussi des caract\u00e8res espaces qui se trouveraient en d\u00e9but ou fin de ligne), on peut utiliser <code>strip</code> qui s'applique sur une chaines de caract\u00e8res et renvoie une copie de cette chaine sans les sauts de lignes ou espace de d\u00e9but et de fin, ce qui donne : <pre><code>reader = open(\"dates.txt\")\ncontenu = reader.readlines()\ndates = [ligne.strip() for ligne in contenu]\nprint(dates)\n## affiche ['15/01/2012', '9/09/2007', '24/08/1999', '11/04/2000']\n</code></pre> Une autre fonction particul\u00e8rement int\u00e9ressant lors de la lecture des fichiers est <code>split</code> qui s'applique sur une chaine de caract\u00e8res et prend en argument un s\u00e9parateur. Cette fonction renvoie les sous chaines construites en d\u00e9coupant la chaine de d\u00e9part suivant le caract\u00e8re s\u00e9parateur. Par exemple : <pre><code>mots = \"Python est super\".split(\" \")\n# mots contient [\"Python\", \"est\", \"super\"]\nprenoms = \"Am\u00e9lie,Pierre,Jacques,Albert,Susie\".split(\",\")\n# prenoms contient [\"Am\u00e9lie\",\"Pierre\",\"Jacques\",\"Albert\",\"Susie\"]\nvaleurs = \"5-12-54-11-13-9\".split(\"-\")\n# valeurs contient [\"5\", \"12\", \"54\", \"11\", \"13\", \"9\"]\n</code></pre> Ici, on peut par exemple utiliser cette fonctionnalit\u00e9 pour d\u00e9couper les dates et r\u00e9cup\u00e9rer directement le jour, le mois et l'ann\u00e9e : <pre><code>reader = open(\"dates.txt\")\ncontenu = reader.readlines()\ndates = [ligne.strip().split(\"/\") for ligne in contenu]\nprint(dates)\n# affiche [['15', '01', '2012'], ['9', '09', '2007'], ['24', '08', '1999'], ['11', '04', '2000']]\n</code></pre></p>"},{"location":"itc/fichiers/#exercices-de-synthese","title":"Exercices de synth\u00e8se","text":""},{"location":"itc/fichiers/#exercice-4-manipulation-de-fichiers-en-python","title":"Exercice 4 : Manipulation de fichiers en Python","text":"<ol> <li> <p>Recopier et compl\u00e9ter le tableau suivant :</p> Nom du fichier Descripteur Mode Ouverture Fermeture <code>eleves.txt</code> <code>fic</code> lecture <code>d = open(\"dates.txt\",\"a\")</code> <code>couleurs.txt</code> \u00e9criture <code>fic.close()</code> <code>data.txt</code> <code>data</code> ajout <code>exos = open(\"exos.txt\",\"r\")</code> </li> <li> <p>Quel instruction Python permet d'\u00e9crire dans un fichier un passage \u00e0 la ligne ?</p> </li> <li>Que se passe-t-il si on ouvre un fichier d\u00e9j\u00e0 existant en mode \u00e9criture ?</li> <li>Quelle instruction doit-on toujours trouver apr\u00e8s une instruction <code>open</code> ?</li> </ol>"},{"location":"itc/fichiers/#exercice-5-nombre-de-lignes-dun-fichier","title":"Exercice 5 : Nombre de lignes d'un fichier","text":"<p>Ecrire une fonction qui prend en param\u00e8tre un nom de fichier et retourne le nombre de lignes de ce fichier.</p>"},{"location":"itc/fichiers/#exercice-6-recherche-dans-un-dictionnaire","title":"Exercice 6 : Recherche dans un dictionnaire","text":"<p>Pour cette exercice on utilise le dictionnaire t\u00e9l\u00e9chargeable ci-dessous: Dictionnaire </p> <ol> <li>Combien il y a-t-il de mots dans ce dictionnaire ?</li> <li>Lister tous les mots de 17 lettres de ce dictionnaire.</li> <li>Quel est le plus grand mot de ce dictionnaire ?</li> <li>Lister tous les mots de 5 lettres qui ont un d en deuxi\u00e8me position et se terminent par un e.</li> <li>Lister tous les mots palindromes de ce dictionnaire (un mot palindrome est un mot pouvant se lire indiff\u00e9remment dans les deux sens par exemple kayak ou \u00e9t\u00e9)</li> </ol>"},{"location":"itc/fichiers/#exercice-7-somme-des-entiers-dans-un-fichier","title":"Exercice 7 : Somme des entiers dans un fichier","text":"<p>Le fichier <code>entiers.txt</code> t\u00e9l\u00e9chargeable ci-dessous contient sur chaque ligne un entier. Ecrire un programme Python qui lit ce fichier et fait la somme de ces entiers. entiers.txt </p> <p>V\u00e9rifier la r\u00e9ponse fournie par votre programme ci-dessous :</p> <p> </p> <p>Aide</p> <p>Les donn\u00e9es lues dans un fichier sont toujours des chaines de caract\u00e8res (type <code>str</code>), si on les additionne avec <code>+</code> cela correspond donc \u00e0 la concat\u00e9nation des chaines de caract\u00e8res (comme dans <code>\"20\" + \"24\"</code> qui donne <code>\"2024\"</code>). Pour traiter les valeurs lues dans le fichier comme des entiers, il faudra donc au pr\u00e9alable les convertir en entier !</p>"},{"location":"itc/fichiers/#exercice-8-boite-de-plus-grand-volume","title":"Exercice 8 : Bo\u00eete de plus grand volume","text":"<p>Le fichier <code>boites.txt</code> est t\u00e9l\u00e9chargeable ci-dessous, chaque ligne de ce fichier contient la r\u00e9f\u00e9rence d'un mod\u00e8le de bo\u00eete sous la forme d'un code \u00e0 4 lettres suivi de trois entiers repr\u00e9sentant les dimensions de la bo\u00eete. A titre d'exemple, les trois premi\u00e8res lignes du fichier sont : <pre><code>NWLR 283 75 46 \nQBHC 117 70 79 \nZOWK 262 66 31\n</code></pre> Donc, la boite de r\u00e9f\u00e9rence <code>NWLR</code> a comme dimension <code>283x75x46</code>. boites.txt </p> <p>Trouver la r\u00e9f\u00e9rence de la bo\u00eete de plus grand volume, et v\u00e9rifier votre r\u00e9sultat dans le formulaire suivant :  </p>"},{"location":"itc/flottants/","title":"C13 Repr\u00e9sentation des flottants","text":""},{"location":"itc/flottants/#introduction","title":"Introduction","text":"<p>Effectuer les calculs suivants dans la console Python de votre choix (un \u00e9mulateur est disponible ci-dessous)</p> Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papier <ol> <li>Calculer <code>0.1 + 0.2</code>. Le r\u00e9sultat obtenu est-il exactement 0.3 ?</li> <li>Que donne  <code>0.1 + 0.2 == 0.3</code> ?</li> <li>Que donne  <code>2**50+0.1-2**50</code> ? Quel est le r\u00e9sultat correct de ce calcul ?</li> <li>Que donne <code>10**500</code> ? Et <code>10.0**500</code> ?</li> <li>Importer la fonction racine carr\u00e9 en tapant <code>from math import sqrt</code>, que donne <code>(sqrt(2))**2</code> ? Quel est le r\u00e9sultat correct de ce calcul ?</li> <li>Quelle est l'\u00e9criture d\u00e9cimale de la fraction \\(\\dfrac{1}{3}\\) ? Que donne le calcul de <code>1/3</code> ?</li> <li>Quelle conclusion tirer de ces quelques exemples ?</li> </ol>"},{"location":"itc/flottants/#cours","title":"Cours","text":"<p>Support de cours chapitre 13 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"itc/flottants/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"itc/flottants/#exercice-1-un-peu-de-programmation-python","title":"Exercice 1 : Un peu de programmation Python","text":"<ol> <li> <p>Ecrire une fonction python <code>decimale(chiffres_binaires)</code> qui prend en argument une liste <code>chiffres_binaires</code> repr\u00e9sentant les chiffres situ\u00e9s apr\u00e8s la virgule en \u00e9criture binaire et renvoie l'\u00e9criture d\u00e9cimale. Par exemples :</p> <ul> <li><code>decimale([0,1])</code> doit renvoyer \\(0,25\\) en effet : \\(0,01_{2} = 2^{-2} = 0,25\\)</li> <li><code>decimale([1,1,0,1])</code> doit renvoyer \\(0,8125\\) en effet : \\(0,1101_{2} = 2^{-1} + 2^{-2} + 2^{-4} = 0,8125\\)</li> </ul> </li> <li> <p>Ecrire une fonction python <code>dyadique(chiffres_decimaux,taille_max)</code> qui prend en argument une liste <code>chiffres_decimaux</code> repr\u00e9sentant les chiffres situ\u00e9s apr\u00e8s la virgule en \u00e9criture d\u00e9cimale et renvoie l'\u00e9criture dyadique en se limitant \u00e0 une mantisse de <code>taille_max</code>. Par exemples : </p> <ul> <li><code>dyadique([7,5],12)</code> doit renvoyer <code>[1,1]</code> car \\(0,75_{10} = 0,11_{2}\\)</li> <li><code>dyadique([1],12)</code> doit renvoyer <code>[0,0,0,1,1,0,0,1,1,0,0,1]</code> car \\(0,1_{10} = 0,000110011001100110011..._{2}\\) et on se limite \u00e0 12 chiffres apr\u00e8s la virgule.</li> </ul> <p>Aide</p> <p>Revoir si besoin l'algorithme vu en cours pour passer de l'\u00e9criture d\u00e9cimale \u00e0 l'\u00e9criture dyadique.</p> </li> </ol>"},{"location":"itc/flottants/#exercice-2-comparaisons-entre-flottants","title":"Exercice 2 : Comparaisons entre flottants","text":"<p>On consid\u00e8re le programme Python suivant : <pre><code>x = 0.3\ntour = 0\nwhile x != 0.0:\n    tour += 1\n    x = x - 0.1\nprint(\"Nombre de passages dans la boucle = \",tour)\n</code></pre></p> <ol> <li>Combien de fois devrait-on passer dans la boucle <code>while</code> ? et quel est l'affichage attendu ?</li> <li>Recopier et executer ce programme. Que se passe-t-il ? pourquoi ?</li> <li>Remplacer le test de la ligne 3 par <code>while x &gt; 0</code>. Expliquer le r\u00e9sultat obtenu</li> </ol>"},{"location":"itc/flottants/#exercice-3-discriminant","title":"Exercice 3 : Discriminant","text":"<ol> <li>Ecrire une fonction <code>discriminant</code> qui prend en param\u00e8tres trois flottants  \\(a,b\\) et \\(c\\) et renvoie \\(b^2-4ac\\).</li> <li>Ecrire une fonction <code>nombre_solutions</code> qui prend en param\u00e8tre un flottant \\(d\\) et affiche <code>2 solutions</code> si \\(d&gt;0\\), <code>1 solution</code> si \\(d=0\\) et <code>pas de solutions</code> si \\(d&lt;0\\).</li> <li>D\u00e9terminer le nombre de solutions r\u00e9elles des \u00e9quations suivantes et comparer avec les r\u00e9sultats obtenus en utilisant les deux fonctions ci-dessous :<ul> <li>\\(x^2 + 1,4x - 0,49 = 0\\)</li> <li>\\(x^2 + 0,6x - 0,09 = 0\\)</li> <li>\\(x^2 + 0,4x - 0,04 = 0\\)</li> </ul> </li> <li>Interpr\u00e9ter ces r\u00e9sultats</li> </ol>"},{"location":"itc/flottants/#exercice-4-comportement-dune-suite","title":"Exercice 4 : Comportement d'une suite","text":"<p>On consid\u00e8re la suite \\((u_n)_{n \\in \\mathbb{N}}\\) d\u00e9finie par : \\(\\left\\{ \\begin{array}{ll} u_0=e-1 \\\\ u_{n+1} = (n+1)\\,u_n - 1 \\end{array}\\right.\\)</p> <ol> <li> <p>Montrer que cette suite converge et a pour limite 0</p> <p>Aide</p> <p>On pourra note \\(\\displaystyle{S_n = \\sum_{k=0}^n \\frac{1}{k!}}\\), admettre que pour tout \\(n \\in N\\), \\(S_n \\leqslant e \\leqslant S_n + \\dfrac{1}{n\\,n!}\\) et suivre les \u00e9tapes suivantes :</p> <ul> <li>montrer que \\(\\displaystyle{e = \\lim_{n \\rightarrow +\\infty} S_n}\\)</li> <li>montrer que pour tout \\(n \\in N\\), \\(u_n = n!\\,(e-S_n)\\)</li> <li>conclure</li> </ul> </li> <li> <p>Ecrire un programme, qui  affiche les \\(30\\) premiers termes de la suite \\(u\\). On utilisera la constante <code>e</code> de <code>math</code> comme valeur de \\(e\\). </p> </li> <li> <p>Expliquer le r\u00e9sultat obtenu.</p> </li> </ol>"},{"location":"itc/flottants/#exercice-5-convergence-numerique-et-mathematique","title":"Exercice 5 : Convergence num\u00e9rique et math\u00e9matique","text":"<p>On consid\u00e8re la suite \\((u_n)_{n \\in \\mathbb{N}}\\) d\u00e9finie par : \\(\\left\\{ \\begin{array}{ll} u_1= \\dfrac{5}{4} \\\\ u_2 = \\dfrac{7}{5} \\\\ u_{n+2} = 10 - \\dfrac{23}{u_{n+1}} + \\dfrac{14}{u_nu_{n+1}} \\end{array}\\right.\\)</p> <ol> <li>V\u00e9rifier que le terme g\u00e9n\u00e9ral de \\((u_n)\\) est \\(\\dfrac{2^n+3}{2^{n-1}+3}\\) et en d\u00e9duire que \\((u_n)\\) converge et donner sa limite.</li> <li>Ecrire un programme qui affiche les 40 premiers termes de la suite \\(u\\).</li> <li>Expliquer le r\u00e9sultat obtenu.</li> </ol>"},{"location":"itc/gloutons/","title":"C7 Algorithmes gloutons","text":""},{"location":"itc/gloutons/#cours","title":"Cours","text":"<p>Support de cours chapitre 7 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"itc/gloutons/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"itc/gloutons/#exercice-1-implementation-du-rendu-de-monnaie-en-python","title":"Exercice 1 : Impl\u00e9mentation du rendu de monnaie en Python","text":"<p>Le but de l'exercice est de compl\u00e9ter une fonction <code>rendu</code> \u00e9crite en Python qui impl\u00e9mente l'algorithme glouton pour le probl\u00e8me du rendu de monnaie. La fonction prend en argument :</p> <ul> <li>un flottant <code>somme</code> qui est la somme \u00e0 rendre</li> <li>une liste <code>valeurs</code> contenant la somme des valeurs du syst\u00e8me mon\u00e9taire utilis\u00e9 qu'on suppose d\u00e9j\u00e0 tri\u00e9e par ordre d\u00e9croissant</li> </ul> <p>Et elle doit renvoyer comme r\u00e9sultat une liste contenant les pi\u00e8ces \u00e0 utiliser. On renvoie une liste vide lorsque l'algorithme \u00e9choue \u00e0 trouver une solution. On rappelle que la strat\u00e9gie gloutonne pour ce probl\u00e8me consiste \u00e0 rendre \u00e0 chaque \u00e9tape la pi\u00e8ce de plus forte valeur possible.</p> <ol> <li> <p>Questions pr\u00e9liminaires</p> <p>a. Que doit renvoyer <code>rendu(18,[15,10,5,2,1])</code> ? Quelle est la solution optimale \u00e0 ce probl\u00e8me ?</p> <p>b. Que doit renvoyer <code>rendu(17,[10,9,8,3])</code> ? Quelle est la solution optimale \u00e0 ce probl\u00e8me ?</p> </li> <li> <p>Recopier et compl\u00e9ter le code de la fonction ci-dessous :     <pre><code>def rendu(somme,valeurs):\n    #la solution de l'algorithme initialis\u00e9e \u00e0 la liste vide\n    solution = .....\n    #la position dans la liste valeurs de la pi\u00e8ce test\u00e9e\n    indice = ....\n    while somme!=0 and indice&lt;len(valeurs):\n        piece = valeurs[.....]\n        # on teste si la piece est inf\u00e9rieure \u00e0 la somme \u00e0 rendre\n        if piece&lt;=......:\n            # Si oui l'ajouter \u00e0 la solution et diminuer la somme \u00e0 rendre\n            somme=...............\n            solution...........(.....)\n        else:\n            # Sinon passer \u00e0 la pi\u00e8ce suivante\n            indice = ........\n    if somme==0:\n        return solution\n    else:\n        return []\n</code></pre></p> </li> <li> <p>Quel est le r\u00f4le du test <code>somme==0</code> en ligne 16 ? Que renverrait cette fonction pour le probl\u00e8me de la question 1.b) si on supprime enti\u00e8rement ce test (lignes 16 \u00e0 19) et qu'on le remplace par <code>return solution</code> ?</p> </li> <li> <p>Tester cette fonction sur les exemples de l'exercice 1.</p> </li> </ol>"},{"location":"itc/gloutons/#exercice-2-probleme-du-sac-a-dos","title":"Exercice 2 : Probl\u00e8me du sac \u00e0 dos","text":"<p>Le but de l'exercice est d'impl\u00e9menter la strat\u00e9gie gloutonne afin de r\u00e9soudre le probl\u00e8me du sac \u00e0 dos. On prend comme exemple un sac ayant un poids maximal de 4kg et les objets suivants :</p> <p></p> <ol> <li> <p>On repr\u00e9sente un objet par un <code>tuple</code> en Python <code>(valeur,poids)</code>, par exemple les \u00e9couteurs sont repr\u00e9sent\u00e9s par le tuple <code>(90, 0.2)</code>. Cr\u00e9er la liste <code>objets</code> en python contenant les 8 tuples repr\u00e9sentant chacun des 8 objets ci-dessus.</p> </li> <li> <p>On rappelle que la premi\u00e8re \u00e9tape de la strat\u00e9gie gloutonne est de classer les objets en utilisant un crit\u00e8re pertinent, par exemple le rapport <code>valeur/poids</code>. Ecrire une fonction <code>rapport</code> qui prend en argument un <code>objet</code> (donc un tuple) et renvoie le rapport <code>valeur/poids</code> de cet objet.</p> <p>Aide</p> <p>Pour r\u00e9cup\u00e9rer la valeur et le poids d'un objet repr\u00e9sent\u00e9 par un tuple, on peut d\u00e9compacter le tuple : <code>valeur, poids = objet</code></p> </li> <li> <p>En utilisant <code>sorted</code> \u00e9crire une fonction <code>trie_objets</code> qui prend en argument une liste d'objets et renvoie cette liste tri\u00e9e par ordre d\u00e9croissant du rapport valeur/poids.</p> <p>Aide</p> <ul> <li>le param\u00e8tre <code>reverse</code> \u00e0 <code>True</code> permet d'obtenir l'ordre d\u00e9croissant.</li> <li>le param\u00e8tre <code>key</code> permet de donner la cl\u00e9 de tri (c'est la fonction <code>rapport</code> de la question pr\u00e9c\u00e9dente).</li> </ul> </li> <li> <p>Ecrire la fonction <code>glouton</code> qui prend en argument une liste d'objets et un poids maximal et renvoie la valeur obtenue pour le sac. Tester votre fonction sur l'exemple donn\u00e9 en introduction et v\u00e9rifier votre r\u00e9sultat :   </p> </li> <li> <p>Modifier la fonction pr\u00e9c\u00e9dente afin qu'elle renvoie aussi le contenu du sac.</p> </li> </ol>"},{"location":"itc/gloutons/#exercice-3-somme-maximale-dans-une-matrice-carree","title":"Exercice 3 : Somme maximale dans une matrice carr\u00e9e","text":"<p>On consid\u00e8re une matrice carr\u00e9e de taille \\(n\\times n\\), \\(M_{i,j}\\) (\\(0 \\leqslant i \\leqslant n-1\\) et \\(0 \\leqslant j \\leqslant n-1\\)) \u00e0 coefficients entiers et on s'int\u00e9resse aux chemins depuis la premi\u00e8re valeur en haut \u00e0 gauche (\\(M_{0,0}\\)) jusqu'\u00e0 la derni\u00e8re en bas et \u00e0 droite (\\(M_{n-1,n-1}\\)) qui n'utilisent que les d\u00e9placements vers la droite (\\(\\rightarrow\\)) ou vers le bas (\\(\\downarrow\\)). Et on cherche \u00e0 d\u00e9terminer la somme obtenue si on se d\u00e9place avec  une strat\u00e9gie gloutonne. Par exemple, dans la matrice suivante :</p> <p>\\(\\left(\\begin{matrix} 1 &amp; 3 &amp; 2 &amp; 4 \\\\ 5 &amp; 6 &amp; 1 &amp; 2 \\\\ 7 &amp; 8 &amp; 9 &amp; 1 \\\\ 4 &amp; 2 &amp; 3 &amp; 5 \\end{matrix}\\right)\\)</p> <p>La strat\u00e9gie gloutonne donnera le chemin suivant en rouge et une somme de 38.</p> <p>\\(\\left(\\begin{matrix} \\textcolor{red}{1} &amp; 3 &amp; 2 &amp; 4 \\\\ \\textcolor{red}{5} &amp; 6 &amp; 1 &amp; 2 \\\\ \\textcolor{red}{7} &amp; \\textcolor{red}{8} &amp; \\textcolor{red}{9} &amp; 1 \\\\ 4 &amp; 2 &amp; \\textcolor{red}{3} &amp; \\textcolor{red}{5} \\end{matrix}\\right)\\)</p> <p>En cas d'\u00e9galit\u00e9 entre les choix, on choisit (arbitrairement) d'aller vers la droite (\\(\\rightarrow\\)).</p> <ol> <li> <p>En donnant un exemple montrer que la strat\u00e9gie gloutonne ne donne pas toujours la somme optimale.</p> </li> <li> <p>Ecrire une fonction <code>glouton</code> qui renvoie la somme obtenue la strat\u00e9gie gloutonne</p> <p>Aide</p> <p>Utiliser deux variables <code>ligne</code> et <code>colonne</code> qui indique la position courante dans la matrice :</p> <ul> <li><code>ligne</code> et <code>colonne</code> sont initialis\u00e9es \u00e0 0 car on d\u00e9marre depuis le coin sup\u00e9rieur gauche</li> <li>on choisit d'augmenter <code>ligne</code> ou <code>colonne</code> en comparant les valeurs se trouvant dans ces deux directions, attention cela n'est possible que si on a pas encore atteint la derni\u00e8re ligne et la derni\u00e8re colonne.</li> <li>on se d\u00e9place tant qu'on a pas atteint la derni\u00e8re position en bas et \u00e0 droite</li> </ul> </li> <li> <p>Tester votre fonction sur l'exemple suivant et v\u00e9rifier votre r\u00e9sultat :   </p> <pre><code> exemple = [\n    [11, 19, 12,  2, 18, 18,  2,  9, 12, 17]\n    [17, 14, 12, 10,  7, 18, 12,  5, 11,  7]\n    [ 4,  8,  2, 12,  2, 17, 16, 13,  1,  6]\n    [13,  8, 20, 10,  3, 12, 17, 12, 12,  9]\n    [ 8,  3, 14, 17, 16, 10, 13, 10,  5, 20]\n    [ 9, 13, 17,  9, 10,  1, 11, 19, 20, 19]\n    [ 1,  6, 18, 15, 10,  2,  7,  9,  4, 20]\n    [ 3,  8, 17, 18, 20, 19, 16,  8,  2, 14]\n    [19, 17, 18,  9, 20, 15,  6,  5, 16,  3]\n    [13, 14, 14,  9, 16,  8, 17, 15,  9, 11]\n        ]\n</code></pre> </li> <li> <p>Modifier votre fonction afin qu'elle renvoie aussi le parcours dans la matrice sous la forme d'une liste de 0 (pour indiquer un d\u00e9placement \u00e0 droite) et de 1 (pour indiquer un d\u00e9placement en bas).</p> </li> </ol>"},{"location":"itc/gloutons/#exercice-4-choix-dactivites","title":"Exercice 4 : Choix d'activit\u00e9s","text":"<p>On consid\u00e8re \\(n\\) activit\u00e9s \\(A_i\\) (\\(i \\leqslant i \\leqslant n-1\\)) ayant chacune une heure de d\u00e9but (\\(d_i\\)) et une heure de fin (\\(f_i\\)). Par exemple :</p> <ul> <li>\\(A_0 = (3,5)\\) signifie que l'activit\u00e9 0 commence \u00e0 3 heures et se termine \u00e0 5h</li> <li>\\(A_1 = (4,8)\\) et donc \\(A_1\\) est incompatible avec \\(A_0\\) puisque leurs plages horaires respectives se chevauchent</li> <li>\\(A_2 = (6,7)\\)</li> <li>\\(A_3 = (1,2)\\)</li> </ul> <p>Le but de l'exercice est de mettre en place une strat\u00e9gie gloutonne sur ce probl\u00e8me, le choix local est de prendre l'activit\u00e9 qui se termine le plus t\u00f4t. Dans l'exemple ci-dessus, on classerait les activit\u00e9 par heure de fin croissante : <code>[(1, 2), (3,5), (6,7), (4,8)]</code> et donc on pourrait prendre les activit\u00e9s \\(A_3\\), \\(A_0\\) et \\(A_2\\).</p> <ol> <li> <p>Mettre en oeuvre cette strat\u00e9gie en Python en \u00e9crivant une fonction <code>choix_activites</code> qui prend en argument une liste d'activit\u00e9s (donn\u00e9es sous la forme de tuple <code>(debut,fin)</code>) et renvoie le nombre d'activit\u00e9s obtenu en  suivant la strat\u00e9gie gloutonne</p> </li> <li> <p>Modifier la fonction pr\u00e9c\u00e9dente afin qu'elle renvoie la liste des activit\u00e9s \u00e0 choisir.</p> </li> </ol>"},{"location":"itc/graphes/","title":"C11 Graphes","text":""},{"location":"itc/graphes/#cours","title":"Cours","text":"<p>Support de cours chapitre 11 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"itc/graphes/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"itc/graphes/#exercice-1-implementation-par-matrice-dadjacence","title":"Exercice 1 : Impl\u00e9mentation par matrice d'adjacence","text":"<ol> <li> <p>Ecrire une fonction <code>cree_graphe</code> qui prend en argument un entier <code>n</code> et renvoie une liste de <code>n</code> listes de <code>n</code> bool\u00e9ens (tous initialis\u00e9s \u00e0 <code>false</code>). Cette liste permet donc de repr\u00e9senter un graphe par matrice d'adjacence.</p> </li> <li> <p>Ecrire une fonction <code>cree_arete</code> qui prend en argument un graphe repr\u00e9sent\u00e9 par une matrice d'adjacence et deux entiers <code>i</code> et <code>j</code> et modifie cette matrice de fa\u00e7on \u00e0 cr\u00e9er l'arc <code>i -&gt; j</code> du graphe.</p> </li> <li> <p>On donne ci-dessous une fonction de visualisation d'un graphe repr\u00e9sent\u00e9 par une matrice d'adjacence :     <pre><code>def visualise(g):\n    '''Visualise le graphe g sous forme d'image avec graphviz.'''\n    img_graphe = graphviz.Digraph()\n    for i in range(len(g)):\n        img_graphe.node(str(i))\n        for j in range(len(g)):\n            if g[i][j]:\n                img_graphe.edge(str(i), str(j))\n    img_graphe.view()\n</code></pre> Attention pour utiliser cette fonction il faut importer le module <code>graphviz</code>.     Cr\u00e9er un graphe \u00e0 5 sommets (num\u00e9rot\u00e9s 0,1,2,3 et 4) et y cr\u00e9er les arcs suivants :      <code>0 -&gt; 1</code>, <code>0 -&gt; 2</code>, <code>1 -&gt; 2</code>, <code>2 -&gt; 3</code>, <code>4 -&gt; 1</code> puis visualiser ce graphe.</p> </li> <li> <p>Ecrire une fonction qui affiche la matrice d'adjacence du graphe. Le r\u00e9sultat attendu pour le graphe ci-dessus est : <pre><code>0 1 1 0 0 \n0 0 1 0 0 \n0 0 0 1 0 \n0 0 0 0 0 \n0 1 0 0 0\n</code></pre></p> </li> <li> <p>Ecrire une fonction qui <code>degre_sortant</code> qui prend en argument un graphe <code>g</code> repr\u00e9sent\u00e9 par une matrice d'adjacence ainsi qu'un entier <code>i</code> et renvoie le degre sortant de ce sommet.</p> </li> <li> <p>Ecrire une fonction <code>sucesseurs</code> qui prend en argument un graphe <code>g</code> repr\u00e9sent\u00e9 par une matrice d'adjacence ainsi qu'un entier <code>i</code> et renvoie la liste des successeurs de ce sommet.</p> </li> <li> <p>Ecrire une fonction <code>ronde</code> qui prend en entr\u00e9e un entier <code>n</code> et renvoie un graphe dans lequel chaque sommet <code>i</code> a un unique successeur : le sommet <code>i+1</code> modulo <code>n</code>. </p> </li> <li> <p>Ecrire une fonction qui <code>degre_entrant</code> qui prend en argument un graphe <code>g</code> repr\u00e9sent\u00e9 par une matrice d'adjacence ainsi qu'un entier <code>i</code> et renvoie le degre entrant de ce sommet.</p> </li> <li> <p>Ecrire une fonction <code>predecesseurs</code> qui prend en argument un graphe <code>g</code> repr\u00e9sent\u00e9 par une matrice d'adjacence ainsi qu'un entier <code>i</code> et renvoie la liste des predecesseurs de ce sommet.</p> </li> <li> <p>Reprendre les questions pr\u00e9c\u00e9dentes dans le cadre d'un graphe non orient\u00e9.</p> </li> </ol>"},{"location":"itc/graphes/#exercice-2-implementation-par-liste-dadjacence","title":"Exercice 2 : Impl\u00e9mentation par liste d'adjacence","text":"<ol> <li> <p>Ecrire une fonction <code>cree_graphe</code> qui prend en argument un entier <code>n</code> et renvoie un dictionnaire dont les cl\u00e9s sont les entiers de <code>0</code>\u00a0\u00e0 <code>n-1</code> et dont les valeurs sont des listes vides. Ce dictionnaire permet donc de repr\u00e9senter un graphe par listes d'adjacence.</p> </li> <li> <p>Ecrire une fonction <code>cree_arete</code> qui prend en argument un graphe repr\u00e9sent\u00e9 par liste d'adjacence et deux entiers <code>i</code> et <code>j</code> et modifie ce dictionnaire de fa\u00e7on \u00e0 cr\u00e9er l'arc <code>i -&gt; j</code> du graphe.</p> </li> <li> <p>On donne ci-dessous une fonction de visualisation d'un graphe repr\u00e9sent\u00e9 par une matrice d'adjacence :     <pre><code>def visualise(g):\n    img_graphe = graphviz.Digraph()\n    for s in g:\n         img_graphe.node(str(s))\n         for t in g[s]:\n              img_graphe.edge(str(s),str(t))\n    img_graphe.view()\n</code></pre> Attention pour utiliser cette fonction il faut importer le module <code>graphviz</code>.     Cr\u00e9er un graphe \u00e0 5 sommets (num\u00e9rot\u00e9s 0,1,2,3 et 4) et y cr\u00e9er les arcs suivants :      <code>0 -&gt; 1</code>, <code>0 -&gt; 2</code>, <code>1 -&gt; 2</code>, <code>2 -&gt; 3</code>, <code>4 -&gt; 1</code> puis visualiser ce graphe.</p> </li> <li> <p>Ecrire une fonction qui <code>degre_sortant</code> qui prend en argument un graphe <code>g</code> repr\u00e9sent\u00e9 par liste d'adjacence ainsi qu'un entier <code>i</code> et renvoie le degre sortant de ce sommet.</p> </li> <li> <p>Ecrire une fonction <code>sucesseurs</code> qui prend en argument un graphe <code>g</code> repr\u00e9sent\u00e9 par liste d'adjacence ainsi qu'un entier <code>i</code> et renvoie la liste des successeurs de ce sommet.</p> </li> <li> <p>Ecrire une fonction <code>ronde</code> qui prend en entr\u00e9e un entier <code>n</code> et renvoie un graphe dans lequel chaque sommet <code>i</code> a un unique successeur : le sommet <code>i+1</code> modulo <code>n</code>. </p> </li> <li> <p>Ecrire une fonction qui <code>degre_entrant</code> qui prend en argument un graphe <code>g</code> repr\u00e9sent\u00e9 par liste d'adjacence ainsi qu'un entier <code>i</code> et renvoie le degre entrant de ce sommet.</p> </li> <li> <p>Ecrire une fonction <code>predecesseurs</code> qui prend en argument un graphe <code>g</code> repr\u00e9sent\u00e9 par une matrice d'adjacence ainsi qu'un entier <code>i</code> et renvoie la liste des predecesseurs de ce sommet.</p> </li> <li> <p>Reprendre les questions pr\u00e9c\u00e9dentes dans le cadre d'un graphe non orient\u00e9.</p> </li> </ol>"},{"location":"itc/graphes/#exercice-3-dune-representation-a-lautre","title":"Exercice 3 : D'une repr\u00e9sentation \u00e0 l'autre","text":"<ol> <li> <p>Ecrire une fonction <code>matrice_vers_liste</code> qui prend en entr\u00e9e un graphe repr\u00e9sent\u00e9 par une matrice d'adjacence (tel que dans l'exercice 1) et renvoie ce m\u00eame graphe repr\u00e9sent\u00e9 par liste d'adjacence (tel que dans l'exercice 2).</p> </li> <li> <p>Ecrire une fonction <code>liste_vers_matrice</code> qui prend en entr\u00e9e un graphe repr\u00e9sent\u00e9 par liste d'adjacence (tel que dans l'exercice 2) et renvoie ce m\u00eame graphe repr\u00e9sent\u00e9 par matrice d'adjacence (tel que dans l'exercice 1).</p> </li> </ol>"},{"location":"itc/graphes/#exercice-4-exercices-sur-codex","title":"Exercice 4 : Exercices sur Codex","text":"<p>Quelques exercices sur les graphes sur Codex</p> <ul> <li>Les amis de mes amis</li> <li>Abonn\u00e9s sur un r\u00e9seau social</li> <li>Motif de d\u00e9verrouillage d'un t\u00e9l\u00e9phone</li> </ul>"},{"location":"itc/images/","title":"C15 Manipulation d'images","text":""},{"location":"itc/images/#cours","title":"Cours","text":""},{"location":"itc/images/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"itc/introbd/","title":"C17 Introduction aux bases de donn\u00e9es","text":""},{"location":"itc/introbd/#cours","title":"Cours","text":"<p>Support de cours chapitre 17 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p> <p>Les exemples vu en cours s'appuient sur la base de donn\u00e9es suivante : M\u00e9dailles Olympiques 1976-2008 </p>"},{"location":"itc/introbd/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"itc/introbd/#exercice-1-dette-et-croissance","title":"Exercice 1 : Dette et croissance","text":"<ol> <li>T\u00e9l\u00e9charger les donn\u00e9es pr\u00e9sent\u00e9es dans la vid\u00e9o pr\u00e9c\u00e9dente sous la forme d'une base de donn\u00e9es :     Dette et Croissance  et l'ouvrir \u00e0 l'aide de <code>sqlitebrowser</code>. Cette base est compos\u00e9e d'une seule table :       RR  <code>Id</code><code>INTEGER</code> <code>Country</code><code>TEXT</code> <code>Year</code><code>INTEGER</code> <code>DebtToGDP</code><code>REAL</code> <code>Growth</code><code>REAL</code> <code>DebtCategory</code><code>INTEGER</code>      On pr\u00e9cise la signification des champs suivants :  <code>DebtToGDP</code> : la dette en pourcentage du pib. <code>Growth</code> : la croissance.</li> <li>Quelques requ\u00eates pour s'\u00e9chauffer<ol> <li>V\u00e9rifier comme indiqu\u00e9 dans la vid\u00e9o que les donn\u00e9es contiennent bien 20 pays. Les lister.</li> <li>V\u00e9rifier aussi que les ann\u00e9es vont de 1946 \u00e0 2009 comme indiqu\u00e9 dans la vid\u00e9o.</li> <li>Lister par ordre croissant les dix ann\u00e9es o\u00f9 la croissance a \u00e9t\u00e9 la plus faible en France.</li> <li>Lister les pays o\u00f9 la croissance a d\u00e9pass\u00e9 15 %</li> </ol> </li> <li> <p>Des op\u00e9rations sur les colonnes</p> <ol> <li> <p>Ecrire une requ\u00eate sql permettant d'obtenir le pays et l'ann\u00e9e o\u00f9 la dette a \u00e9t\u00e9 la plus importante en utilisant la fonction d'agr\u00e9gation max</p> <p>Note</p> <p>On pourrait aussi \u00e9crire une requ\u00eate de classe par ordre d\u00e9croissant associ\u00e9e \u00e0 une clause <code>LIMIT</code></p> </li> </ol> </li> <li> <p>Retrouver \u00e0 l'aide de sql les vraies valeurs de croissance moyenne en fonction de la cat\u00e9gorie de dette dans laquelle se trouve le pays et qu'on rappelle ci-dessous :</p> Cat\u00e9gorie Croissance moyenne 1 4,2 % 2 3,1 % 3 3,2 % 4 2,2 % </li> <li> <p>Les op\u00e9rations sur les colonnes sont particuli\u00e8rement utiles en lien avec la clause <code>GROUP BY</code>. Par exemple, si on souhaite obtenir la somme de la croissance pour chacun des 20 pays depuis 1970 : </p> <pre><code>    SELECT country, SUM(Growth) from RR WHERE Year&gt;=1970 GROUP BY Country\n</code></pre> <p>On peut m\u00eame renommer la  colonne <code>SUM(Growth)</code> des r\u00e9sultats gr\u00e2ce \u00e0 <code>AS</code> et donc l'utiliser comme crit\u00e8re de classement: </p> <p><code>sql         SELECT country, SUM(Growth) AS moy70 from RR WHERE Year&gt;=1970 GROUP BY Country ORDER BY moy70 DESC</code></p> <p>Ecrire une seule requ\u00eate permettant d'obtenir les taux de croissance moyenne pour chacune des cat\u00e9gories de dette.</p> </li> </ol>"},{"location":"itc/introbd/#exercice-2-prix-nobel","title":"Exercice 2 : Prix Nobel","text":"<ol> <li>T\u00e9l\u00e9charger ci-dessous une base de donn\u00e9es des Prix Nobel : Prix Nobel </li> <li>Ouvrir cette base avec <code>sqlitebrowser</code></li> <li>Dans Parcourir les donn\u00e9es prendre note du noms des colonnes et de leur signification. </li> <li>Ecrire les requ\u00eates sql permettant :<ol> <li>d'obtenir les cat\u00e9gories dans lesquelles sont attribu\u00e9es les prix Nobel,</li> <li>de lister par ordre alphab\u00e9tique les laur\u00e9ats du prix Nobel n\u00e9s en France ou travaillant pour une organisation Fran\u00e7aise,</li> <li>de lister les ann\u00e9es o\u00f9 le \"Comit\u00e9 international de la Croix Rouge\" a obtenu le prix Nobel,</li> <li>de conna\u00eetre le nombre de femmes ayant obtenu un prix Nobel,</li> <li>de lister par \u00e2ge d\u00e9croissant les laur\u00e9ats du prix Nobel qui sont toujours en vie,</li> <li>de rechercher les laur\u00e9ats dont le nom contient \"Curie\".</li> </ol> </li> </ol>"},{"location":"itc/introbd/#exercice-3-tremblements-de-terre","title":"Exercice 3 : Tremblements de terre","text":"<ol> <li>T\u00e9l\u00e9charger ci-dessous une base de donn\u00e9es des tremblements de terre : Tremblements de terre </li> <li>Ouvrir cette base avec <code>sqlitebrowser</code></li> <li>Dans Parcourir les donn\u00e9es prendre note du noms des colonnes et de leur signification. </li> <li> <p>Ecrire les requ\u00eates sql permettant :</p> <ol> <li>de lister  tremblements de terre qui se sont produits au Japon,</li> <li> <p>de lister les tremblements de terre qui se sont produits en l'an 2000 class\u00e9s par magnitude,</p> <p>Aide</p> <p>Remarquer que le champ <code>occured_on</code> qui indique la date est au format texte.</p> </li> </ol> </li> <li> <p>Utiliser cette base pour r\u00e9pondre aux questions suivantes :</p> <ol> <li> <p>les tremblements de terre sont-ils plus fr\u00e9quents dans l'h\u00e9misph\u00e8re nord ou l'h\u00e9misph\u00e8re sud ?</p> <p>Aide</p> <p>On rappelle que l'h\u00e9misph\u00e8re nord correspond \u00e0 une latitude positive et le sud \u00e0 une latitude n\u00e9gative.</p> </li> <li> <p>O\u00f9 \u00e9taient effectu\u00e9es les essais nucl\u00e9aires fran\u00e7ais ?</p> </li> <li> <p>L'un des s\u00e9isme de cette base de donn\u00e9es s'est-il produit \u00e0 proximit\u00e9 de l'\u00eele de la R\u00e9union ?</p> <p>Aide</p> <p>Rechercher la latitude et la longitude de l'\u00eele de R\u00e9union et consid\u00e9rer que \"\u00e0 proximit\u00e9\" signifie qu'on s'\u00e9carte de moins de 10 degr\u00e9s de latitude ou de longitude</p> </li> </ol> </li> </ol>"},{"location":"itc/introbd/#exercice-4-exercices-en-ligne","title":"Exercice 4 : Exercices en ligne","text":"<ol> <li> <p>Des exercices en lignes de requ\u00eates sur une seule table cr\u00e9es par N. Reveret. Ces exercices peuvent \u00eatre faits \u00e0 la maison (aucune installation n\u00e9cessaire) et les r\u00e9ponses sont fournis.</p> <ol> <li>Les pr\u00e9noms en France au XX-\u00e8me si\u00e8cle</li> <li>Ramens</li> </ol> </li> <li> <p>M\u00eame principe sur ce site de D. Quenton : Requ\u00eate sur une seule table (livres)</p> </li> <li> <p>M\u00eame principe sur ce site de Q. Fortier :</p> <ol> <li>M\u00e9tro parisien</li> <li>Pays</li> </ol> </li> <li> <p>Enfin, un site (en anglais) qui vous permettra de r\u00e9viser l'ensemble de ce chapitre en faisant les tutoriels de 1 \u00e0 5:</p> <ol> <li>Tutoriel 1 : introduction</li> <li>Tutoriel 2 : requ\u00eates avec conditions partie 1</li> <li>Tutoriel 3 : requ\u00eates avec conditions partie 2</li> <li>Tutoriel 4 : filtrage et tri des r\u00e9sultats</li> <li>Tutoriel 5 : exercice de synth\u00e8se</li> </ol> </li> </ol>"},{"location":"itc/jointures/","title":"C19 Requ\u00eates sur plusieurs tables","text":""},{"location":"itc/jointures/#cours","title":"Cours","text":"<p>Support de cours chapitre 19 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"itc/jointures/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"itc/jointures/#exercice-1-une-enquete-policiere-avec-sql","title":"Exercice 1 : Une enqu\u00eate polici\u00e8re avec SQL","text":"<p>Le but de cette activit\u00e9, propos\u00e9 sur le site de l'universit\u00e9 am\u00e9ricaine  Northwerstern University est de r\u00e9soudre un crime en utilisant des requ\u00eates SQL dans une base de donn\u00e9es dont voici le sch\u00e9ma relationnel : </p> <p>Toutes les requ\u00eates peuvent \u00eatre ex\u00e9cut\u00e9es directement sur le site, cependant vous pouvez t\u00e9l\u00e9charger ci-dessous la base afin d'ex\u00e9cuter vos requ\u00eates en local : SQL Murder Mystery </p> <p>Cliquer sur l'image ci-dessous pour acc\u00e9der \u00e0 l'enqu\u00eate et trouver le coupable. </p>"},{"location":"itc/jointures/#exercice-2-exercices-en-ligne-de-sql","title":"Exercice 2 : Exercices en ligne de SQL","text":"<ol> <li> <p>Des exercices en lignes de requ\u00eates sur plusieurs tables cr\u00e9es par N. Reveret. Ces exercices peuvent \u00eatre faits \u00e0 la maison (aucune installation n\u00e9cessaire) et les r\u00e9ponses sont fournies.</p> <ol> <li>Autour des films</li> <li>Voitures</li> <li>World</li> <li>Netflix</li> </ol> </li> <li> <p>M\u00eame principe sur ce site de Q. Fortier avec  bases de donn\u00e9es sur :</p> <ol> <li>Les concours</li> <li>Les Pok\u00e9mon</li> </ol> </li> </ol>"},{"location":"itc/jointures/#exercice-3-sql-island-un-jeu-de-role-en-sql","title":"Exercice 3 : SQL Island : un jeu de r\u00f4le en SQL","text":"<p>Un jeu de r\u00f4le en SQL o\u00f9 vous vous retrouvez seul sur une \u00eele apr\u00e8s un  crash d'avion (site d'une universit\u00e9 allemande)</p> <p>Aide</p> <p>Pour changer la langue (initialement en allemand), cliquer sur le menu (en haut et \u00e0 gauche de la page du jeu) puis s\u00e9lectionner le 4eme item.</p>"},{"location":"itc/knn/","title":"C20 k plus proches voisins, k-moyennes","text":""},{"location":"itc/knn/#cours","title":"Cours","text":"<p>Support de cours chapitre 20 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"itc/knn/#travaux-pratiques","title":"Travaux pratiques","text":"<p>Jeu de donn\u00e9es</p> <p>Quelques sites proposant des jeu de donn\u00e9es pour les algorithmes de classification :  </p> <ul> <li>Site de l'universit\u00e9 Irvine de Californie</li> <li>Kaggle</li> </ul>"},{"location":"itc/knn/#exercice-1-un-exemple-corrige-pour-knn","title":"Exercice 1 : Un exemple corrig\u00e9 pour knn","text":"<p>A propos des notebooks</p> <p>On utilise pour la premi\u00e8re fois les jupyter notebook, c'est-\u00e0-dire des documents contenant \u00e0 la fois :</p> <ul> <li>des zones de texte explicatives, </li> <li>des zones de code Python, executables directement \u00e0 la fa\u00e7on de ce qui se passe lorsqu'on utilise Python en mode console.</li> </ul> <p>A chaque fois, que nous utilisons cet outil, deux choix s'offrent \u00e0 vous :</p> <ol> <li> <p>l'utiliser localement sur votre ordinateur \u00e0 condition d'y avoir install\u00e9 jupyter notebook (c'est le cas sur les ordinateurs de la salle). Pour cela, cr\u00e9er un dossier nomm\u00e9 par exemple <code>Notebook</code> et depuis un terminal lancer jupyter dans ce dossier en \u00e9crivant simplement : <pre><code>jupyter notebook\n</code></pre> L'application se lance dans votre navigateur, t\u00e9l\u00e9charger le notebook et utiliser le bouton T\u00e9l\u00e9verser en haut \u00e0 droit pour le t\u00e9l\u00e9charger dans votre dossier et l'ouvrir.</p> </li> <li> <p>Utiliser l'application Capytale de votre environnement num\u00e9rique de travail metice. Dans ce cas, utiliser le lien de partage fourni dans l'activit\u00e9. Cette option vous permet notamment de travailler depuis la maison car aucune installation (ni de Python, ni de Jupyter) n'est n\u00e9cessaire.</p> </li> </ol> <p>Les activit\u00e9s utilisant un notebook proposerons donc toujours les deux options d\u00e9crites ci-dessus.</p> <ul> <li>T\u00e9l\u00e9charger le notebook pour l'utiliser en local (installation de jupyter n\u00e9cessaire)Notebook : Algorithme knn </li> <li>Utiliser l'application Capytale (aucune installation n\u00e9cessaire)</li> </ul> Correction <ul> <li>T\u00e9l\u00e9charger le notebook pour l'utiliser en local (installation de jupyter n\u00e9cessaire)Notebook : Correction Algorithme knn </li> <li>Utiliser l'application Capytale (aucune installation n\u00e9cessaire)</li> </ul>"},{"location":"itc/knn/#exercice-2-un-exemple-pour-k-moyenne","title":"Exercice 2 : Un exemple pour k-moyenne","text":"<ul> <li>T\u00e9l\u00e9charger le notebook pour l'utiliser en local (installation de jupyter n\u00e9cessaire)Notebook : Algorithme knn </li> <li>Utiliser l'application Capytale (aucune installation n\u00e9cessaire)</li> </ul>"},{"location":"itc/knn/#exercice-3-reconnaissance-de-langues","title":"Exercice 3 : Reconnaissance de langues","text":"<p>Le but de l'exercice est d'utiliser l'algorithme des \\(k\\) plus proches voisins afin de reconna\u00eetre une langue. On donne ci-dessous 3 fichiers contenant chacun 1100 phrases, ces phrases sont extraites d'oeuvres litt\u00e9raires c\u00e9l\u00e8bres qui sont dans le domaine public et gratuitement t\u00e9l\u00e9chargeable par exemple sur Gutenberg.</p> <ul> <li>Un fichier contenant  des phrases extraites du roman Les Mis\u00e9rables (V. Hugo) Phrases en fran\u00e7ais </li> <li>Un fichier contenant  des phrases extraites du roman Oliver Twist (C. Dickens) Phrases en anglais </li> <li>Un fichier contenant  des phrases extraites du roman Faust (J. Goethe) Phrases en allemand </li> </ul> <p>Attention</p> <p>Le texte original a \u00e9t\u00e9 pr\u00e9 trait\u00e9 :</p> <ul> <li>Les majuscules ont \u00e9t\u00e9 remplac\u00e9es par les minusucules correspondantes</li> <li>on a supprim\u00e9 les accents et les lettres ont \u00e9t\u00e9 transform\u00e9es en leur \u00e9quivalent non accentu\u00e9es par exemple les \"\\(\u00e9\\)\" sont des \"\\(e\\)\".</li> <li>les lettres ne figurant pas dans l'alphabet latin ont \u00e9t\u00e9 remplac\u00e9es par un \"\u00e9quivalent\" ainsi le \"\\(\u00e7\\)\" a \u00e9t\u00e9 remplac\u00e9 par \"\\(c\\)\" ou le \"\\(\\beta\\) de l'allemand par un \\(s\\).</li> </ul> <p>Le but de l'exercice est de mettre en oeuvre puis de tester une m\u00e9thode des \\(k\\) plus proches voisins afin de d\u00e9terminer la langue dans laquelle une phrase est \u00e9crite. </p> <ol> <li> <p>Afin de mesurer la proximit\u00e9 entre deux phrases, on propose d'utiliser les digrammes c'est \u00e0 dire les couples de deux lettres qui se suivent dans une phrase. Par exemple dans la phrase \"un petit test\", on trouve les digrammes : \"un\", \"pe\", \"et\", \"ti\", \"it\", \"te\", \"es\", \"st\". Et chacun de ces digrammes appara\u00eet une seule fois. Dans la phrase \"C'est ma maman !\" la bigramme \"ma\" appara\u00eet trois fois. Ecrire une fonction <code>cree_digramme</code> qui prend en argument une phrase et renvoie un dictionnaire dont les cl\u00e9s sont les digrammes que la phrase contient et les valeurs leur nombre d'apparition. Par exemple <code>cree_digramme(\"C'est ma maman !\")</code> va renvoyer le dictionnaire <code>{'es': 1, 'st': 1, 'ma': 3, 'am': 1, 'an': 1}</code>.</p> </li> <li> <p>Afin de mesurer la distance entre deux phrases, on mesure la distance entre leurs dictionnaires de digrammes (en faisant simplement la somme des valeurs absolus des diff\u00e9rences entre les nombres de digrammes). Par exemple, la distance entre <code>{'es': 1, 'st': 1, 'ma': 2}</code> et <code>{'et': 1, 'ti': 3, 'ma':2}</code> est 1 (<code>es</code>) + 1(<code>st</code>) + 1 (<code>et</code>) + 3 (<code>ti</code>) = 6. Ecrire la fonction <code>distance</code> qui prend en argument deux dictionnaires de digrammes et renvoie la distance entre ces deux dictionnaires.</p> </li> <li> <p>Les fichiers donn\u00e9s en introduction contiennent une phrase par ligne, \u00e9crire une fonction <code>lit_phrases</code> qui prend en argument un nom de fichier et une langue (<code>\"FR\",\"EN\", \"DE\"</code>) et renvoie une liste de phrases \u00e9tiquet\u00e9es avec leur langue. C'est \u00e0 dire une liste de tuples de la forme <code>(\"Un exemple de phrase\", \"FR\")</code>.</p> </li> <li> <p>Ecrire une fonction <code>knn</code> qui prend en argument une liste de phrases d\u00e9j\u00e0 \u00e9tiquet\u00e9es, une phrase <code>p</code> et un entier <code>k</code> et renvoie la langue majoritaire des <code>k</code> phrases les plus proches de <code>p</code>. Tester votre fonction sur quelques phrases de votre choix.</p> </li> <li> <p>S\u00e9parer les donn\u00e9es lues \u00e0 la question 3 de fa\u00e7on \u00e0 garder 100 phrases \u00e0 des fin de test. Et construire la matrice de confusion sur ces 100 tests.</p> </li> </ol>"},{"location":"itc/knn/#exercice-4-les-passagers-du-titanic","title":"Exercice 4 : Les passagers du titanic","text":"<p>Le but de l'exercice est d'utiliser un algorithme de classification pour pr\u00e9dire la survie des passagers du Titanic. Les donn\u00e9es sont \u00e0 r\u00e9cup\u00e9rer sur le site Kaggle et sont d\u00e9j\u00e0 s\u00e9par\u00e9es en deux parties :</p> <ul> <li>des donn\u00e9es d\u2019entra\u00eenements </li> <li>des donn\u00e9es de test</li> </ul> <p>Les donn\u00e9es sont au format <code>csv</code> et le d\u00e9tail des champs est donn\u00e9 sur Kaggle.</p> <p>Aide</p> <p>On pourra bien s\u00fbr commencer par \u00e9crire :</p> <ul> <li>une fonction permettant de lire les donn\u00e9es et de les r\u00e9cup\u00e9rer dans un format exploitable</li> <li>une fonction permettant de calculer une distance entre deux passager</li> </ul>"},{"location":"itc/knn/#exercice-5-reconnaissance-de-chiffres-manuscrits","title":"Exercice 5 : Reconnaissance de chiffres manuscrits","text":"<p>Une des plus c\u00e9l\u00e8bres bases de donn\u00e9es de chiffres manuscrits utilis\u00e9e pour tester les algorithmes de classification est celle du mnist. Cette base de donn\u00e9e est disponible sur le site de Yann LeCun et se compose d'un ensemble de 60000 images d\u00e9j\u00e0 class\u00e9s et d'un ensemble de 10000 images pour les tests. </p> <p>Etant donn\u00e9e sa taille importante, les images et leur classification sont dans un format binaire appel\u00e9 <code>idx</code> non directement exploitable. Cependant vous trouverez ci-dessous un extrait de cette base constitu\u00e9 de 5000 images : Chiffres  Les images du fichier pr\u00e9c\u00e9dent sont au format <code>PGM</code> bien plus facilement lisible et exploitable \u00e0 notre niveau. En effet, chaque image est un fichier texte contenant :</p> <ul> <li>sur la premi\u00e8re ligne on trouve on code (\"magic number\") qui indique le format de l'image PGM ici c'est <code>P2</code></li> <li>sur la seconde ligne on trouve les dimensions de l'image :<code>28 28</code> (les images  sont toutes carr\u00e9s de 28 pixels de c\u00f4t\u00e9)</li> <li>sur la troisi\u00e8me ligne le <code>255</code> est le niveau de couleur maximal d'un pixel, ici 0 correspond donc au noir, 255 au blanc.</li> <li>sur la quatri\u00e8me on trouve la valeur du chiffre manuscrit pr\u00e9c\u00e9d\u00e9 de <code>#</code> (c'est en commentaire)</li> <li>les 28 lignes suivantes sont les pixels de l'image et sont donc compos\u00e9es chacune de 28 nombres indiquant le niveau de gris de l'image.</li> </ul> <p>A titre d'exemple le premi\u00e8re image ci-dessous (celle de num\u00e9ro 42 commence par les lignes suivantes :) Le but de l'exercice est de tester les deux algorithmes de classification vus en cours sur cet exemple.</p> <ol> <li> <p>T\u00e9l\u00e9charger le fichier, le d\u00e9compresser et visualiser quelques images. V\u00e9rifier en comparant avec les exemples suivants :</p> Num\u00e9ro Image Chiffre 42 8 1515 7 2023 1 </li> <li> <p>Ecrire une fonction <code>lire_image</code> qui prend en argument le num\u00e9ro d'une image et renvoie un tuple compos\u00e9 du chiffre de l'image et d'une liste repr\u00e9sentant les niveaux de gris des pixels de l'image (cette liste sera donc constitu\u00e9 de <code>28x28</code> nombres entiers compris entre 0 et 255). </p> <p>Aide</p> <p>On rappelle que :</p> <ul> <li>l'image est au fichier texte,</li> <li>le chiffre se trouve sur la quatri\u00e8me ligne et qu'il est pr\u00e9c\u00e9d\u00e9 du caract\u00e8re <code>#</code></li> <li>les niveaux de gris de chaque pixel sont sur les lignes suivantes.</li> </ul> </li> <li> <p>Ecrire une fonction <code>distance</code> qui permet de calculer le carr\u00e9 de la distance euclidienne entre deux images de dimension <code>28x28</code>.</p> </li> <li> <p>Mettre en oeuvre la m\u00e9thode des k plus proches voisins sur cet exemple en utilisant les 4500 premi\u00e8res images comme image d\u00e9j\u00e0 class\u00e9es et en utilisant les 500 suivantes pour les tests.</p> <p>Aide</p> <p>On pourra tester diff\u00e9rentes valeurs de k et choisir une distance diff\u00e9rente</p> </li> <li> <p>Mettre en oeuvre la m\u00e9thode des k-moyennes pour classer les 5000 donn\u00e9es.</p> </li> <li> <p>Comparer les r\u00e9sultats des deux m\u00e9thodes.</p> </li> </ol>"},{"location":"itc/listes/","title":"C2 Listes","text":""},{"location":"itc/listes/#retour-sur-les-chaines-de-caracteres","title":"Retour sur les chaines de caract\u00e8res","text":"<p>On a d\u00e9j\u00e0 rencontr\u00e9 les chaines de caract\u00e8res en Python, elles s'\u00e9crivent entre guillemets (<code>\"</code>) ou apostrophes (<code>'</code>) et sont constitu\u00e9es d'une s\u00e9quence de caract\u00e8res auxquels on peut acc\u00e9der directement gr\u00e2ce \u00e0 leur indice (ou index) c'est-\u00e0-dire leur num\u00e9ro \u00e0 partir de 0 en utilisant la notation <code>[]</code>. Par exemple, <pre><code>exemple = \"L'informatique c'est fantastique !\"\na = exemple[0] # a vaut 'L' (le premier caract\u00e8re)\nb = exemple[3] # a vaut 'n' (le quatri\u00e8me caract\u00e8re)\n</code></pre> D'autre part, la longueur d'une chaine de caract\u00e8res (c'est-\u00e0-dire le nombre de caract\u00e8res qu'elle contient) s'obtient avec la fonction <code>len</code>. Par exemple <code>len(\"PCSI\")</code> vaut 4. Les indices des caract\u00e8res d'une chaine <code>c</code> vont de <code>0</code> \u00e0 <code>len(c)-1</code>. Un acc\u00e8s au-del\u00e0 de l'indice <code>len(c)-1</code> provoquera une erreur (<code>IndexError</code>).</p> <p>Note</p> <p>On retiendra notamment que le dernier caract\u00e8re d'une chaine <code>c</code> est celui d'indice <code>len(c)-1</code></p> <p>Danger</p> <p>Les valeurs n\u00e9gatives d'indice sont accept\u00e9es en Python et sont alors consid\u00e9r\u00e9s comme une num\u00e9rotation \u00e0 partir de \\(-1\\) et depuis la fin de la chaine. c'est-\u00e0-dire que <code>c[-1]</code> est le dernier caract\u00e8re de la chaine c, <code>c[-2]</code> son avant dernier, etc .. Cette notation n'est pas au programme et ne sera pas utilis\u00e9e dans le cadre de ce cours.</p> <p>L'acc\u00e8s aux caract\u00e8res via la notation <code>[]</code> associ\u00e9 \u00e0 une boucle <code>for</code>, permet d'effectuer un parcours d'une chaine de caract\u00e8res afin de \"s\u00e9lectionner\" un \u00e0 un les caract\u00e8res et \u00e9ventuellement d'effectuer un traitement sur ces caract\u00e8res. Typiquement, sur une chaine <code>c</code>, cette boucle prend la forme suivante : <code>for i in range(len(c))</code> puisqu'alors la variable <code>i</code> prend les valeurs allant de 0 \u00e0 <code>len(c)-1</code> (inclus) ce qui correspond bien aux domaine valide des indices d'une chaine \u00a0<code>c</code>.</p> <p>Par exemple, supposons qu'on veuille \u00e9crire une fonction permettant de compter le nombre de voyelles dans une chaine de caract\u00e8res (\u00e9crite en majuscules), on pourrait \u00e9crire :</p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur"},{"location":"itc/listes/#exercice-1-test-de-presence","title":"Exercice 1 : Test de pr\u00e9sence","text":"<ol> <li> <p>Ecrire une fonction <code>est_dans</code> qui prend en argument une chaine de caract\u00e8res <code>chaine</code> et un caract\u00e8re <code>c</code> et qui renvoie <code>True</code> si \u00a0<code>c</code> est dans chaine et <code>False</code> sinon.</p> <p>Aide</p> <p>On rappelle que l'instruction <code>return</code> permet de quitter imm\u00e9diatement une boucle.</p> </li> <li> <p>Mofifier la fonction pr\u00e9c\u00e9dente afin qu'elle renvoie l'indice de la premi\u00e8re occurence de \u00a0<code>c</code> dans <code>chaine</code> ou \\(-1\\) si <code>c</code> n'appara\u00eet pas dans chaine.</p> </li> </ol>"},{"location":"itc/listes/#exercice-2-nombre-doccurences","title":"Exercice 2 : Nombre d'occurences","text":"<p>Ecrire une fonction <code>compte_occurence</code> qui prend en argument une chaine de caract\u00e8res <code>chaine</code> et un caract\u00e8re <code>c</code> et qui renvoie le nombre d'apparitions de <code>c</code> dans <code>chaine</code>. Par exemple <code>compte_occurence(\"magnifique\",\"i\")</code> renvoie 2.</p>"},{"location":"itc/listes/#exercice-3-somme-des-codes","title":"Exercice 3 : Somme des codes","text":"<p>En informatique, chaque caract\u00e8re est associ\u00e9 \u00e0 un entier : son code unicode, par exemple le code unicode du caract\u00e8re <code>A</code> est 65. En Python, pour obtenir le code unicode d'un caract\u00e8re on utilise la fonction <code>ord</code>, ainsi <code>ord('A')</code> vaut 65. D\u00e9terminer la somme de tous les codes unicode des caract\u00e8res de la phrase \"L'informatique en PCSI, c'est vraiment le top !\" ? Attention : les guillemets ne font pas partie de la phrase. </p> <p>Remarques</p> <ul> <li>En tapant <code>ord(\"A\")</code> dans le terminal ci-dessous vous pouvez v\u00e9rifier qu'on obtient bien 65.</li> <li>L'unicode \u00e9tend le code ascii qui est parfois plus connu. En effet, lorsque le code ascii d'un caract\u00e8re existe, il correspond \u00e0 son code unicode. Ainsi le code ascii de <code>A</code> existe (et vaut donc aussi 65), mais <code>\u00f9</code> n'est pas un caract\u00e8re ascii et n'a donc pas de code ascii mais a bien un code unicode : 249.</li> </ul> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur <p>V\u00e9rifier votre r\u00e9ponse :   </p>"},{"location":"itc/listes/#exercice-4-caracteres-identiques","title":"Exercice 4 : Caract\u00e8res identiques","text":"<p>Ecrire une fonction <code>identiques</code> qui prend en argument deux chaines de caract\u00e8res <code>c1</code> et <code>c2</code> et renvoie le nombre de fois o\u00f9 <code>c1</code> et <code>c2</code> ont le m\u00eame caract\u00e8re au m\u00eame indice. Par exemple <code>identiques(\"python\",\"poterie\")</code> renvoie 2 car ces deux chaines co\u00efndicent \u00e0 l'indice <code>0</code> (un <code>p</code>) et \u00e0 l'indice <code>2</code> (un <code>t</code>).</p> <p>Important</p> <p>A noter qu'on peut acc\u00e9der aux caract\u00e8res d'une chaine mais pas les modifier ! Par exemple l'instruction de la ligne 2 ci-dessous provoque une erreur : <code>TypeError: 'str' object does not support item assignment</code> <pre><code>exemple = \"python\"\n# On essaye de mettre une majuscule donc de remplacer le \"p\" par \"P\"\nexemple[0] = \"P\"\n</code></pre></p>"},{"location":"itc/listes/#tranches","title":"Tranches","text":"<p>Une tranche (en anglais slice) d'une chaine de caract\u00e8res s'obtient en donnant les indices de d\u00e9part (compris) et de fin (exclu) s\u00e9par\u00e9 par le caract\u00e8re <code>:</code> entre crochets. Par exemple, si on consid\u00e8re la chaine <code>exemple = 'Bonjour'</code> dont on donne les indices des caract\u00e8res ci-dessous :</p> 'B''o''n''j''o''u''r'0123456 <ul> <li><code>exemple[0:3]</code> vaut <code>\"Bon\"</code></li> <li><code>exemple[3:7]</code> vaut <code>\"jour\"</code></li> <li><code>exemple[3:5]</code> vaut <code>\"jo\"</code></li> </ul> <p>A noter que :</p> <ul> <li>si le d\u00e9but de tranche n'est pas pr\u00e9cis\u00e9 alors la tranche d\u00e9marre au d\u00e9but de la chaine, par exemple <code>exemple[:5]</code> vaut <code>\"Bonjo\"</code></li> <li>si la fin de la tranche n'est pas pr\u00e9cis\u00e9e alors elle se termine \u00e0 la fin de la chaine, par exemple <code>exemple[4:]</code> vaut <code>\"our\"</code></li> <li>et donc en pr\u00e9cisant ni le d\u00e9but ni la fin, la tranche est la chaine compl\u00e8te, par exemple <code>exemple[:]</code> vaut <code>\"Bonjour\"</code></li> </ul> <p>De la m\u00eame fa\u00e7on que l'instruction <code>range</code>, une tranche accepte un troisi\u00e8me param\u00e8tre optionnel qui indique un pas de progression dans la r\u00e9cup\u00e9ration des caract\u00e8res de la chaine. Par exemple, <code>exemple[::2]</code> vaut <code>\"Bnor\"</code> car on ne r\u00e9cup\u00e8re que les caract\u00e8res situ\u00e9s aux indices <code>0, 2, 4</code> et <code>6</code>.</p> <p>Note</p> <p>Les pas n\u00e9gatifs sont possibles, par cons\u00e9quent <code>exemple[::-1]</code> signifie par exemple r\u00e9cup\u00e9rer tous les caract\u00e8res \u00e0 partir de la fin jusqu'au d\u00e9but et donc inverse l'ordre des caract\u00e8res pour cr\u00e9er une nouvelle chaine qui  vaut <code>\"ruojnoB\"</code>.</p>"},{"location":"itc/listes/#exercice-5-extraire-des-tranches","title":"Exercice 5 : Extraire des tranches","text":"###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur"},{"location":"itc/listes/#tuples","title":"Tuples","text":"<p>De la m\u00eame fa\u00e7on, qu'une chaine de caract\u00e8res est une s\u00e9quence de caract\u00e8res rep\u00e9r\u00e9s par des indices, un tuple est une s\u00e9quence de valeur (de type quelconque) rep\u00e9r\u00e9 par des indices. Par exemple :</p> <ul> <li><code>coordonnees = (3.2, -5.8, 7.0)</code></li> <li><code>notes = (12, 4, 7, 11, 13, 15)</code></li> <li><code>anniversaire = (31, \"Janvier\", 1956)</code></li> <li><code>voyelles = (\"a\",\"e\",\"i\",\"o\",\"u\",\"y\")</code></li> <li><code>reponses = (True, False, False, True, False)</code></li> </ul> <p>Les \u00e9l\u00e9ments d'un tuple peuvent donc \u00eatre de n'importe quel type et comme dans le troisi\u00e8me exemple \u00eatre de types diff\u00e9rents.</p> <p>Ce qui a \u00e9t\u00e9 vu sur les chaines de caract\u00e8res reste en grande partie valide sur les tuples, notamment :</p> <ul> <li>on acc\u00e8de aux \u00e9l\u00e9ments d'un tuple avec la notation <code>[]</code>, on peut donc parcourir les \u00e9l\u00e9ments d'un tuple \u00e0 l'aide d'une boucle <code>for</code>. Par, exemple <code>mois = anniversaire[1]</code></li> <li>on ne peut pas modifier les \u00e9l\u00e9ments d'un tuple. Par exemple <code>anniversaire[1] = 1</code> provoque une erreur <code>TypeError</code></li> <li>la fonction <code>len</code> renvoie le nombre de valeurs pr\u00e9sentes dans le tuple. Par exemple <code>len(anniversaire)</code> renvoie 3.</li> <li>la syntaxe des tranches est identique mais une tranche de tuple est un tuple. Par exemple <code>notes[:3]</code> renvoie <code>(12,4,7)</code>.</li> </ul> <p>La particularit\u00e9 des tuples est de pouvoir \u00eatre d\u00e9compact\u00e9 afin que chaque \u00e9l\u00e9ment soit affect\u00e9 \u00e0 une valeur, par exemple :</p> <ul> <li><code>x, y, z = coordonnees</code> va affecter <code>3.2</code> \u00e0 <code>x</code>, <code>-5.8</code> \u00e0 <code>y</code> et <code>7.0</code> \u00e0 <code>z</code></li> <li><code>mois, jour, annee = anniversaire</code> va affecter <code>31</code> \u00e0 jour, <code>\"Janvier\"</code> \u00e0 <code>mois</code> et <code>1956</code> \u00e0 <code>annee</code>.</li> </ul> <p>Danger</p> <p>D\u00e9compacter un tuple sans pr\u00e9voir autant de variables que d'\u00e9l\u00e9ments dans le tuple provoque une erreur <code>ValueError</code>.</p>"},{"location":"itc/listes/#exercice-6-moyenne-dun-tuple","title":"Exercice 6 : Moyenne d'un tuple","text":"<p>Ecrire une fonction prenant en argument un tuple d'entiers de longueur strictement positive et qui renvoie la moyenne des valeurs de ce tuple.</p>"},{"location":"itc/listes/#iterables","title":"It\u00e9rables","text":"<p>Les chaines de caract\u00e8res et les tuples sont tous deux des it\u00e9rables de Python c'est-\u00e0-dire qu'on peut les parcourir directement \u00e0 l'aide d'une boucle <code>for</code> qui prend alors la syntaxe suivante : <code>for &lt;element&gt; in &lt;iterable&gt;</code>, notez bien l'absence de <code>range</code>. Dans ce cas, la variable de parcours n'est pas un entier (contrairement \u00e0 la version avec <code>range</code>) mais directement les valeurs de l'it\u00e9rable. </p> <p>A retenir</p> <ul> <li>Avec la syntaxe <code>for &lt;indice&gt; in range(&lt;entier&gt;)</code>, on effectue le parcours d'un it\u00e9rable par indice.</li> <li>Avec la syntaxe <code>for &lt;element&gt; in &lt;iterable&gt;</code>, on effectue le parcours d'un it\u00e9rable par valeur.</li> <li>Exemples :  <ul> <li><code>for i in range(len(\"Bonjour\"))</code>, la variable de parcours est l'indice des caract\u00e8res successif de la chaine et donc prend les valeurs <code>0,1,...,6</code></li> <li><code>for lettre in \"Bonjour\"</code>, la variable de parcours est directement un caract\u00e8re de la chaine et donc prend les valeurs <code>'B', 'o', ..., 'r'</code></li> </ul> </li> </ul>"},{"location":"itc/listes/#exercice-7-faire-un-parcours-par-element","title":"Exercice 7 : Faire un parcours par \u00e9l\u00e9ment","text":"<p>Reprendre les deux exercices ci-dessous en effectuant obligatoirement un parcours par \u00e9l\u00e9ment dans l'\u00e9criture de la fonction.</p> <ol> <li> <p>Ecrire une fonction <code>est_dans</code> qui prend en argument une chaine de caract\u00e8res <code>chaine</code> et un caract\u00e8re <code>c</code> et qui renvoie <code>True</code> si \u00a0<code>c</code> est dans cha\u00eene et <code>False</code> sinon. </p> </li> <li> <p>Ecrire une fonction prenant en argument un tuple d'entiers de longueur strictement positive et qui renvoie la moyenne des valeurs de ce tuple.</p> </li> </ol>"},{"location":"itc/listes/#les-listes-de-python","title":"Les listes de Python","text":"<p>Les listes de Python sont des s\u00e9quences de valeurs modifiables rep\u00e9r\u00e9es (comme les tuples et les chaines de caract\u00e8res) par leur indice. Elles se notent entre crochets et les valeurs sont s\u00e9par\u00e9es par des virgules. Par exemple,</p> <ul> <li><code>temperatures = [24, 26, 26, 28, 28, 30, 29, 27, 27]</code></li> <li><code>anniversaire = [23, \"Juin\", 1912]</code></li> <li><code>points = [(\"A\",-2,3),(\"B\",2,7),(\"C\",1,0)]</code></li> </ul> <p>On retrouve sur les listes les m\u00eames fonctionnalit\u00e9s vu sur les tuples (et les chaines de caract\u00e8res) :</p> <ul> <li>longueur avec <code>len</code></li> <li>acc\u00e8s \u00e0 l'\u00e9l\u00e9ment d'indice <code>i</code> de la liste <code>l</code> gr\u00e2ce \u00e0 la syntaxe <code>l[i]</code></li> <li>syntaxe d'extraction des tranches</li> <li>parcours par \u00e9l\u00e9ment avec <code>in</code> ou parcours par indice avec <code>range</code></li> </ul> <p>De plus au contraire des tuples, les valeurs pr\u00e9sentes dans une liste sont modifiables, par exemple : <pre><code>courses = [\"oignons\", \"chips\", \"oranges\", \"sel\", \"poivre\"]\n# finalement on prend des cacahu\u00e8tes \u00e0 la place des chips :\ncourses[1] = \"cacahu\u00e8tes\"\n</code></pre></p> <p>D'autre part les deux op\u00e9rations suivantes sont possibles sur les listes (on fera bien attention \u00e0 la syntaxe et notamment \u00e0 l'absence de <code>=</code>) :</p> <ul> <li>ajouter un \u00e9l\u00e9ment \u00e0 la fin de la liste gr\u00e2ce \u00e0 <code>append</code>, pour ajouter <code>x</code> \u00e0 la fin de la liste <code>l</code>, on \u00e9crit <code>l.append(x)</code></li> <li>supprimer le dernier \u00e9l\u00e9ment d'un liste gr\u00e2ce \u00e0 <code>pop</code>, pour supprimer le dernier \u00e9l\u00e9ment de la liste <code>l</code>, on \u00e9crit <code>l.pop()</code></li> <li>l'instruction pr\u00e9c\u00e9dente (c'est-\u00e0-dire <code>l.pop()</code>) renvoie l'\u00e9l\u00e9ment supprim\u00e9, on peut donc le r\u00e9cup\u00e9rer par exemple pour l'affecter \u00e0 une variable et \u00e9crire par exemple : <code>dernier = l.pop()</code></li> </ul>"},{"location":"itc/listes/#exercice-8-manipulation-de-liste","title":"Exercice 8 : Manipulation de liste","text":"<p>On consid\u00e8re la liste de courses ci-dessous :</p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur <ol> <li>En utilisant la notation <code>[]</code>, remplacer les oranges par des pommes.</li> <li>Ecrire une instruction permettant d'ajouter <code>\"riz\"</code> \u00e0 cette liste.</li> <li>Ecrire les instructions permettant de supprimer l'avant-dernier \u00e9l\u00e9ment de cette liste.</li> </ol>"},{"location":"itc/listes/#mutables","title":"Mutables","text":"<p>En Python, on manipule des objets c'est \u00e0 dire des associations entre des noms (des \u00e9tiquettes) et des variables (un type, une valeur, un emplacement en m\u00e9moire). Certains objets sont dits non mutables, cela signifie qu'ils ne peuvent pas \u00eatre modifi\u00e9s. C'est le cas par exemple des entiers, ainsi lorsqu'on \u00e9crit les lignes de code suivantes : <pre><code>n = 7 \nm = n\nn = n + 1\n</code></pre> Le m\u00e9canisme interne de python consiste \u00e0 :</p> <ul> <li>ligne 1 : cr\u00e9er un objet entier 7 et lui donner l'\u00e9tiquette <code>n</code></li> <li>ligne 2 : attribuer une nouvelle \u00e9tiquette \u00e0 l'objet pr\u00e9c\u00e9dent : <code>m</code></li> <li>ligne 3 : <code>n+1</code> cr\u00e9e un nouvel objet entier de valeur 8, on lui donne l'\u00e9tiquette <code>n</code></li> </ul> <p>Comme les entiers, les flottants, les tuples et les chaines de caract\u00e8res sont non mutables. Par contre les listes sont mutables, ce qui signifie que l'objet liste peut-\u00eatre modifi\u00e9, ainsi :</p> <pre><code>l = [1, 7]\nm = l\nl.append(12)\n</code></pre> <p>le m\u00e9canisme interne \u00e0 Python consiste \u00e0 :</p> <ul> <li>ligne 1 : cr\u00e9er un objet liste contenant <code>[1,7]</code> et d'\u00e9tiquette <code>l</code> (on dit aussi r\u00e9f\u00e9rence)</li> <li>ligne 2 : attribuer une nouvelle \u00e9tiquette <code>m</code> \u00e0 ce m\u00eame objet</li> <li>ligne 3 : modifier ce nouvel objet. Et donc <code>m</code> r\u00e9f\u00e9rence aussi la liste <code>[1, 7, 2]</code></li> </ul>"},{"location":"itc/listes/#generations-de-listes","title":"G\u00e9n\u00e9rations de listes","text":"<p>On peut cr\u00e9er une liste :</p> <ul> <li>en donnant explicitement la liste de ses \u00e9l\u00e9ments, par exemple <code>amis = [\"Pierre\", \"Paul\", \"Alice\", \"Bob\"]</code></li> <li> <p>lorque la liste est compos\u00e9e de le r\u00e9p\u00e9tition du m\u00eame \u00e9l\u00e9ment on peut utiliser <code>*</code> \u00e0 la fa\u00e7on de ce qui a \u00e9t\u00e9 vu sur les chaines de caract\u00e8res, par exemple <code>zeros = [0] * 10</code> cr\u00e9e une liste contenant 10 z\u00e9ros.     !!! danger</p> </li> <li> <p>par ajouts successifs d'\u00e9l\u00e9ments \u00e0 l'aide de <code>append</code></p> </li> <li>par compr\u00e9hension c'est-\u00e0-dire en indiquant \u00e0 l'aide d'une boucle <code>for</code> les \u00e9l\u00e9ments qui composent la liste (\u00e0 la fa\u00e7on dont on d\u00e9finit parfois des ensembles en math\u00e9matiques). Par exemple <code>entiers = [i for i in range(10)]</code> cr\u00e9e la liste <code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code>.</li> </ul>"},{"location":"itc/listes/#exercice-9-creation-de-listes","title":"Exercice 9 : Cr\u00e9ation de listes","text":"<ol> <li> <p>Cr\u00e9er la liste des carr\u00e9s des entiers de 1 \u00e0 10 par ajouts successifs (utiliser une boucle <code>for</code>).</p> </li> <li> <p>Cr\u00e9er la liste des carr\u00e9s des entiers de 1 \u00e0 10 par compr\u00e9hension.</p> </li> <li> <p>Cr\u00e9er la liste des entiers impairs de 1 \u00e0 99 par ajouts successifs</p> </li> <li> <p>Cr\u00e9er la liste des entiers impairs de 1 \u00e0 99 par compr\u00e9hension</p> </li> <li> <p>Cr\u00e9er une liste contenant 20 fois <code>\"Python\"</code></p> </li> </ol>"},{"location":"itc/listes/#importation-de-fonctions-en-python","title":"Importation de fonctions en Python","text":"<p>On peut importer une fonction <code>f</code> se trouvant dans une librarie <code>lib</code> gr\u00e2ce \u00e0 la syntaxe : <code>from lib import f</code>. Par exemple la fonction racine carr\u00e9e, <code>sqrt</code> n'existe pas nativement mais peut \u00eatre import\u00e9e depuis la librairie <code>math</code> \u00e0 l'aide de <code>from math import sqrt</code>.</p> <p>On peut aussi importer la totalit\u00e9 de la librairie <code>lib</code> avec <code>import lib</code>, par exemple, pour importer la totalit\u00e9 de la librairie <code>math</code> on \u00e9crit simplement <code>import math</code>. Dans ce cas toutes les fonctions de la librairie sont accessibles mais on doit les nommer en les pr\u00e9fixant par le nom de la librairie, ici on pourrait donc calculer la racine carr\u00e9e de 10 avec <code>racine10 = math.sqrt(10)</code>.</p>"},{"location":"itc/listes/#cours","title":"Cours","text":"<p>Fiche de cours chapitre 2 </p>"},{"location":"itc/listes/#exercices-de-synthese","title":"Exercices de synth\u00e8se","text":""},{"location":"itc/listes/#exercice-10-generation-de-listes-en-python","title":"Exercice 10 : G\u00e9n\u00e9ration de listes en Python","text":"<ol> <li> <p>On consid\u00e8re le programme suivant : <pre><code>liste1 = [0]*100\nliste2 = [0 for k in range(100)]\nliste3 = []\nfor k in range(100):\n    liste3.append(0)\n</code></pre></p> <ol> <li>Quel est le contenu de chacune des listes ?</li> <li>Indiquer par quel proc\u00e9d\u00e9 chacune de ces listes a \u00e9t\u00e9 cr\u00e9e.</li> </ol> </li> <li> <p>Ecrire un programme python permettant de cr\u00e9er les listes suivantes :</p> <ol> <li>Une liste contenant 12 fois le chiffre 7.</li> <li>La liste des nombres entiers de 1 \u00e0 100.</li> <li> <p>Une liste contenant 1000 nombres tir\u00e9s au sort entre 1 et 6.</p> <p>Aide</p> <p>On rappelle que la fonction <code>randint</code> peut \u00eatre import\u00e9e depuis le module <code>random</code>, elle permet de tirer un nombre en deux valeurs <code>a</code> et <code>b</code> donn\u00e9es en param\u00e8tres.</p> </li> <li> <p>La liste des cubes des entiers de 1 \u00e0 10.</p> </li> </ol> </li> </ol>"},{"location":"itc/listes/#exercice-11-parcours-de-listes-en-python","title":"Exercice 11 : Parcours de listes en Python","text":"<p>On suppose qu'on dispose d'une liste de notes, on veut \u00e9crire une fonction qui renvoie le nombres de notes qui sont en dessous de la moyenne. </p> <ol> <li> <p>On consid\u00e8re une premi\u00e8re version de cette fonction : <pre><code>def inferieur_moyenne(liste_notes):\n    nb = 0\n    for note in liste_notes:\n        if .....:\n            nb = .......\n    return ...\n</code></pre></p> <ol> <li>Recopier et compl\u00e9ter cette fonction</li> <li>Tester cette fonction </li> </ol> </li> <li> <p>Voici une deuxi\u00e8me version de cette fonction : <pre><code>def inferieur_moyenne(liste_notes):\n    nb = 0\n    for indice in ........:\n        if ........... : \n            nb = .......\n    return ...\n</code></pre></p> <ol> <li>Recopier et compl\u00e9ter cette fonction</li> <li>Tester cette fonction</li> </ol> </li> <li> <p>Quelle est la diff\u00e9rence principale entre ces deux versions de la m\u00eame fonction ?</p> </li> <li> <p>Ecrire les fonctions suivantes :</p> <ol> <li><code>somme_liste</code> qui prend comme argument une liste non vide de nombres et renvoie la somme de ces nombres.</li> <li><code>moyenne_liste</code> qui prend comme argument une liste non vide de nombres et renvoie la moyenne de ces nombres.</li> <li><code>max_liste</code> qui prend comme argument une liste non vide de nombres et renvoie le plus grand de ces nombres.</li> <li><code>min_liste</code> qui prend comme argument une liste non vide de nombres et renvoie le plus petit de ces nombres.</li> </ol> </li> </ol>"},{"location":"itc/listes/#exercice-12-recherche-doccurences","title":"Exercice 12 : Recherche d'occurences","text":"<ol> <li>Ecrire une fonction <code>present</code> qui prend en argument un el\u00e9ment <code>elt</code> et une liste <code>liste</code>   et qui renvoie <code>True</code> si <code>elt</code> se trouve dans la liste <code>liste</code> et <code>False</code> sinon. Par exemple <code>present(3,[1,4,5])</code> renvoie <code>False</code>, par contre <code>present(4,[1,4,5])</code> renvoie <code>True</code>.</li> <li>Tester cette fonction</li> <li>Ecrire une fonction <code>occurence</code> qui renvoie le nombre de fois o\u00f9 <code>elt</code> appara\u00eet dans <code>liste</code>.</li> <li>Ecrire une fonction <code>indice</code> qui renvoie l'indice de la premi\u00e8re apparition d'<code>elt</code>dans <code>liste</code>. On renvoie \\(-1\\) si <code>elt</code> ne se trouve pas dans <code>liste</code>.</li> </ol>"},{"location":"itc/listes/#exercice-13-evolution-dune-chaine-de-caracteres","title":"Exercice 13 : Evolution d'une chaine de caract\u00e8res","text":"<p>On consid\u00e8re une chaine de caract\u00e8res initialement constitu\u00e9e de \\(k\\) caract\u00e8res <code>.</code> suivie d'un caract\u00e8re <code>#</code> puis de \\(k\\) caract\u00e8res <code>.</code>. Par exemple pour \\(k=5\\) la chaine est <code>.....#.....</code> (5 <code>.</code> suivi d'un <code>#</code> puis de 5 <code>.</code>). Cette chaine \u00e9volue de la fa\u00e7on suivante :</p> <ul> <li>si un <code>.</code> est entre un <code>#</code> et un <code>.</code>, il se transforme en <code>#</code> sinon il reste un <code>.</code></li> <li>si un <code>#</code> est entre deux <code>#</code> ou s'il a un <code>#</code> \u00e0 sa gauche et un <code>.</code> \u00e0 sa droite, il se transforme en <code>.</code> sinon il reste un <code>#</code></li> <li>le premier et le dernier caract\u00e8re ayant un seul voisin, ils ne sont pas affect\u00e9s par ces r\u00e8gles d'\u00e9volutions et restent toujours des <code>.</code></li> </ul> <p>Par exemple dans le cas \\(k=5\\) : les \u00e9tapes successives d'\u00e9volution sont :</p> <ul> <li><code>.....#.....</code> (\u00e9tat initial :)</li> <li><code>....###....</code> (\u00e9tape 1)</li> <li><code>...##..#...</code> (\u00e9tape 2)</li> <li><code>..##.####..</code> (\u00e9tape 3)</li> <li><code>.##..#...#.</code> (\u00e9tape 4)</li> <li><code>.#.####.##.</code> (\u00e9tape 5)</li> </ul> <p>Dans le cas \\(k=256\\), et \u00e0 l'\u00e9tape 1000, combien de <code>#</code> contient la chaine ?</p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur <p>V\u00e9rifier votre r\u00e9ponse :   </p>"},{"location":"itc/listes/#exercice-14-denivele-positif","title":"Exercice 14 : Denivel\u00e9 positif","text":"<p>On donne ci-dessous, une liste d'entiers <code>altitudes</code> (d\u00e9j\u00e0 pr\u00e9sente dans votre mini IDE), qui correspond aux altitudes d'un coureur lors d'une course de montagne. On veut d\u00e9terminer le denivel\u00e9 positif de ce coureur c'est-\u00e0-dire la somme des longueurs des ascensions. Par exemple, si la liste <code>altitudes</code> est <code>[330, 490, 380, 610, 780, 550]</code> alors :</p> <ul> <li>la course commence par une ascension de d\u00e9nivel\u00e9 positif \\(160\\) (\\(490-330\\))</li> <li>puis on a une descente (de \\(490\\) \u00e0 \\(380\\))</li> <li>puis une ascension avec un d\u00e9nivel\u00e9 positif de \\(230\\) (\\(610-380\\))</li> <li>puis une nouvelle ascencion de d\u00e9nivel\u00e9 positif \\(170\\) (\\(780-610\\))</li> <li>puis une descente (de \\(780\\) \u00e0 \\(550\\))</li> </ul> <p>Le d\u00e9nivel\u00e9 cumul\u00e9 positif total de cette course est donc \\(160+230+170=560\\)</p> <p>Quel est le d\u00e9nivel\u00e9 cumul\u00e9 positif total de la liste des altitudes donn\u00e9e dans votre IDE ci-dessous ?</p> <p> </p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur Indice <ul> <li>Pour obtenir la valeur d'un \u00e9l\u00e9ment dans une liste de Python, on peut utiliser la syntaxe <code>liste[indice]</code>. Par exemple, si <code>noel = [25,12,2024]</code> alors <code>noel[1] = 12</code> (l'indice du premier \u00e9l\u00e9ment est 0).</li> <li>Pour parcourir une liste, on peut utiliser un boucle <code>for</code> dont la variable repr\u00e9sente l'indice de la valeur \u00e0 laquelle on souhaite acc\u00e9der. Par exemple <code>for i in range(3)</code> cr\u00e9e une variable qui prendra successivement les valeurs <code>0,1</code> et <code>2</code> (dans un <code>range</code> la derni\u00e8re valeur n'est pas prise), cette variable peut \u00eatre utilis\u00e9 dans la boucle pour acc\u00e9der \u00e0 <code>noel[0]</code> puis <code>noel[1]</code> et enfin <code>noel[2]</code></li> <li>La fonction <code>len</code> s'applique aussi aux listes et renvoie leur nombre d'\u00e9l\u00e9ments.</li> </ul>"},{"location":"itc/listes/#exercice-15-evolution-dune-liste","title":"Exercice 15 : Evolution d'une liste","text":"<p>On consid\u00e8re la liste <code>carres</code> des \\(k\\) premiers carr\u00e9s des entiers strictement positifs, par exemple si \\(k=6\\), <code>carres = [1, 4, 9, 16, 25, 36]</code>. Sur cette liste on effectue les op\u00e9rations suivantes :</p> <ul> <li>on enl\u00e8ve les deux derniers \u00e9l\u00e9ments</li> <li>s'ils ont m\u00eame parit\u00e9 on calcule leur somme, sinon leur diff\u00e9rence (plus grand moins plus petit)</li> <li>on rajoute la valeur calcul\u00e9e \u00e0 l'\u00e9tape pr\u00e9c\u00e9dente (la somme ou la diff\u00e9rence) la fin de la liste</li> </ul> <p>Par exemple pour <code>carres = [1, 4, 9, 16, 25, 36]</code></p> <ul> <li>les deux derniers \u00e9l\u00e9ments sont <code>25</code> et <code>36</code>, ils sont enlev\u00e9s de la liste qui devient <code>[1, 4, 9, 16]</code></li> <li>ces deux entiers n'ont pas la m\u00eame parit\u00e9, on fait la diff\u00e9rence <code>36 - 25 = 11</code></li> <li>on ajoute cette valeur \u00e0 la fin de la liste qui devient <code>[1, 4, 9, 16, 11]</code> On renouvelle ce processus sur la liste obtenue jusqu'\u00e0 ce qu'elle contienne un unique \u00e9l\u00e9ment (dans l'exemple ci-dessous on obtient successivement <code>[1, 4, 9, 5]</code> puis <code>[1, 4, 14]</code> puis <code>[1, 18]</code> et enfin <code>[17]</code>).</li> </ul> <p>Quel est l'\u00e9l\u00e9ment restant dans le cas \\(k=100\\) ?</p> <p> </p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur Indice <p>En python <code>append</code> et <code>pop</code> permettent d'effectuer les op\u00e9rations suivantes sur une liste:</p> <ul> <li><code>append</code> ajoute l'\u00e9l\u00e9ment donn\u00e9 en argument \u00e0 la fin de la liste. Par exemple si <code>liste_de_courses = [\"courgettes\",\"poivrons\",\"tomates\",\"oignons\"]</code>, l'instruction <code>liste_de_courses.append(\"aubergines\")</code> va ajouter en fin de <code>liste_de_courses</code> l'\u00e9l\u00e9ment <code>\"aubergines\"</code>. Attention \u00e0 la syntaxe qui est <code>&lt;liste&gt;.append(&lt;element&gt;)</code>.</li> <li><code>pop</code> modifie une liste en lui enlevant son dernier \u00e9l\u00e9ment et renvoie ce dernier \u00e9l\u00e9ment. c'est-\u00e0-dire que le r\u00e9sultat d'un <code>pop</code> (l'\u00e9l\u00e9ment supprim\u00e9) peut-\u00eatre utilis\u00e9 (pour donner une valeur \u00e0 une variable par exemple). Par exemple si <code>matieres = [\"Informatique\",\"Anglais\",\"Maths\",\"Physique\",\"SVT\"]</code>, l'instruction <code>supprime = matieres.pop()</code> a deux effets :<ul> <li>le dernier \u00e9l\u00e9ment de <code>matieres</code> est supprim\u00e9 la liste devient <code>matieres = [\"Informatique\",\"Anglais\",\"Maths\",\"Physique\"]</code></li> <li>ce dernier \u00e9l\u00e9ment devient la valeur de <code>supprime</code> (et donc <code>supprime = \"SVT\"</code>)</li> </ul> </li> </ul>"},{"location":"itc/listes/#exercice-16-points-du-plan","title":"Exercice 16 : Points du plan","text":"<p>Dans votre IDE ci-dessous, est d\u00e9j\u00e0 d\u00e9finie une liste de points du plan, chaque point est repr\u00e9sent\u00e9 par un tuple de python \u00e0 deux \u00e9l\u00e9ments : son abscisse et son ordonn\u00e9e. Par exemple <code>points = [ (2,-1), (3,5)]</code> contient les points de coordonn\u00e9es \\((2,-1)\\) et \\((3,5)\\). Quelle est la plus courte distance entre deux points de la liste de points d\u00e9finie dans l'\u00e9diteur ci-dessous (valeur arrondie au centi\u00e8me) ?</p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur <p>V\u00e9fifier votre r\u00e9ponse :   </p>"},{"location":"itc/parcours/","title":"C14 Plus courts chemins dans un graphe","text":""},{"location":"itc/parcours/#cours","title":"Cours","text":"<p>Support de cours chapitre 14 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"itc/parcours/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"itc/point/","title":"C0 Faire le point !","text":""},{"location":"itc/point/#presentation","title":"Pr\u00e9sentation","text":"<p>Cette premi\u00e8re s\u00e9ance a pour objectif de faire le point sur vos acquis du secondaire en Python.  Chaque exercice propos\u00e9 doit \u00eatre r\u00e9solu en \u00e9crivant un petit programme en Python (parfois une seule ligne suffit !). Pour \u00e9crire ces petits programmes :</p> <ul> <li>vous pouvez utiliser votre ordinateur personnel et votre environnement habituel de programmation Python</li> <li>vous pouvez utiliser le mini environnement int\u00e9gr\u00e9 dans le navigateur et disponible \u00e0 chaque exercice </li> </ul> <p>Vous pouvez v\u00e9rifier votre r\u00e9ponse en la tapant dans le formulaire associ\u00e9 \u00e0 chaque exercice</p>"},{"location":"itc/point/#exercices","title":"Exercices","text":""},{"location":"itc/point/#exercice-1","title":"Exercice 1","text":"<p>Quel est le reste dans la division euclidienne de \\(2024^{42}\\) par \\(1815\\) ?</p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur Indice <p>En Python, les op\u00e9rations sur les entiers sont obtenus \u00e0 l'aide des op\u00e9rateurs suivants :</p> <ul> <li><code>+</code> : addition</li> <li><code>-</code> : soustraction</li> <li><code>*</code> : multiplication</li> <li><code>/</code> : division d\u00e9cimale</li> <li><code>//</code>: quotient dans la division euclidienne</li> <li><code>%</code> : reste dans la division euclidienne</li> </ul> <p>V\u00e9rifier votre r\u00e9ponse :   </p>"},{"location":"itc/point/#exercice-2","title":"Exercice 2","text":"<p>On note \\(a = 10001\\), \\(b = 7777\\) et \\(c = 145\\), on calcule ensuite :</p> <ul> <li>\\(d = a^2 - 5bc\\)</li> <li>\\(e = 42d - ab\\) si \\(d\\) est divisible par 7 sinon \\(e = 7c^3\\)</li> <li>\\(f = e + d\\) si \\(e\\) et \\(d\\) ont le m\u00eame signe sinon \\(f = ed\\)</li> </ul> <p>Quelle est la valeur de \\(f\\) ?</p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur Indice <p>En Python, la structure suivante : <pre><code>    if &lt;condition&gt;:\n        &lt;instructions1&gt;\n    else:\n        &lt;instructions2&gt;\n</code></pre> permet d'ex\u00e9cuter le bloc d'instruction <code>&lt;instructions1&gt;</code> si <code>&lt;condition&gt;</code> est vraie et <code>&lt;instructions2&gt;</code> sinon. Par exemple, apr\u00e8s ex\u00e9cution du programme suivant : <pre><code>    a = 14\n    if a &gt; 10:\n        b = 1\n    else:\n        b= 0\n</code></pre> <code>b</code> vaut 1 car comme <code>a&gt;10</code>, c'est l'instruction <code>b=1</code> qui est ex\u00e9cut\u00e9e.</p> <p>V\u00e9rifier votre r\u00e9ponse :   </p>"},{"location":"itc/point/#exercice-3","title":"Exercice 3","text":"<p>On consid\u00e8re la suite \\((u_n)_{n \\in \\mathbb{N}}\\) d\u00e9finie par \\(u_0 = 0.7\\) et \\(u_{n+1} = 3.5 u_n(1-u_n)\\). Calculer \\(u_{2024}\\) (on donnera la valeur arrondie au centi\u00e8me).</p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur Indice <p>En Python, une boucle <code>for</code> permet (notamment) de r\u00e9p\u00e9ter le bloc d'instruction indent\u00e9 qui suit. La syntaxe est : <code>for variable in range(nombre_de_r\u00e9p\u00e9tions):</code></p> <p>V\u00e9rifier votre r\u00e9ponse :     (valeur arrondie au centi\u00e8mre)</p>"},{"location":"itc/point/#exercice-4","title":"Exercice 4","text":"<p>En informatique, chaque caract\u00e8re est associ\u00e9 \u00e0 un entier : son code unicode, par exemple le code unicode du caract\u00e8re <code>A</code> est 65. En Python, pour obtenir le code unicode d'un caract\u00e8re on utilise la fonction <code>ord</code>, ainsi <code>ord('A')</code> vaut 65. D\u00e9terminer la somme de de tous les codes unicode des caract\u00e8res de la phrase \"faire un peu de Python, c'est vraiment trop bien !\" ? Attention : les guillemets ne font pas partie de la phrase. </p> <p>Remarques</p> <ul> <li>En tapant <code>ord(\"A\")</code> dans le terminal ci-dessous vous pouvez v\u00e9rifier qu'on obtient bien 65.</li> <li>L'unicode \u00e9tend le code ascii qui est parfois plus connu. En effet, lorsque le code ascii d'un caract\u00e8re existe, il correspond \u00e0 son code unicode. Ainsi le code ascii de <code>A</code> existe (et vaut donc aussi 65), mais <code>\u00f9</code> n'est pas un caract\u00e8re ascii et n'a donc pas de code ascii mais a bien un code unicode : 249.</li> </ul> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur Indice <p>En Python, une boucle <code>for</code> permet (aussi) de parcourir un it\u00e9rable (comme par exemple une chaine de caract\u00e8re). La syntaxe est : <code>for variable in iterable:</code> et permet de faire prendre \u00e0 la variable chaque valeur pr\u00e9sente dans l'it\u00e9rable.</p> <p>V\u00e9rifier votre r\u00e9ponse :   </p>"},{"location":"itc/point/#exercice-5","title":"Exercice 5","text":"<p>Combien il y a-t-il de chiffres dans le nombre \\(42^{2024}\\) ?</p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur <p>V\u00e9rifier votre r\u00e9ponse :   </p>"},{"location":"itc/point/#exercice-6","title":"Exercice 6","text":"<p>On rappelle que la factorielle d'un entier naturelle \\(n\\), not\u00e9e \\(n!\\), est le produit des entiers strictement positifs inf\u00e9rieurs ou \u00e9gaux \u00e0 \\(n\\). Par exemple \\(5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120\\). Quel est le nombre de 2 dans l'\u00e9criture d\u00e9cimale de \\(100!\\) ?</p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur <p>V\u00e9rifier votre r\u00e9ponse :   </p>"},{"location":"itc/point/#exercice-7","title":"Exercice 7","text":"<p>On consid\u00e8re une chaine de caract\u00e8res initialement constitu\u00e9e de \\(k\\) caract\u00e8res <code>.</code> suivie d'un caract\u00e8re <code>#</code> puis de \\(k\\) caract\u00e8res <code>#</code>. Par exemple pour \\(k=5\\) la chaine est <code>.....#.....</code> (5 <code>.</code> suivi d'un <code>#</code> puis de 5 <code>.</code>). Cette chaine \u00e9volue de la fa\u00e7on suivante :</p> <ul> <li>si un <code>.</code> est entre un <code>#</code> et un <code>.</code>, il se transforme en <code>#</code> sinon il reste un <code>.</code></li> <li>si un <code>#</code> est entre deux <code>#</code> ou s'il a un <code>#</code> \u00e0 sa gauche et un <code>.</code> \u00e0 sa droite, il se transforme en <code>.</code> sinon il reste un <code>#</code></li> <li>le premier et le dernier caract\u00e8re ayant un seul voisin, ils ne sont pas affect\u00e9s par ces r\u00e8gles d'\u00e9volutions et restent toujours des <code>.</code></li> </ul> <p>Par exemple dans le cas \\(k=5\\) : les \u00e9tapes successives d'\u00e9volution sont :</p> <ul> <li><code>.....#.....</code> (\u00e9tat initial :)</li> <li><code>....###....</code> (\u00e9tape 1)</li> <li><code>...##..#...</code> (\u00e9tape 2)</li> <li><code>..##.####..</code> (\u00e9tape 3)</li> <li><code>.##..#...#.</code> (\u00e9tape 4)</li> <li><code>.#.####.##.</code> (\u00e9tape 5)</li> </ul> <p>Dans le cas \\(k=256\\), et \u00e0 l'\u00e9tape 1000, combien de <code>#</code> contient la chaine ?</p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur <p>V\u00e9rifier votre r\u00e9ponse :   </p>"},{"location":"itc/point/#exercice-8","title":"Exercice 8","text":"<p>On donne ci-dessous, une liste d'entiers <code>altitudes</code> (d\u00e9j\u00e0 pr\u00e9sente dans votre mini IDE), qui correspond aux altitudes d'un coureur lors d'une course de montagne. On veut d\u00e9terminer le denivel\u00e9 positif de ce coureur c'est-\u00e0-dire la somme des longueurs des ascensions. Par exemple, si la liste <code>altitudes</code> est <code>[330, 490, 380, 610, 780, 550]</code> alors :</p> <ul> <li>la course commence par une ascension de d\u00e9nivel\u00e9 positif \\(160\\) (\\(490-330\\))</li> <li>puis on a une descente (de \\(490\\) \u00e0 \\(380\\))</li> <li>puis une ascension avec un d\u00e9nivel\u00e9 positif de \\(230\\) (\\(610-380\\))</li> <li>puis une nouvelle ascencion de d\u00e9nivel\u00e9 positif \\(170\\) (\\(780-610\\))</li> <li>puis une descente (de \\(780\\) \u00e0 \\(550\\))</li> </ul> <p>Le d\u00e9nivel\u00e9 cumul\u00e9 positif total de cette course est donc \\(160+230+170=560\\)</p> <p>Quel est le d\u00e9nivel\u00e9 cumul\u00e9 positif total de la liste des altitudes donn\u00e9e dans votre IDE ci-dessous ?</p> <p> </p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur Indice <ul> <li>Pour obtenir la valeur d'un \u00e9l\u00e9ment dans une liste de Python, on peut utiliser la syntaxe <code>liste[indice]</code>. Par exemple si <code>noel = [25,12,2024]</code> alors <code>noel[1] = 12</code> (l'indice du premier \u00e9l\u00e9ment est 0).</li> <li>Pour parcourir une liste, on peut utiliser un boucle <code>for</code> dont la variable repr\u00e9sente l'indice de la valeur \u00e0 laquelle on souhaite acc\u00e9der. Par exemple <code>for i in range(3)</code> cr\u00e9e une variable qui prendra successivement les valeurs <code>0,1</code> et <code>2</code> (dans un <code>range</code> la derni\u00e8re valeur n'est pas prise), cette variable peut \u00eatre utilis\u00e9 dans la boucle pour acc\u00e9der \u00e0 <code>noel[0]</code> puis <code>noel[1]</code> et enfin <code>noel[2]</code></li> <li>La fonction <code>len</code> s'applique aussi aux listes et renvoie leur nombre d'\u00e9l\u00e9ments.</li> </ul>"},{"location":"itc/point/#exercice-9","title":"Exercice 9","text":"<p>On consid\u00e8re la liste <code>carres</code> des \\(k\\) premiers carr\u00e9s des entiers strictement positifs, par exemple si \\(k=6\\), <code>carres = [1, 4, 9, 16, 25, 36]</code>. Sur cette liste on effectue les op\u00e9rations suivantes :</p> <ul> <li>on enl\u00e8ve les deux derniers \u00e9l\u00e9ments</li> <li>s'ils ont m\u00eame parit\u00e9 on calcule leur somme, sinon leur diff\u00e9rence (plus grand moins plus petit)</li> <li>on rajoute la valeur calcul\u00e9e \u00e0 l'\u00e9tape pr\u00e9c\u00e9dente (la somme ou la diff\u00e9rence) la fin de la liste</li> </ul> <p>Par exemple pour <code>carres = [1, 4, 9, 16, 25, 36]</code></p> <ul> <li>les deux derniers \u00e9l\u00e9ments sont <code>25</code> et <code>36</code>, ils sont enlev\u00e9s de la liste qui devient <code>[1, 4, 9, 16]</code></li> <li>ces deux entiers n'ont pas la m\u00eame parit\u00e9, on fait la diff\u00e9rence <code>36 - 25 = 11</code></li> <li>on ajoute cette valeur \u00e0 la fin de la liste qui devient <code>[1, 4, 9, 16, 11]</code> On renouvelle ce processus sur la liste obtenue jusqu'\u00e0 ce qu'elle contienne un unique \u00e9l\u00e9ment (dans l'exemple ci-dessous on obtient successivement <code>[1, 4, 9, 5]</code> puis <code>[1, 4, 14]</code> puis <code>[1, 18]</code> et enfin <code>[17]</code>).</li> </ul> <p>Quel est l'\u00e9l\u00e9ment restant dans le cas \\(k=100\\) ?</p> <p> </p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur Indice <p>En python <code>append</code> et <code>pop</code> permettent d'effectuer les op\u00e9rations suivantes sur une liste:</p> <ul> <li><code>append</code> ajoute l'\u00e9l\u00e9ment donn\u00e9 en argument \u00e0 la fin de la liste. Par exemple si <code>liste_de_courses = [\"courgettes\",\"poivrons\",\"tomates\",\"oignons\"]</code>, l'instruction <code>liste_de_courses.append(\"aubergines\")</code> va ajouter en fin de <code>liste_de_courses</code> l'\u00e9l\u00e9ment <code>\"aubergines\"</code>. Attention \u00e0 la syntaxe qui est <code>&lt;liste&gt;.append(&lt;element&gt;)</code>.</li> <li><code>pop</code> modifie une liste en lui enlevant son dernier \u00e9l\u00e9ment et renvoie ce dernier \u00e9l\u00e9ment. c'est-\u00e0-dire que le r\u00e9sultat d'un <code>pop</code> (l'\u00e9l\u00e9ment supprim\u00e9) peut-\u00eatre utilis\u00e9 (pour donner une valeur \u00e0 une variable par exemple). Par exemple si <code>matieres = [\"Informatique\",\"Anglais\",\"Maths\",\"Physique\",\"SVT\"]</code>, l'instruction <code>supprime = matieres.pop()</code> a deux effets :<ul> <li>le dernier \u00e9l\u00e9ment de <code>matieres</code> est supprim\u00e9 la liste devient <code>matieres = [\"Informatique\",\"Anglais\",\"Maths\",\"Physique\"]</code></li> <li>ce dernier \u00e9l\u00e9ment devient la valeur de <code>supprime</code> (et donc <code>supprime = \"SVT\"</code>)</li> </ul> </li> </ul>"},{"location":"itc/point/#exercice-10","title":"Exercice 10","text":"<p>Dans votre IDE ci-dessous, est d\u00e9j\u00e0 d\u00e9finie une liste de points du plan, chaque point est repr\u00e9sent\u00e9 par un tuple de python \u00e0 deux \u00e9l\u00e9ments : son abscisse et son ordonn\u00e9e. Par exemple <code>points = [ (2,-1), (3,5)]</code> contient les points de coordonn\u00e9es \\((2,-1)\\) et \\((3,5)\\). Quelle est la plus courte distance entre deux points de la liste de points d\u00e9finie dans l'\u00e9diteur ci-dessous (valeur arrondie au centi\u00e8me) ?</p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur <p>V\u00e9fifier votre r\u00e9ponse :   </p>"},{"location":"itc/progdyn/","title":"C18 Programmation dynamique","text":""},{"location":"itc/progdyn/#cours","title":"Cours","text":"<p>Support de cours chapitre 18 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"itc/progdyn/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"itc/progdyn/#manipulations-des-dictionnaires","title":"Manipulations des dictionnaires","text":""},{"location":"itc/progdyn/#exercice-1-creer-et-manipuler-un-dictionnaire","title":"Exercice 1 : Cr\u00e9er et manipuler un dictionnaire","text":"<ol> <li>Cr\u00e9er un dictionnaire <code>conversion</code> dont les cl\u00e9s sont les chiffres (de 0 \u00e0 9) et les valeurs leur \u00e9criture en lettre. Par exemple <code>conversion[3] = \"trois\"</code>.</li> <li>Ecrire une fonction <code>en_lettres</code> Python qui prend en entr\u00e9e un nombre entier et \u00e9crit en  lettres chacun de ces chiffres par exemple <code>en_lettre(421)</code> affiche <code>quatre deux un</code>.</li> </ol>"},{"location":"itc/progdyn/#exercice-2-de-lutilite-des-dictionnaires","title":"Exercice 2 : De l'utilit\u00e9 des dictionnaires","text":"<p>Au jeu du Scrabble, chaque lettre a une valeur comme indiqu\u00e9 sur l'image ci-dessous :</p> <p></p> <p>Le but de l'exercice est d'\u00e9crire une fonction <code>score</code> qui prend un argument un <code>mot</code> et renvoie la somme des valeurs des lettres de ce mot. Par exemple <code>valeur(\"GIRAFE\")</code> doit renvoyer 10 en effet :  et donc la valeur est \\(2+1+1+1+4+1 = 10\\)</p> <ol> <li> <p>Compl\u00e9ter  une premi\u00e8re version de <code>score</code> qui parcours les lettres du mots et ajoute la valeur suivant la lettre rencontr\u00e9e. <pre><code>def score(mot):\n    total = 0\n    for lettre in ....:\n        if lettre == 'A' or lettre=='E' or lettre=='I' ..... :\n            total += 1\n        if lettre == 'D' or lettre == 'G' or .......:\n            totel += 2\n        ...\n        ...\n    return ...\n</code></pre></p> </li> <li> <p>Les dictionnaires \u00e0 la rescousse</p> <ol> <li> <p>Cr\u00e9er un dictionnaire <code>valeur</code> dont les cl\u00e9s sont les lettres de l'alphabet et qui associe \u00e0 chaque lettre sa valeur.</p> </li> <li> <p>Utiliser ce dictionnaire afin d'\u00e9crire une version bien plus courte et lisible de la fonction <code>score</code>.</p> </li> </ol> </li> </ol>"},{"location":"itc/progdyn/#exercice-3-minimum-et-maximum","title":"Exercice 3 : Minimum et maximum","text":"<p>Ecrire une fonction <code>min_max</code> qui prend en argument une liste non vide et renvoie un dictionnaire dont les cl\u00e9s sont <code>\"min\"</code> et <code>\"max\"</code>. A la cl\u00e9 <code>\"min\"</code> est associ\u00e9e le minimum des valeurs de la liste et \u00e0 la cl\u00e9 <code>\"max\"</code> leur maximum.</p>"},{"location":"itc/progdyn/#exercice-4-moyennes-des-eleves","title":"Exercice 4 : Moyennes des \u00e9l\u00e8ves","text":"<p>Voici un dictionnaire representant  les notes obtenus par des \u00e9l\u00e8ves : <pre><code>notes = {\n            \"Albert\"    : [7, 11, 15, 8, 9],\n            \"Alice\"     : [14, 11, 6, 15],\n            \"Bob\"       : [9, 9, 13, 14, 9],\n            \"Louise\"    : [11, 13, 12, 14, 14],\n            \"Michelle\"  : [2, 5, 4, 9],\n            \"Luc\"       : [18, 14, 18, 11]\n        }\n</code></pre></p> <ol> <li> <p>Cr\u00e9er un dictionnaire poss\u00e9dant les m\u00eames cl\u00e9s (les pr\u00e9noms) et contenant la moyenne de chaque \u00e9l\u00e8ve.</p> <p>Aide</p> <p>On pourra commencer par cr\u00e9er une fonction auxiliaire <code>moyenne</code> qui renvoie la moyenne des valeurs pr\u00e9sentes dans la liste donn\u00e9e en argument.</p> </li> <li> <p>Trier ce dictionnaire par ordre croissant de moyenne.</p> </li> </ol>"},{"location":"itc/progdyn/#exercice-5-trouver-la-chaine-qui-se-repete","title":"Exercice 5 : Trouver la chaine qui se r\u00e9p\u00e8te","text":"<p>Vous pouvez t\u00e9l\u00e9charger ci-dessous un fichier <code>chaines.txt</code> : chaines.txt   Ce fichier contient 5000 chaines de caract\u00e8res (une par ligne), une seule de ces chaines apparait deux fois dans le fichier. Le but de l'exercice est de trouver laquelle</p> <ol> <li> <p>Proposer une solution utilisant une liste <code>deja_vu</code> dans laquelle on rangera les chaines de caract\u00e8res au fur et \u00e0 mesure de leur apparition. Vous pouvez tester votre r\u00e9ponse dans le formulaire ci dessous  </p> Corrig\u00e9 <pre><code>#Lecture des chaines de caract\u00e8res et stockage dans la liste \"chaines\"\nreader = open(\"chaines.txt\")\nchaines = reader.read().strip().split('\\n')\nreader.close()\n\n# Renvoie True si elt est dans liste (sinon False)\ndef est_dans(elt,liste):\n    for x in liste:\n        if x==elt:\n            return True\n    return False\n\n# Trouve la premi\u00e8re chaine en double\ndeja_vu = []\nfor c in chaines:\n    if est_dans(c,deja_vu):\n        print(c)\n    else:\n        deja_vu.append(c)\n</code></pre> </li> <li> <p>Proposer une solution utilisant les dictionnaire de Python</p> Corrig\u00e9 <pre><code># De m\u00eame mais avec un dictionnaire \nmemoire = {}\nfor c in chaines:\n    if c in memoire:\n        print(c)\n    else:\n        # On enregistre la pr\u00e9sence de la cl\u00e9 (la valeur True n'a pas d'importance)\n        memoire[c] = True\n</code></pre> </li> <li> <p>Discuter l'efficacit\u00e9 de ces deux solutions</p> Corrig\u00e9 <p>Le test d'appartenance dans une liste a une complexit\u00e9 lin\u00e9aire \\(O(1)\\) (on teste l'\u00e9galit\u00e9 ou plus entre <code>elt</code> et chaque \u00e9l\u00e9ment de la liste, donc au plus on effectue <code>n</code> comparaisons o\u00f9 <code>n</code> est la longueur de la liste). Par contre, comme vu en cours, le test d'appartenance \u00e0 un dictionnaire s'effectue en temps constant (\\(O(1)\\)). La seconde solution utilisant un dictionnaire est donc plus efficace.</p> </li> </ol>"},{"location":"itc/progdyn/#exercice-6-a-la-recherche-du-mot-cache","title":"Exercice 6 : A la recherche du mot cach\u00e9","text":"<p>Vous pouvez t\u00e9l\u00e9charger ci-dessous un fichier <code>mot_cache.txt</code> : mot_cache.txt  </p> <p>ce fichier contient de nombreux caract\u00e8res : tous ceux de code ascii compris entre 33 (<code>!</code>) et 126 (<code>~</code>). Tous ces caract\u00e8res apparaissent au moins \u00e0 50 reprises (et jusqu'\u00e0 100 fois) \u00e0 l'exception de quelques uns qui apparaissent rarement (moins d'une dizaine de fois). Retrouver les caract\u00e8res qui apparaissent rarement, ranger les dans l'ordre de leur nombre d'apparition pour obtenir le mot cach\u00e9. Vous pouvez v\u00e9rifier votre r\u00e9sultat ci-dessous :</p> <p> </p> <p>Aide</p> <ul> <li>Revoir si n\u00e9cessaire comment ouvrir un fichier en Python et en lire le contenu.</li> <li>On pourra construire un dictionnaire dont les cl\u00e9s sont les caract\u00e8res et les valeurs leur nombre d'apparition.</li> </ul>"},{"location":"itc/progdyn/#hachage","title":"Hachage","text":""},{"location":"itc/progdyn/#exercice-7-rappel-du-principe","title":"Exercice 7 : Rappel du principe","text":"<ol> <li>Ranger les entiers suivants : 176, 254, 1999, 2092, 565 dans une table de hachage de taille 9 avec la fonction de hachage \\(h(k) = k \\mod 9\\).</li> <li>Donner un exemple de valeurs produisant une collision avec la valeur 176.</li> </ol>"},{"location":"itc/progdyn/#exercice-8-un-exemple-de-fonction-hachage","title":"Exercice 8 : Un exemple de fonction hachage","text":"<ol> <li>Ecrire une fonction <code>hash_str</code> qui prend en entr\u00e9e une chaine de caract\u00e8res ascii et renvoie la somme des codes ascii des caract\u00e8res de cette chaine modulo 100.</li> <li>Donner un exemple de collision pour cette fonction de hachage.</li> </ol>"},{"location":"itc/progdyn/#programmation-dynamique","title":"Programmation dynamique","text":""},{"location":"itc/progdyn/#exercice-9-coefficient-du-binome","title":"Exercice 9 : Coefficient du bin\u00f4me","text":"<p>On rappelle que dans le triangle de Pascal, le coefficient situ\u00e9 ligne \\(n\\) et colonne \\(k\\) not\u00e9 \\(\\displaystyle{\\binom{n}{k}}\\) se d\u00e9duit de ceux de la ligne pr\u00e9c\u00e9dente gr\u00e2ce \u00e0 la relation de Pascal : \\(\\displaystyle{\\binom{n}{k} = \\binom{n-1}{k-1} + \\binom{n-1}{k}}\\). On veut \u00e9crire une fonction <code>binom</code> qui prend en argument deux entiers \\(n\\) et \\(n\\) et renvoie \\(\\displaystyle{\\binom{n}{k}}\\)</p> <ol> <li>Proposer une version r\u00e9cursive na\u00efve de la fonction <code>binom</code></li> <li>Calculer gr\u00e2ce \u00e0 cette fonction \\(\\displaystyle{\\binom{28}{12}}\\) et noter le temps d'ex\u00e9cution</li> <li>Proposer une version avec m\u00e9mo\u00efsation de la fonction <code>binom</code>, calculer de nouveau \\(\\displaystyle{\\binom{28}{12}}\\) et comparere avec le temps d'ex\u00e9cution obtenu \u00e0 la question pr\u00e9c\u00e9dente</li> </ol>"},{"location":"itc/progdyn/#exercice-10-la-montee-des-marches","title":"Exercice 10 : La mont\u00e9e des marches","text":"<p>Pour gravir un escalier on peut faire des enjamb\u00e9es d'une ou deux marches. Par exemple pour monter un escalier de 4 marches, on pourrait faire <code>1+2+1</code> ou encore <code>2+2</code>. On s'int\u00e9resse au nombre de fa\u00e7ons de monter un escalier de \\(n\\) marches qu'on note \\(f_n\\). </p> <ol> <li> <p>Donner \\(f_1\\) et \\(f_2\\).</p> </li> <li> <p>Etablir une relation de r\u00e9currence liant \\(f_{n}\\), \\(f_{n-1}\\) et \\(f_{n-2}\\) pour \\(n \\geq 2\\).</p> <p>Aide</p> <p>on pourra diff\u00e9rencier les cas o\u00f9 la derni\u00e8re enjamb\u00e9e fait une ou deux marches.</p> </li> <li> <p>En d\u00e9duire une fonction <code>python</code> r\u00e9cursive permettant de r\u00e9pondre au probl\u00e8me</p> <p>Aide</p> <p>On donnera une fonction utilisant la m\u00e9mo\u00efsation</p> </li> <li> <p>Proposer une version it\u00e9rative permettant d'obtenir \\(f_n\\) par une approche de bas en haut.</p> </li> <li> <p>On s'int\u00e9resse maintenant \u00e0 la construction effective de toutes les possibilit\u00e9s et on notera \\(p_n\\) la liste des fa\u00e7ons possibles de gravir un escalier de \\(n\\) marches. Les possibilit\u00e9s sont donn\u00e9es sous forme de chaine de caract\u00e8res compos\u00e9es de 1 et de 2. Par exemple, \\(p_3\\)=<code>[\"111\",\"12\",\"21\"]</code> et  \\(p_5\\) contient la chaine <code>\"1121\"</code>. </p> <ol> <li>Donner \\(p_0\\) et \\(p_1\\).</li> <li>Etablir une relation de r\u00e9currence liant les \u00e9l\u00e9ments de \\(p_{n}\\) \u00e0 ceux de \\(p_{n-1}\\) et \\(p_{n-2}\\)</li> <li>Ecrire une fonction python permettant de r\u00e9pondre au probl\u00e8me.</li> </ol> </li> <li> <p>Dans le fichier <code>montees.txt</code> \u00e0 t\u00e9l\u00e9charger ci-dessous, se trouvent des fa\u00e7ons de monter un escalier de 13 marches. Sur chaque ligne du fichier, une des possibilit\u00e9s est donn\u00e9e sous la forme d'une chaine de caract\u00e8res compos\u00e9e de 1 et de 2. montees.txt  </p> <ol> <li>V\u00e9rifier (en comptant le nombre de lignes de ce fichier et en comparant avec la valeur de \\(f_{13}\\)) qu'une possibilit\u00e9 est manquante.</li> <li>Quelle est la possibilit\u00e9 manquante ? </li> </ol> </li> </ol>"},{"location":"itc/progdyn/#exercice-11-jamais-deux-consecutifs","title":"Exercice 11 : Jamais deux cons\u00e9cutifs !","text":"<p>Vous disposez d'un tableau de valeurs de \\(n\\) valeurs \\([h_0,\\dots,h_{n-1}]\\), on doit sommer les valeurs pr\u00e9sentes dans ce tableau mais sans jamais utiliser deux \u00e9l\u00e9ments cons\u00e9cutifs. Le but de l'exercice est d'\u00e9crire un programme permettant de trouver la somme maximale ainsi atteignable.</p> <p>Par exemple si le tableau contient les valeurs \\([7, 5, 3, 6]\\) alors la somme maximale est atteinte en prenant \\(7\\) et \\(6\\) et vaut \\(13\\).</p> <ol> <li> <p>R\u00e9soudre ce probl\u00e8me en utilisant la programmation dynamique</p> <p>Aide</p> <p>On pourra noter \\(S_i\\) la somme maximale sans utiliser d'\u00e9l\u00e9ments cons\u00e9cutifs \u00e0 partir de l'indice \\(i\\) et d\u00e9terminer la relation de recurrence liant les \\(S_i\\) (\\(0 \\leq i \u00a0&lt; n\\))</p> </li> <li> <p>Proposer une solution pour reconstruire la liste des valeurs  utilis\u00e9es dans la solution</p> </li> </ol>"},{"location":"itc/progdyn/#exercice-12-chemin-de-somme-maximale-dans-une-pyramide","title":"Exercice 12 : Chemin de somme maximale dans une pyramide","text":"<p>On reprend l'exemple de la recherche de la somme maximale d'un chemin dans une pyramide (voir cours). </p> <ol> <li> <p>Ecrire la fonction <code>somme_max</code> qui prend en argument une pyramide <code>p</code> (sous la forme d'une liste de listes) ainsi que deux entiers <code>i</code> et <code>j</code> et renvoie la somme maximal d'un chemin dans la sous pyramide de sommet <code>p[i][j]</code>.</p> <p>Aide</p> <p>On rappelle les \u00e9quations de complexit\u00e9 (o\u00f9 <code>n</code> est le nombre de niveau de la pyramide):</p> <ul> <li><code>somme_max(p,i,j) = p[i][j]</code> si <code>i=n-1</code> (c'est le cas de base, on a atteint la base de la pyramide)</li> <li><code>somme_max(p,i,j) = p[i][j] + max(somme_max(p,i+1,j), somme_max(p,i+1,j+1))</code> sinon</li> </ul> </li> <li> <p>V\u00e9rifier que votre fonction renvoie bien 32 sur le petit exemple vu en cours : <code>[[5], [3, 4], [9, 2, 6], [4, 6, 8, 4], [3, 9, 2, 5, 7]]</code></p> </li> <li> <p>Sur des exemples de taille plus importantes, on doit m\u00e9mo\u00efser les r\u00e9sultats des sous pyramides afin de ne pas les recalculer. Le faire \u00e0 l'aide d'un dictionnaire. Puis tester votre programme sur la pyramide ci-dessous :</p> Pyramide (\u00e0 copier pour tester) <pre><code>[\n[5],\n[4, 4],\n[4, 7, 5],\n[3, 1, 7, 1],\n[8, 6, 5, 4, 6],\n[4, 6, 7, 3, 3, 3],\n[7, 8, 2, 5, 3, 8, 8],\n[7, 2, 6, 7, 7, 5, 6, 6],\n[9, 2, 1, 4, 9, 2, 9, 9, 2],\n[6, 7, 1, 7, 6, 4, 9, 1, 9, 8],\n[7, 7, 7, 7, 7, 4, 8, 9, 1, 1, 9],\n[1, 8, 2, 3, 2, 5, 1, 1, 2, 8, 8, 3],\n[7, 2, 3, 5, 7, 2, 8, 8, 7, 6, 8, 7, 4],\n[1, 8, 6, 4, 5, 3, 6, 1, 1, 8, 9, 5, 3, 8],\n[8, 7, 3, 9, 2, 3, 7, 5, 7, 5, 2, 2, 5, 2, 6],\n[1, 8, 2, 5, 2, 3, 9, 1, 1, 5, 5, 2, 6, 7, 6, 2],\n[8, 5, 5, 9, 4, 3, 4, 4, 8, 4, 7, 9, 2, 6, 6, 8, 2],\n[5, 3, 7, 2, 7, 8, 3, 9, 7, 4, 6, 7, 7, 4, 5, 6, 7, 3],\n[1, 3, 8, 9, 2, 7, 1, 8, 7, 8, 8, 2, 5, 7, 4, 9, 1, 8, 9],\n[8, 4, 4, 3, 3, 5, 3, 4, 6, 7, 7, 5, 4, 3, 4, 8, 2, 5, 2, 2],\n[7, 7, 8, 5, 9, 1, 7, 2, 3, 1, 3, 6, 5, 8, 5, 3, 5, 6, 5, 3, 1],\n[9, 7, 9, 3, 6, 9, 3, 1, 8, 5, 5, 1, 5, 1, 7, 4, 4, 5, 7, 1, 6, 8],\n[8, 7, 6, 4, 3, 1, 8, 2, 1, 1, 6, 1, 6, 5, 9, 3, 9, 6, 3, 4, 2, 6, 4],\n[5, 2, 1, 2, 4, 1, 8, 1, 6, 1, 4, 4, 6, 5, 5, 8, 7, 6, 6, 3, 4, 3, 3, 8]\n]\n</code></pre> <p>V\u00e9rifier votre r\u00e9ponse : </p> <p> </p> </li> <li> <p>Ce probl\u00e8me est l'un du site du Project Euler, vous y trouverez donc des jeux de donn\u00e9es de taille plus importantes pour tester votre programme : voir le probl\u00e8me 18 ainsi que le probl\u00e8me 67</p> </li> </ol>"},{"location":"itc/progdyn/#exercice-13-tranche-de-somme-maximale-dans-un-tableau","title":"Exercice 13 : Tranche de somme maximale dans un tableau","text":"<p>Etant donn\u00e9 un tableau d'entiers (positif ou n\u00e9gatif) \\([e_0,\\dots,e_{n-1}]\\) on cherche dans ce tableau la tranche de plus grande somme. Par exemple pour le tableau \\([-2, 7, 1, -3, 5, -8, -2, 9]\\) c'est la tranche \\([7, 1, -3, 5]\\) qui a la plus grande somme et cette somme est 10. On n'autorise pas de tranche de longueur nulle et donc par exemple pour le tableau \\([-5, -2, -7]\\) c'est la tranche \\([-2]\\) qui a la plus grande somme.</p> <ol> <li> <p>Impl\u00e9menter  l'algorithme na\u00eff qui calcule la somme de toutes les tranches possibles c'est-\u00e0-dire les \\(\\displaystyle{S_{ij} = \\sum_{k=i}^{j} e_k}\\) et donne ensuite le maximum. Quel est la complexit\u00e9 de cet algorithme ?</p> <p>Aide</p> <p>On pourra d'abord \u00e9crire la fonction <code>somme_tranche</code> qui prend en argument deux entiers \\(i\\) et \\(j\\) et renvoie \\(S_{ij}\\)</p> </li> <li> <p>Proposer une version permettant de se ramener \u00e0 un algorithme ayant une complexit\u00e9 quadratique.</p> <p>Aide</p> <p>On pourra par exemple calculer les \\(S_{0i}\\) pour \\(0 \\leq i \\leq n-1\\) et exprimer les \\(S_{ij}\\) \u00e0 l'aide de ces sommes partielles.</p> </li> <li> <p>Un algorithme tr\u00e8s \u00e9l\u00e9gant et ayant une complexit\u00e9 en \\(\\mathcal{O}(n)\\) pour ce probl\u00e8me a \u00e9t\u00e9 propos\u00e9 par Jay Kadane. L'algorithme consiste \u00e0 parcourir le tableau en tenant \u00e0 jour la valeur de \\(T_j\\) qui est la tranche de somme maximale qui se termine \u00e0 l'index \\(j\\). La somme de la tranche maximale est alors obtenu en maintenant \u00e0 jour une variable contenant le maximum des \\(T_j\\) au fur et \u00e0 mesure de leurs calculs.</p> <ol> <li>Etablir la relation de r\u00e9currence liant \\(T_{j+1}\\) et \\(T_{j}\\)</li> <li>Impl\u00e9menter et tester ce nouvel algorithme</li> <li>Proposer une version qui donne aussi les index de d\u00e9but et de fin de la tranche de somme maximale.</li> </ol> </li> </ol>"},{"location":"itc/progdyn/#exercice-14-decoupe-de-valeur-maximale","title":"Exercice 14 : D\u00e9coupe de valeur maximale","text":"<p>Le probl\u00e8me de la recherche de la d\u00e9coupe de valeur maximale d'une barre a \u00e9t\u00e9 r\u00e9solu en cours. On donne ci-dessous la fonction python r\u00e9cursive avec m\u00e9mo\u00efsation (dans le dictionnaire <code>vmax</code>) qui r\u00e9pond au probl\u00e8me :</p> <p>Python</p> <pre><code>vmax = {}\ndef valeur_max(taille, prix):\n    if taille in vmax:\n        return vmax[taille]\n    if taille&lt;2:\n        vmax[taille] = prix[taille]\n        return prix[taille]\n    else:\n        vmax[taille] = max(valeur_max(k,prix)+prix[taille-k] for k in range(taille))\n        return vmax[taille]\n</code></pre> <ol> <li> <p>Faire fonctionner ce programme avec les donn\u00e9es suivantes et donner la valeur de la d\u00e9coupe maximale.</p> <p>Longueur12345678910111213141516Prix36812131619242829323337404243 </p> </li> <li> <p>Utiliser le tableau <code>vmax</code> des valeurs maximales des d\u00e9coupes d\u00e9j\u00e0 construit afin de d\u00e9terminer une d\u00e9coupe maximale.</p> <p>Aide</p> <p>On pourra remarquer que puisque <code>vmax[16] = vmax[7] + prix[9]</code> cela signifie qu'une d\u00e9coupe maximale peut-\u00eatre obtenue avec un morceau de taille 9 et la  d\u00e9coupe maximale d'une barre de taille 7. En r\u00e9p\u00e9tant ce processus de proche en proche on peut d\u00e9terminer la taille des morceaux d'une d\u00e9coupe de valeur maximale.</p> </li> <li> <p>On peut aussi modifier la fonction <code>valeur_max</code> ci-dessus afin qu'elle renvoie non pas la valeur de la d\u00e9coupe mais la d\u00e9coupe elle-m\u00eame.</p> </li> </ol>"},{"location":"itc/progdyn/#exercice-15-probleme-du-sac-a-dos","title":"Exercice 15 : Probl\u00e8me du sac \u00e0 dos","text":"<p>On dispose d\u2019un sac \u00e0 dos pouvant contenir un poids maximal \\(P\\) et de \\(n\\) objets ayant chacun un poids \\((p_i)_{0\\leq i \\leq n-1}\\) et une valeur \\((v_i)_{0\\leq i \\leq n-1}\\). On suppose dans la suite que les objets sont rang\u00e9s par ordre croissant de poids. Le probl\u00e8me du sac \u00e0 dos consiste \u00e0 remplir ce sac en maximisant la valeur des objets qu\u2019il contient. </p> <ol> <li> <p>Proposer un programme r\u00e9solvant ce probl\u00e8me par un algorithme glouton.</p> <p>Aide</p> <p>On rappelle que cet algorithme consiste \u00e0 :</p> <ul> <li>classer les objets par ordre d'importance (rapport poids/valeur, valeur, ...) </li> <li>remplir le sac en commen\u00e7ant par les objets de plus grande importance et en ajoutant l'objet tant que le poids maximal n'est pas atteint.</li> </ul> </li> <li> <p>On consid\u00e8re les objets \\(\\{(3.5,25),(3,18),(2.5,14),(2,10)\\}\\) avec un sac de poids maximal de 5 :</p> <ol> <li>Donner le r\u00e9sultat de l'algorithme glouton (en utilisant le crit\u00e8re de classement de votre choix)</li> <li>Le r\u00e9sultat obtenu est-il optimal ?</li> </ol> </li> <li> <p>On veut maintenant r\u00e9soudre ce probl\u00e8me par programmation dynamique :</p> <ol> <li> <p>Etablir une relation de r\u00e9currence entre diff\u00e9rentes instances du probl\u00e8me.</p> <p>Aide</p> <p>On pourra noter  \\(S(p,k)\\) le poids maximal atteignable pour un sac de poids maximal \\(p\\) avec les objets \\((p_i,v_i)_{0 \\leq i \\leq k}\\) et chercher une relation de r\u00e9currence liant \\(S(P,k)\\) \u00e0  d'autres instances du probl\u00e8mes en distinguant deux cas :</p> <ul> <li>\\(p_k \\leq p\\) et donc on peut (ou pas) prendre l'objet d'indice \\(k\\)</li> <li>\\(p_k &gt; p\\) et donc l'objet d'indice \\(k\\) ne rentre pas dans le sac</li> </ul> </li> <li> <p>En d\u00e9duire une fonction Python permettant de d\u00e9terminer la valeur maximale du sac.</p> </li> <li>D\u00e9terminer un remplissage du sac r\u00e9alisant la valeur maximale.</li> <li> <p>Tester votre programme sur les objets ci-dessous avec un poids  maximal de 4 kg.</p> <p></p> </li> </ol> </li> </ol>"},{"location":"itc/progdyn/#exercice-16-distance-dedition","title":"Exercice 16 : Distance d'\u00e9dition","text":"<p>La distance d'\u00e9dition (ou distance de Levenshtein) entre deux chaines de caract\u00e8res \\(M\\) et \\(N\\) est le nombre de caract\u00e8res qu'il faut supprimer, ins\u00e9rer ou remplacer pour passer d'une chaine \u00e0 l'autre, on la note \\(D(M,N)\\).</p> <p>Par exemple, la distance d'\u00e9dition entre \"TEST\" et \"VESTE\" est de deux (une insertion et une substitution). On note \\(l_m\\) la longueur de \\(M\\) et \\(l_n\\) celle de \\(M\\), \\(M_i\\) les \\(i\\) (\\(0 \\leq i &lt; l_M\\)) premiers caract\u00e8res  de la chaine \\(M\\) et \\(N_j\\) les \\(j\\) (\\(0 \\leq j &lt; l_N\\)) premiers caract\u00e8res de la chaine \\(N\\) et \\(d(i,j) = D(M_i,N_j)\\)</p> <ol> <li>Donner les cas de base suivantes :  \\(d(i,0)\\) et \\(d(0,j)\\)</li> <li>Exprimer \\(d(i,j)\\) en fonction de \\(d(i,j-1)\\), \\(d(i-1,j)\\) et \\(d(i-1,j-1)\\), en distinguant le cas o\u00f9 le \\(i\\)\u00e8me caract\u00e8re de \\(M\\) con\u00efncide avec le \\(j\\)i\u00e8me de \\(N\\) ou non.</li> <li>Coder une fonction Python permettant de r\u00e9pondre au probl\u00e8me</li> <li>A l'aide de la matrice \\(d(i,j)\\) (\\(0 \\leq i &lt; l_M\\), (\\(0 \\leq j &lt; l_N\\))) reconstruire les op\u00e9rations permettant de passer de \\(M\\) \u00e0 \\(N\\).</li> </ol>"},{"location":"itc/progression/","title":"Progression Informatique Tronc Commun","text":""},{"location":"itc/progression/#semestre-1","title":"Semestre 1","text":"Th\u00e8me Titre C0- Faire le point ! C1- Bases de Python C2- Listes C3- Fichiers C4- Discipline de programmation C5- Dictionnaires C6- R\u00e9cursivit\u00e9"},{"location":"itc/progression/#semestre-2","title":"Semestre 2","text":"Th\u00e8me Titre C7- Algorithmes gloutons C8- Tris C9- Repr\u00e9sentation des entiers C10- Terminaison et corrections C11- Graphes C12- Complexit\u00e9 C13- Repr\u00e9sentation des flottants C14- Plus courts chemins dans un graphe C15- Manipulation d'images"},{"location":"itc/progression/#semestre-3","title":"Semestre 3","text":"Th\u00e8me Titre C16- Un peu de Python C17- Introduction aux bases de donn\u00e9es C18- Programmation dynamique C19- Requ\u00eates sur plusieurs tables C20- k plus proches voisins, k-moyennes C21- Algorithme pour l'\u00e9tude des jeux"},{"location":"itc/recursivite/","title":"C6 R\u00e9cursivit\u00e9","text":""},{"location":"itc/recursivite/#cours","title":"Cours","text":"<p>Support de cours chapitre 6 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"itc/recursivite/#exemple-introductif","title":"Exemple introductif","text":"<p>On veut \u00e9crire une fonction qui produit l'affichage de triangles de <code>n</code> lignes, la premi\u00e8re ligne contenant un <code>*</code>, la seconde deux <code>*</code> et ainsi de suite. Par exemple pour <code>n=4</code>, la fonction doit afficher : <pre><code>*\n**\n***\n****\n</code></pre></p> <p>Une des possibilit\u00e9s est d'utiliser une boucle, on dit que la fonction est it\u00e9rative  : <pre><code>def triangle(n):\n    for i in range(1,n+1):\n        print(\"*\"*i)\n</code></pre></p> ###(D\u00e9s-)Active le code apr\u00e8s la ligne <code># Tests</code> (insensible \u00e0 la casse)(Ctrl+I) Entrer ou sortir du mode \"deux colonnes\"(Alt+: ; Ctrl pour inverser les colonnes) Entrer ou sortir du mode \"plein \u00e9cran\"(Esc) Tronquer ou non le feedback dans les terminaux (sortie standard &amp; stacktrace / relancer le code pour appliquer) Si activ\u00e9, le texte copi\u00e9 dans le terminal est joint sur une seule ligne avant d'\u00eatre copi\u00e9 dans le presse-papierEx\u00e9cuter le code(Ctrl+S)T\u00e9l\u00e9chargerT\u00e9l\u00e9verserR\u00e9initialiser l'\u00e9diteurSauvegarder dans le navigateur <p>En observant la repr\u00e9sentation ci-dessous, on constate aussi qu'il est possible de d\u00e9finir un triangle de <code>5</code> lignes par rappport \u00e0 un triangle de <code>4</code> lignes, et plus g\u00e9n\u00e9ralement un triangle de <code>n</code> lignes par rapport \u00e0 un triangle de <code>n-1</code> lignes : </p> <p></p> <p>En effet, construire un triangle de <code>n</code> lignes c'est :</p> <ul> <li>construire un triangle de <code>n-1</code> lignes</li> <li>ajouter une ligne de <code>n</code> \u00e9toiles</li> </ul> <p>on vient de donner une m\u00e9thode de construction r\u00e9cursive, qui doit se compl\u00e9ter en pr\u00e9cisant qu'elle n'est valable que pour <code>n&gt;0</code>. Cette d\u00e9finition trouve se traduit en python par : <pre><code>def triangle_recursif(n):\n    if n&gt;0:\n        triangle_recursif(n-1)\n        print('*'*n)\n</code></pre></p>"},{"location":"itc/recursivite/#definition","title":"D\u00e9finition","text":"<p>A retenir</p> <p>Une fonction est dite r\u00e9cursive lorsqu'elle fait appel \u00e0 elle-m\u00eame. Par cons\u00e9quent,</p> <ul> <li>une fonction r\u00e9cursive permet, comme une boucle, de r\u00e9p\u00e9ter des instructions puisque le bloc d'ex\u00e9cution de la fonction est rappel\u00e9 (mais avec des param\u00e8tres diff\u00e9rents).</li> <li>une m\u00eame fonction peut donc se programmer de fa\u00e7on it\u00e9rative (avec des boucles) ou de fa\u00e7on r\u00e9cursive (en s'appelant elle-m\u00eame).</li> <li>une fonction r\u00e9cursive doit toujours contenir au moins une condition d'arr\u00eat (sinon elle s'appellera elle-m\u00eame \u00e0 l'infini)</li> </ul>"},{"location":"itc/recursivite/#exemples-corriges","title":"Exemples corrig\u00e9s","text":""},{"location":"itc/recursivite/#factorielle-dun-entier","title":"Factorielle d'un entier","text":"<p>La factorielle d'un entier est le produit de cet entier par tous ceux qui le pr\u00e9c\u00e8dent (except\u00e9 0). Cette fonction a d\u00e9j\u00e0 \u00e9t\u00e9 programm\u00e9 de fa\u00e7on it\u00e9rative mais elle s'exprime aussi par rapport \u00e0 elle m\u00eame et donc peut \u00eatre programm\u00e9 de fa\u00e7on r\u00e9cursive, en effet : \\(n! = n \u00a0\\times \\underline{(n-1)\\times \\dots \\times 1}\\) et puisque la partie soulign\u00e9e vaut \\((n-1)!\\) : \\(n! = n \\times (n-1)!\\) Cette \u00e9criture se traduit directement en Python par : <pre><code>def factorielle(n):\n    if n==0:\n        return 1\n    else:\n        return n*factorielle(n-1)\n</code></pre></p> <p>Il faut bien comprendre que par exemple pour calculer <code>factorielle(4)</code> python proc\u00e9dera de la fa\u00e7on suivante :</p> <ul> <li>calculer <code>factorielle(3)</code> et le multiplier par 4</li> <li>calculer <code>factorielle(2)</code> et le multiplier par 3</li> <li>calculer <code>factorielle(1)</code> et le multiplier par 2</li> <li>calculer <code>factorielle(0)</code> et le multiplier par 1</li> <li>comme la condition d'arr\u00eat donc <code>factorielle(0)=1</code>, on peut remonter dans le calcul et obtenir 24</li> </ul>"},{"location":"itc/recursivite/#somme-des-elements-dune-liste","title":"Somme des \u00e9l\u00e9ments d'une liste","text":"<p>La somme des \u00e9lements d'une liste \\(l = [l[0],\\dots l[1]]\\) peut s'exprimer ainsi :</p> <ul> <li>si la liste est vide c'est z\u00e9ro (condition d'arr\u00eat)</li> <li>sinon c'est le premier \u00e9l\u00e9ment de la liste plus la somme de la liste \u00e0 partir du second \u00e9l\u00e9ment</li> </ul> <p>c'est donc une d\u00e9finition r\u00e9cursive puisque nous avons exprim\u00e9 la somme d'une liste \u00e0 partir de la somme d'une (autre) liste. En python, il suffit de pouvoir exprimer la liste \u00e0 partir du second \u00e9lement \u00e0 l'aide du tranche et on peut \u00e9crire :</p> <pre><code>def somme(l):\n    if l==[]:\n        return 0\n    else:\n        return l[0] + somme(l[1:])\n</code></pre>"},{"location":"itc/recursivite/#retourner-une-chaine-de-caractere","title":"Retourner une chaine de caract\u00e8re","text":"<p>Note</p> <p>En cas de besoin, on conseille de revoir les tranches avant d'aborder cet exemple.</p> <p>On veut \u00e9crire une fonctions r\u00e9cursive qui renvoie la chaine de caract\u00e8re donn\u00e9e en argument \u00e0 l'envers. Par exemple <code>envers(\"Python\")</code> doit renvoyer <code>\"nohtyP\"</code>. Comme pr\u00e9c\u00e9demment, afin d'\u00e9crire une version r\u00e9cursive de cette fonction, il faut exprimer l'envers d'une chaine par rapport \u00e0 l'envers d'une autre chaine (plus courte). On peut remarquer que pour \u00e9crire une chaine \u00e0 l'envers, il suffit d'\u00e9crire son dernier caract\u00e8re puis l'envers du reste de la chaine ce qui se traduit en Python par :</p> <pre><code>def envers(chaine):\n    if chaine==\"\":\n        return \"\"\n    else:\n        return chaine[-1] + envers(chaine[0:-1])\n</code></pre>"},{"location":"itc/recursivite/#exercice-1-a-vous-de-jouer","title":"Exercice 1 : A vous de jouer !","text":"<ol> <li> <p>Ecrire une version r\u00e9cursive des fonctions suivantes :</p> <ol> <li> <p>Fonction <code>puissance</code>, qui prend en argument un nombre \\(x\\) et un entier \\(n\\) (positif) et renvoie \\(x^n\\).</p> </li> <li> <p>Fonction <code>palindrome</code>, qui prend en argument une chaine de caract\u00e8re et qui renvoie <code>true</code> lorsque cette chaine est un palindrome</p> </li> <li> <p>Fonction <code>maximum</code>, qui prend en argument une liste d'entiers et renvoie le maximum des \u00e9l\u00e9ments de cette liste.</p> </li> <li> <p>Fonction <code>occurences</code>, qui prend en argument une liste d'entiers <code>l</code> et un entier <code>n</code> et renvoie le nombre d'apparitions de <code>n</code> dans <code>l</code>.</p> </li> </ol> </li> <li> <p>Modifier la fonction <code>triangle_recursif</code> de l'exemple introductif afin d'afficher le m\u00eame triangle mais \"pointe vers le bas\".</p> </li> <li> </li> </ol> <p>Pour calculer \\(a ^ {13}\\) on peut effectuer \\(13\\) multiplications en calculant \\(1\\times a \\times a \\dots \\times a\\), une autre m\u00e9thode consiste \u00e0 calculer d'abord \\(a^6\\) puis \u00e0 l'\u00e9lever au carr\u00e9 et \u00e0 multiplier par \\(a\\). C'est \u00e0 dire qu'on utilise l'\u00e9galit\u00e9 \\(a^{13} = \\left(a^6\\right)^2 \\times a\\). On obtient donc une nouvelle \u00e9criture r\u00e9cursive qui s'av\u00e8re encore plus simple \u00e0 mettre en oeuvre lorsque l'exposant est paire, par exemple \\(a^{20} = \\left(a^{10}\\right)^2\\).</p> <ol> <li>V\u00e9rifier sur le cas de \\(a^{13}\\) que le nombre de multiplications n\u00e9cessaires est inf\u00e9rieur \u00e0 celui de la m\u00e9thode na\u00efve</li> <li>Ecrire une fonction Python impl\u00e9mentant ce nouvel algorithme (on fera bien attention \u00e0 traiter le cas de l'exposant paire et celui de l'exposant impaire)</li> </ol>"},{"location":"itc/recursivite/#exercice-2-exponentiation-rapide","title":"Exercice 2 : Exponentiation rapide","text":""},{"location":"itc/recursivite/#exercice-3-chateau-de-cartes","title":"Exercice 3 : Chateau de cartes","text":"<p>Un ch\u00e2teau de cartes est un \u00e9chafaudage de cartes \u00e0 jouer. On a repr\u00e9sent\u00e9 ci-dessous des chateaux de cartes \u00e0 1, 2 et 3 \u00e9tages (cr\u00e9dit : DREAMaths):</p> <p></p> <ol> <li> <p>On note \\(c_n\\) le nombre de cartes n\u00e9cessaires pour construire un chateau de cartes \u00e0 \\(n\\) \u00e9tages. Etablir une relation de r\u00e9currence entre \\(c_n\\) et \\(c_{n-1}\\).</p> </li> <li> <p>Ecrire  une fonction r\u00e9currente qui renvoie \\(c_n\\) pour la valeur \\(n\\) fournie en argument .</p> </li> <li> <p>Calculer \\(c_{100}\\) \u00e0 l'aide de votre programme. Vous pouvez v\u00e9rifier le r\u00e9sultat fourni par votre programme ci-dessous : </p> </li> <li> <p>Retrouver ce r\u00e9sultat par le calcul</p> </li> </ol>"},{"location":"itc/recursivite/#exercice-4-additions-et-soustractions","title":"Exercice 4 : Additions et soustractions","text":"<p>On suppose qu'on ne dispose que de deux op\u00e9rations : ajouter 1 ou retrancher 1.</p> <ol> <li>\u00c9crire \u00e0 l'aide de ces deux op\u00e9rations, une version it\u00e9rative de l'addition de deux entiers.</li> <li>M\u00eame question avec une version r\u00e9cursive.</li> </ol>"},{"location":"itc/recursivite/#exercice-5-algorithme-deuclide-de-calcul-du-pgcd","title":"Exercice 5 : Algorithme d'Euclide de calcul du pgcd","text":"<ol> <li>Revoir si besoin l'algorithme d'Euclide permettant de calculer le pgcd de deux entiers.</li> <li>Donner une impl\u00e9mentation it\u00e9rative de cet algorithme</li> <li>Donner une impl\u00e9mentation r\u00e9cursive de cet algorithme</li> </ol>"},{"location":"itc/recursivite/#exercice-6-chiffres-romains","title":"Exercice 6 : Chiffres romains","text":"<p>En num\u00e9ration romaine, les nombres s'\u00e9crivent avec les symboles suivants :</p> <ul> <li>I valant 1</li> <li>V valant 5</li> <li>X valant 10</li> <li>L valant 50</li> <li>C valant 100</li> <li>D valant 500</li> <li>M valant 1000</li> </ul> <p>On lit un nombre de la gauche vers la droite, si la valeur d'un symbole est inf\u00e9rieure \u00e0 celle du suivant alors on retranche sa valeur du total, sinon on l'ajoute. Par exemple, <code>XIV</code> vaut <code>14</code> car la valeur du <code>I</code> doit \u00eatre retranch\u00e9e (car inf\u00e9rieure \u00e0 celle de <code>V</code>).</p> <ol> <li> <p>Ecrire une fonction de signature <code>int valeur_symbole(char s)</code> qui renvoie la valeur du symbole donn\u00e9 en argument.</p> <p>Note</p> <p>On peut utiliser une suite de <code>if</code> imbriqu\u00e9s ou alors un <code>switch</code> (mais qui n'est pas au programme de MP2I).</p> </li> <li> <p>Ecrire une fonction r\u00e9cursive de signature <code>int valeur(char s[])</code> qui renvoie la valeur du nombre romains <code>s</code> donn\u00e9 sous la forme d'une suite de caract\u00e8res.</p> </li> </ol>"},{"location":"itc/recursivite/#exercice-7-dessin-recursif","title":"Exercice 7 : Dessin r\u00e9cursif","text":"<p>Attention</p> <p>L'exercice suivant utilise le module <code>turtle</code>, pour utiliser ce module, on \u00e9crira toujours en d\u00e9but de programme : <pre><code>import turtle\ncrayon = turtle.Turtle()\npapier = turtle.Screen()\n</code></pre> Afin de disposer d'un objet <code>crayon</code> et d'un <code>papier</code> (ces noms sont \u00e0 choisir librement).  En fin de programme, on \u00e9crira toujours <pre><code>papier.exitonclick()\n</code></pre> De fa\u00e7on \u00e0 ce que la fen\u00eatre graphique contenant le dessin attende un click pour se refermer.</p> <p>Le crayon est initialement situ\u00e9 en \\((0,0)\\) et orient\u00e9 vers la droite. Pour manipuler le crayon, on dipose notamment  de :</p> <ul> <li><code>crayon.forward(l)</code> pour le faire avancer de <code>l</code> pixels</li> <li><code>crayon.left(d)</code> et <code>crayon.right(d)</code> afin de tourner \u00e0 droite ou \u00e0 gauche de <code>d</code> degr\u00e9s.</li> <li><code>crayon.penup()</code> et <code>crayon.pendown()</code> pour relever ou abaisser le crayon.</li> <li><code>crayon.goto(x,y)</code> pour d\u00e9placer le crayon au point de coordonn\u00e9es <code>(x,y)</code></li> </ul> <p>On pourra consulter la documentation compl\u00e8te du module.</p> <ol> <li>Ecrire une fonction <code>carre</code> qui prend en argument un entier <code>n</code> et dessiner \u00e0 partir de la position et de l'orientation courant de la tortue un carr\u00e9 de c\u00f4t\u00e9 <code>n</code> pixels.</li> <li> <p>Dessiner une suite de carr\u00e9s imbriqu\u00e9s tel que repr\u00e9sent\u00e9 ci-dessous (le carr\u00e9 initial mesure 300 pixels de c\u00f4t\u00e9 et la taille diminue ensuite de 30 pixels \u00e0 chaque carr\u00e9) </p> </li> <li> <p>Si vous aviez donn\u00e9 une version it\u00e9rative de ce dessin, en faire une version r\u00e9cursive et inversement.</p> </li> </ol>"},{"location":"itc/recursivite/#exercice-8-dessin-du-flocon-de-von-koch","title":"Exercice 8 : Dessin du flocon de Von Koch","text":"<p>Attention</p> <p>L'exercice suivant utilise le module <code>turtle</code> d\u00e9j\u00e0 rencontr\u00e9 dans l'exercice pr\u00e9c\u00e9dent.</p> <p>La courbe de Koch est une figure qui se construit de mani\u00e8re r\u00e9cursive. Le cas de base d'ordre 0 et de longueur \\(l\\) s'obtient en tra\u00e7ant un segment de longueur \\(l\\) . Le cas r\u00e9cursif d'ordre \\(n&gt;0\\) s'obtient en tra\u00e7ant successivement quatre courbes d'ordre \\(n-1\\) et de longueur \\(l/3\\) de la fa\u00e7on suivante :</p> <p></p> <ol> <li> <p>A l'aide du module <code>turtle</code>, produire une image tel que ci-dessous qui repr\u00e9sente la courbe de Koch d'ordre 5. Le r\u00e9sultat produit ci-dessus a \u00e9t\u00e9 obtenu gr\u00e2ce \u00e0 l'appel <code>koch(600,5)</code> (la largeur de l'image est de 500px et sa hauteur 300) </p> </li> <li> <p>En utilisant cette fonction construire le flocon de Koch, c'est-\u00e0-dire la figure obtenu en construisant les courbe de Koch sur les trois c\u00f4t\u00e9s d'un triangle \u00e9quilat\u00e9ral.</p> </li> </ol>"},{"location":"itc/recursivite/#exercice-9-suite-look-and-say","title":"Exercice 9 : Suite look and say","text":"<p>La suite look and say a pour premiers termes : <code>1, 11, 21, 1211, 111221, 312211, ...</code> en effet chaque terme s'obtient en regardant puis en disant le terme pr\u00e9c\u00e9dent. Le premier terme <code>1</code> se lit \"un un\" et donc le second terme est <code>11</code> qui se lit <code>deux un</code> et donc le troisi\u00e8me terme est <code>21</code> qui se lit <code>un deux un un</code> et donc le quatri\u00e8me terme est <code>1211</code> et ainsi de suite. Le but de l'exercice est de g\u00e9n\u00e9rer \u00e0 l'aide de Python les termes de cette  suite.</p> <ol> <li> <p>Ecrire une fonction <code>suivant</code> qui prend en argument une chaine de caract\u00e8res <code>terme</code> repr\u00e9sentant un terme de la suite et renvoie le terme suivant.</p> <p>Aide</p> <p>On pourra proc\u00e9der en parcourant la chaine <code>s</code> tout en mettant \u00e0 jour deux variables :</p> <ul> <li>l'une contenant le caract\u00e8re courant</li> <li>l'autre son nombre d'apparition</li> </ul> <p>Lorsque le caract\u00e8re suivant n'est pas le caract\u00e8re courant on remet \u00e0 1 nombre d'apparition.</p> <p>Tester votre fonction en calculant le 15e terme de la suite :   </p> </li> <li> <p>Faire une conjecture sur les chiffres pouvant apparaitre dans les termes de cette suite. Puis prouver cette conjecture (on pourra raisonner par r\u00e9currence).</p> </li> <li> <p>On souhaite maintenant utiliser le fait que les seuls chiffres apparaissant dans la suite look and say sont 1, 2 et 3 afin d'\u00e9crire une version r\u00e9cursive du calcul du terme suivant. Pour cela, le cas r\u00e9cursif consiste \u00e0 consid\u00e9rer les trois premiers chiffres du terme pr\u00e9c\u00e9dent et le cas de base est celui d'un terme contenant moins de 3 chiffres. Ecrire cette version r\u00e9cursive.</p> </li> </ol>"},{"location":"itc/revisions/","title":"C16 Un peu de Python","text":""},{"location":"itc/revisions/#cours","title":"Cours","text":"<p>Support de cours chapitre 16 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p> <p>Memento de Python </p> <p>Les exemples vu en cours</p> <ul> <li> Syracuse <pre><code>def syracuse(n):\n    if n%2 == 0:\n        return n//2\n    else:\n        return 3*n+1\n</code></pre> </li> <li> S\u00e9rie harmonique <pre><code>def serie_harmonique(n):\n    somme = 0\n    for i in range(1,n+1):\n        somme = somme + 1/i\n    return somme\n</code></pre> </li> <li> Calcul du PGCD <pre><code>def pgcd(a,b):\n    while b!=0:\n        a,b = b, a%b\n    return a\n</code></pre> </li> <li> Recherche simple dans une liste <pre><code>def est_dans(n,l):\n    for x in l:\n        if x==n:\n            return True\n    return False\n</code></pre> </li> <li> maximum des \u00e9l\u00e9ments d'une liste <pre><code>def max_liste(l):\n    # la liste doit \u00eatre non vide\n    assert len(l)!=0\n    current_max = l[0]\n    for elt in l:\n        if elt&gt;current_max:\n            current_max = elt\n    return current_max\n</code></pre> </li> </ul>"},{"location":"itc/revisions/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"itc/revisions/#exercice-1-factorielle","title":"Exercice 1 : Factorielle","text":"<p>On appelle factorielle d'un entier \\(n\\) et on note \\(n!\\) le produit de cet entier par tous ceux qui le pr\u00e9c\u00e8dent \u00e0 l'exception de z\u00e9ro. Et on convient d'autre part que \\(0!=1\\). Par exemple \\(5! = 5 \\times 4 \\times \\times 3 \\times 2 \\times 1 = 120\\). Ecrire une fonction <code>factorielle</code> qui prend en argument un entier <code>n</code> et renvoie sa factorielle.</p> <p>V\u00e9rifier en entrant ici la valeur de \\(42!\\) :   </p>"},{"location":"itc/revisions/#exercice-2-calcul-des-termes-dune-suite","title":"Exercice 2 : Calcul des termes d'une suite","text":"<p>On consid\u00e8re la suite \\((u_n)_{n \\in \\mathbb{N}}\\) d\u00e9finie par \\(u_0 = 0.7\\) et \\(u_{n+1} = 3.5 u_n(1-u_n)\\). Calculer \\(u_{2024}\\) (on donnera la valeur arrondie au centi\u00e8me).</p> <p>V\u00e9rifier votre r\u00e9ponse :     (valeur arrondie au centi\u00e8mre)</p>"},{"location":"itc/revisions/#exercice-3-calcul-dune-somme","title":"Exercice 3 : Calcul d'une somme","text":"<p>Calculer la somme des entiers compris entre 1 et 100000 qui se terminent par 7 ou sont divisibles par 19.</p> <p>V\u00e9rifier votre r\u00e9ponse :   </p>"},{"location":"itc/revisions/#exercice-4-somme-des-codes-des-caracteres","title":"Exercice 4 : Somme des codes des caract\u00e8res","text":"<p>En informatique, chaque caract\u00e8re est associ\u00e9 \u00e0 un entier : son code unicode, par exemple le code unicode du caract\u00e8re <code>A</code> est 65. En Python, pour obtenir le code unicode d'un caract\u00e8re on utilise la fonction <code>ord</code>, ainsi <code>ord('A')</code> vaut 65. D\u00e9terminer la somme de de tous les codes unicode des caract\u00e8res de la phrase \"faire un peu de Python, c'est vraiment trop bien !\" ? Attention : les guillemets ne font pas partie de la phrase. </p> <p>Remarques</p> <p>L'unicode \u00e9tend le code ascii qui est parfois plus connu. En effet, lorsque le code ascii d'un caract\u00e8re existe, il correspond \u00e0 son code unicode. Ainsi le code ascii de <code>A</code> existe (et vaut donc aussi 65), mais <code>\u00f9</code> n'est pas un caract\u00e8re ascii et n'a donc pas de code ascii mais a bien un code unicode : 249.</p> <p>V\u00e9rifier votre r\u00e9ponse :   </p>"},{"location":"itc/revisions/#exercice-5-nombre-de-2-dans-la-factorielle-dun-nombre","title":"Exercice 5 : Nombre de 2 dans la factorielle d'un nombre","text":"<p>On rappelle que la factorielle d'un entier naturelle \\(n\\), not\u00e9e \\(n!\\), est le produit des entiers strictement positifs inf\u00e9rieurs ou \u00e9gaux \u00e0 \\(n\\). Par exemple \\(5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120\\). Quel est le nombre de 2 dans l'\u00e9criture d\u00e9cimale de \\(100!\\) ?</p> <p>V\u00e9rifier votre r\u00e9ponse :   </p>"},{"location":"itc/revisions/#exercice-6-nombres-premiers","title":"Exercice 6 : Nombres premiers","text":"<ol> <li> <p>Ecrire une fonction <code>racine</code> qui prend en entr\u00e9e un entier <code>n</code> positif et renvoie le plus grand entier <code>k</code> tel que <code>k * k &lt;= n</code>.     Par exemple, <code>racine(9)</code> renvoie 3 et <code>racine(18)</code> renvoie 4.</p> </li> <li> <p>Ecrire une fonction qui prend en argument un nombre et renvoie <code>True</code> lorsque ce nombre est premier et <code>False</code> sinon.</p> <p>Aide</p> <p>On peut se contenter de tester si les entiers \\(k\\) compris entre 2 et la partie enti\u00e8re de \\(\\sqrt{n}\\) inclus divisent \\(n\\) et utiliser la question 1.</p> </li> <li> <p>Ecrire une fonction <code>somme_premiers</code> qui prend en entr\u00e9e un entier <code>n</code> et calcule la somme des nombres premiers inf\u00e9rieurs ou \u00e9gaux \u00e0 <code>n</code>. Par exemple <code>somme_premiers(10)</code> vaut <code>2 + 3 + 5 + 7 = 17</code></p> </li> <li> <p>Tester votre fonction en calculant <code>somme_premiers(10000)</code> : </p> </li> </ol>"},{"location":"itc/revisions/#exercice-7-parcours-de-chaine-de-caracteres","title":"Exercice 7 : Parcours de chaine de caract\u00e8res","text":"<ol> <li> <p>Ecrire une fonction <code>contient</code> qui prend en argument une chaine de caract\u00e8res <code>chaine</code> et un caractere <code>c</code> et qui renvoie <code>True</code> si <code>c</code> est dans <code>chaine</code> et \u00a0<code>False</code> sinon.</p> </li> <li> <p>Ecrire une fonction <code>occurrence</code> qui prend en argument une chaine de caract\u00e8res <code>chaine</code> et un caractere <code>c</code> et qui renvoie le nombre d'apparitions de <code>c</code> dans <code>chaine</code>.</p> </li> <li> <p>On consid\u00e8re la chaine <code>mystere</code> ci-dessous compos\u00e9e de caract\u00e8res tr\u00e8s semblables difficiles \u00e0 distinguer \u00e0 l'oeil nu : <pre><code>mystere = \"O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8O0oQ0OoQD0OQ0o0OQD80oQ0OoQD0OQ0o0OQD8\"\n</code></pre> Combien de <code>0</code> contient cette chaine ? V\u00e9rifier votre r\u00e9ponse :   </p> </li> </ol>"},{"location":"itc/revisions/#exercice-8-conjecture-de-syracuse","title":"Exercice 8 : Conjecture de syracuse","text":"<p>La conjecture de syracuse est l'hypoth\u00e8se selon laquelle la suite  \\((u_n)_{n \\in \\mathbb{N}}\\) d\u00e9finie par son premier terme \\(u_0\\) et la relation de r\u00e9currence : \\(u_{n+1} = \\left\\{ \\begin{array}{ll} \\dfrac{u_n}{2} &amp; \\mathrm{\\ si\\ } u_n \\mathrm{\\ est \\ paire} \\\\ 3u_n+1 &amp; \\mathrm{\\ sinon} \\\\ \\end{array} \\right.\\) atteint 1. Dans la suite de cette exercice on supposera cette conjecture v\u00e9rifi\u00e9e (bien qu'elle n'ait pas \u00e9t\u00e9 math\u00e9matiquement prouv\u00e9e, la conjecture a \u00e9t\u00e9 v\u00e9rifi\u00e9e num\u00e9riquement pour tous les entiers jusqu'\u00e0 \\(2^{58}\\)).</p> <ol> <li>Ecrire la fonction <code>terme_suivant</code> qui prend en argument un entier \\(n\\) et renvoie \\(\\dfrac{n}{2}\\) si \\(n\\) est paire et \\(3n+1\\) sinon.</li> <li> <p>Ecrire une fonction <code>duree_vol</code> qui prend en argument un entier \\(u_0\\) et renvoie le plus petit entier \\(n\\) appel\u00e9 dur\u00e9e de vol tel que \\(u_n=1\\). Par exemple <code>duree_vol(7)</code> doit renvoyer 16, en effet les termes successif de la suite sont <code>7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4 ,2, 1</code>. Tester votre fonction en calculant la dur\u00e9e de vol de 123456789 :  V\u00e9rifier votre r\u00e9ponse :   </p> </li> <li> <p>Quelle est la plus grande dur\u00e9e de vol lorsque \\(1 \\leq u_0 \\leq 10000\\) ? V\u00e9rifier votre r\u00e9ponse :   </p> </li> <li> <p>V\u00e9rifier que cette dur\u00e9e de vol maximale est atteinte pour une seule valeur de \\(u_0\\), quelle est cette valeur ? V\u00e9rifier votre r\u00e9ponse :   </p> </li> <li> <p>L'altitude maximale est la valeur maximale atteinte par la suite de Syracuse. Ecrire une fonction prenant \\(u_0\\) et renvoyant l'altitude maximale atteinte. Par exemple l'altitude maximal de \\(u_0 = 7\\) est \\(52\\) (voir les termes de cette suite \u00e0 la question 2.).</p> </li> <li> <p>Quelle est l'altitude maximale de \\(9331\\) ? V\u00e9rifier votre r\u00e9ponse :   </p> </li> </ol>"},{"location":"itc/revisions/#exercice-9-operations-sur-les-listes","title":"Exercice 9 : Op\u00e9rations sur les listes","text":"<p>On consid\u00e8re la liste <code>carres</code> des \\(k\\) premiers carr\u00e9s des entiers strictement positifs, par exemple si \\(k=6\\), <code>carres = [1, 4, 9, 16, 25, 36]</code>. Sur cette liste on effectue les op\u00e9rations suivantes :</p> <ul> <li>on enl\u00e8ve les deux derniers \u00e9l\u00e9ments</li> <li>s'ils ont m\u00eame parit\u00e9 on calcule leur somme, sinon leur diff\u00e9rence (plus grand moins plus petit)</li> <li>on rajoute la valeur calcul\u00e9e \u00e0 l'\u00e9tape pr\u00e9c\u00e9dente (la somme ou la diff\u00e9rence) la fin de la liste</li> </ul> <p>Par exemple pour <code>carres = [1, 4, 9, 16, 25, 36]</code></p> <ul> <li>les deux derniers \u00e9l\u00e9ments sont <code>25</code> et <code>36</code>, ils sont enlev\u00e9s de la liste qui devient <code>[1, 4, 9, 16]</code></li> <li>ces deux entiers n'ont pas la m\u00eame parit\u00e9, on fait la diff\u00e9rence <code>36 - 25 = 11</code></li> <li>on ajoute cette valeur \u00e0 la fin de la liste qui devient <code>[1, 4, 9, 16, 11]</code> On renouvelle ce processus sur la liste obtenue jusqu'\u00e0 ce qu'elle contienne un unique \u00e9l\u00e9ment (dans l'exemple ci-dessous on obtient successivement <code>[1, 4, 9, 5]</code> puis <code>[1, 4, 14]</code> puis <code>[1, 18]</code> et enfin <code>[17]</code>).</li> </ul> <p>Quel est l'\u00e9l\u00e9ment restant dans le cas \\(k=100\\) ?</p> <p> </p>"},{"location":"itc/revisions/#exercice-10-somme-des-entiers-dans-un-fichier","title":"Exercice 10 : Somme des entiers dans un fichier","text":"<p>Le fichier <code>entiers.txt</code> t\u00e9l\u00e9chargeable ci-dessous contient sur chaque ligne un entier. Ecrire un programme Python qui lit ce fichier et fait la somme de ces entiers. entiers.txt </p> <p>V\u00e9rifier la r\u00e9ponse fournie par votre programme ci-dessous :</p> <p> </p>"},{"location":"itc/revisions/#exercice-11-recherche-dans-un-dictionnaire","title":"Exercice 11 : Recherche dans un dictionnaire","text":"<p>Pour cette exercice on utilise le dictionnaire t\u00e9l\u00e9chargeable ci-dessous: Dictionnaire </p> <ol> <li>Combien il y a-t-il de mots dans ce dictionnaire ?</li> <li>Lister tous les mots de 17 lettres de ce dictionnaire.</li> <li>Quel est le plus grand mot de ce dictionnaire ?</li> <li>Lister tous les mots de 5 lettres qui ont un d en deuxi\u00e8me position et se terminent par un e.</li> <li>Lister tous les mots palindromes de ce dictionnaire (un mot palindrome est un mot pouvant se lire indiff\u00e9remment dans les deux sens par exemple kayak ou \u00e9t\u00e9)</li> </ol>"},{"location":"itc/revisions/#exercice-12-probleme-de-joseph","title":"Exercice 12 : Probl\u00e8me de Joseph","text":"<p>Le but de l'activit\u00e9 est d'\u00e9crire un programme permettant de r\u00e9soudre le probl\u00e8me de Joseph en r\u00e9visant les listes de Python.</p> <ol> <li> <p>On repr\u00e9sente un cercle de <code>n</code> soldats par la liste <code>[1,2,...,n]</code>. Ecrire une fonction <code>soldats(n)</code> qui renvoie la liste <code>[1,2,....,n]</code></p> </li> <li> <p>Afin de rep\u00e9rer l'\u00e9p\u00e9e, on d\u00e9cide que le soldat qui la tient se situe toujours en premi\u00e8re position de la liste. Ainsi avec 5 soldats le cercle initial est <code>[1,2,3,4,5]</code> (<code>1</code> tient l'\u00e9p\u00e9e, il \u00e9limine 2 et passe l'\u00e9p\u00e9e \u00e0 3), donc apr\u00e8s une \u00e9tape la liste sera <code>[3,4,5,1]</code> (<code>3</code> tient l'\u00e9p\u00e9e) </p> </li> <li> <p>Programmer une fonction <code>josephus(n)</code> qui renvoie le soldat survivant pour un cercle de <code>n</code> soldats.</p> </li> <li> <p>Quel sera le survivant dans une cercle de 10000 soldats ?  </p> </li> </ol> <p>V\u00e9rifier votre r\u00e9ponse :   </p>"},{"location":"itc/revisions/#exercice-13-triangle-de-pascal","title":"Exercice 13 : Triangle de Pascal","text":"<p>Ecrire un programme qui prend en argument un entier \\(1 \\leq n \\leq 10\\) et affiche les \\(n\\) premi\u00e8res lignes du triangle de Pascal. Par exemple <code>pascal(4)</code> affiche : <pre><code>1\n1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1\n</code></pre></p> <p>Aide</p> <ul> <li>On rappelle que le coefficient situ\u00e9 ligne \\(n\\) et colonne \\(k\\) not\u00e9 \\(\\displaystyle{\\binom{n}{k}}\\) se d\u00e9duit de ceux de la ligne pr\u00e9c\u00e9dente gr\u00e2ce \u00e0 la formule de Pascal : \\(\\displaystyle{\\binom{n}{k} = \\binom{n-1}{k-1} + \\binom{n-1}{k}}\\)</li> <li>On pourra utiliser deux tableaux, l'un repr\u00e9sentant la ligne pr\u00e9c\u00e9dente et un second la ligne en cours de construction.</li> </ul>"},{"location":"itc/revisions/#exercice-14-crible-derastothene","title":"Exercice 14 : Crible d'Erastoth\u00e8ne","text":"<p>On rappelle qu'un nombre premier est un entier naturel ayant exactement deux diviseurs 1 et lui-m\u00eame, ainsi 13 est premier mais pas 15. Le crible d'Erastoth\u00e8ne est un algorithme permettant de trouver tous les nombres premiers inf\u00e9rieurs ou \u00e9gaux \u00e0 un entier <code>n</code> donn\u00e9. </p> <p>Algorithme</p> <ul> <li>on cr\u00e9e une liste de bool\u00e9ens <code>premiers</code> de taille <code>n+1</code></li> <li>on initialise le tableau \u00e0 <code>true</code> sauf <code>premiers[0]</code> et <code>premiers[1]</code> qui sont \u00e0 <code>false</code> puisque  \\(0\\) et \\(1\\) ne sont pas premiers.</li> <li>on parcourt ce tableau si <code>premiers[i]</code> est \u00e0 <code>true</code> alors on met tous ses multiples (sauf lui-m\u00eame) \u00e0 <code>false</code></li> <li>le parcours s'arr\u00eate d\u00e8s que l'entier <code>i</code> est sup\u00e9rieur \u00e0 \\(\\sqrt{n}\\).  </li> </ul> <ol> <li> <p>Ecrire une fonction <code>crible</code> qui prend en param\u00e8tre un entier <code>n</code> et impl\u00e9mente cet algorithme. L'utiliser pour afficher les nombres premiers inf\u00e9rieurs \u00e0 100.</p> <p>Aide</p> <p>Vous devriez obtenir : <code>2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97</code></p> </li> <li> <p>Ecrire une fonction <code>somme_premiers</code> qui prend en argument un entier <code>seuil</code> et renvoie la somme de tous les nombres premiers inf\u00e9rieurs ou \u00e9gaux \u00e0 <code>seuil</code>. Par exemple <code>somme_premiers(100)</code> renvoie <code>1060</code></p> </li> <li> <p>Calculer la somme des 10000 premiers nombres premiers V\u00e9rifier votre r\u00e9ponse :   </p> </li> </ol>"},{"location":"itc/revisions/#exercice-15-tri-par-insertion","title":"Exercice 15 : Tri par insertion","text":"<p>Algorithme</p> <ul> <li>L'algorithme du tri par insertion consiste \u00e0 consid\u00e9rer qu'une partie de la liste (initialement vide) situ\u00e9e au d\u00e9but est d\u00e9j\u00e0 tri\u00e9e. On parcourt ensuite le reste de la liste et on ins\u00e8re chaque \u00e9l\u00e9ment \u00e0 la bonne position dans la partie d\u00e9j\u00e0 tri\u00e9e.  </li> <li>Pour r\u00e9aliser cette insertion, on pourra echanger l'\u00e9lement avec son voisin de gauche tant qu'il lui est sup\u00e9rieur et que le d\u00e9but de la liste n'est pas atteint.</li> </ul> <ol> <li> <p>Programmer cet algorithme.</p> </li> <li> <p>Cr\u00e9er la liste  \\(u\\) telle que le terme d'indice \\(i\\) de \\(u\\) soit  \\(u_i = i^2 - 564i + 77760\\), pour \\(0\\leqslant i &lt;&gt; 5000\\), trier cette liste par ordre croissant, et donner la valeur du terme d'indice \\(2024\\) V\u00e9rifier votre r\u00e9ponse :   </p> </li> </ol>"},{"location":"itc/revisions/#exercice-16-evolution-dune-chaine-de-caracteres","title":"Exercice 16 : Evolution d'une chaine de caract\u00e8res","text":"<p>On consid\u00e8re une chaine de caract\u00e8res initialement constitu\u00e9e de \\(k\\) caract\u00e8res <code>.</code> suivie d'un caract\u00e8re <code>#</code> puis de \\(k\\) caract\u00e8res <code>.</code>. Par exemple pour \\(k=5\\) la chaine est <code>.....#.....</code> (5 <code>.</code> suivi d'un <code>#</code> puis de 5 <code>.</code>). Cette chaine \u00e9volue de la fa\u00e7on suivante :</p> <ul> <li>si un <code>.</code> est entre un <code>#</code> et un <code>.</code>, il se transforme en <code>#</code> sinon il reste un <code>.</code></li> <li>si un <code>#</code> est entre deux <code>#</code> ou s'il a un <code>#</code> \u00e0 sa gauche et un <code>.</code> \u00e0 sa droite, il se transforme en <code>.</code> sinon il reste un <code>#</code></li> <li>le premier et le dernier caract\u00e8re ayant un seul voisin, ils ne sont pas affect\u00e9s par ces r\u00e8gles d'\u00e9volutions et restent toujours des <code>.</code></li> </ul> <p>Par exemple dans le cas \\(k=5\\) : les \u00e9tapes successives d'\u00e9volution sont :</p> <ul> <li><code>.....#.....</code> (\u00e9tat initial :)</li> <li><code>....###....</code> (\u00e9tape 1)</li> <li><code>...##..#...</code> (\u00e9tape 2)</li> <li><code>..##.####..</code> (\u00e9tape 3)</li> <li><code>.##..#...#.</code> (\u00e9tape 4)</li> <li><code>.#.####.##.</code> (\u00e9tape 5)</li> </ul> <p>Dans le cas \\(k=256\\), et \u00e0 l'\u00e9tape 1000, combien de <code>#</code> contient la chaine ?</p> Corrig\u00e9 <p>L'\u00e9volution d'une case ne d\u00e9pend que de son \u00e9tat et de celle de ses voisines imm\u00e9diates, on commence donc par \u00e9crire une fonction <code>evolution_case</code> qui prend en argument l'\u00e9tat de la case elle-m\u00eame (<code>centrale</code>), celle de la case pr\u00e9c\u00e9dente -(<code>precedente</code>) et celle de la case suivante (<code>suivante</code>) et on respecte scrupuleusement les informations de l'\u00e9nonc\u00e9 pour renvoyer l'\u00e9tat de case centrale apr\u00e8s \u00e9volution.</p> <pre><code>def evolution_case(precedente, centrale, suivante):\n    if centrale==\".\":\n        if (precedente==\"#\" and suivante==\".\") or (precedente==\".\" and suivante==\"#\"):\n            return '#'\n        else:\n            return \".\"\n    else:\n        if (precedente==\"#\" and suivante==\"#\") or (precedente==\"#\" and suivante==\".\"):\n            return '.'\n        else:\n            return \"#\"\n</code></pre> <p>Il reste ensuite \u00e0 utiliser cette fonction pour faire \u00e9voluer une liste de cases repr\u00e9sent\u00e9e par une chaine de caract\u00e8res(<code>cases</code>) et construire le nouvel \u00e9tat apr\u00e8s \u00e9volution (chaine de caract\u00e8re <code>netat</code>).</p> <pre><code>def evolution(cases):\n    netat = cases[0] #la case du d\u00e9but n'\u00e9volue\n    for i in range(1,len(cases)-1):\n        netat = netat + evolution_case(cases[i-1],cases[i],cases[i+1])\n    netat = netat + cases[-1] #la derni\u00e8re case n'\u00e9volue pas\n    return netat\n</code></pre> <p>Pour terminer l'exercice, il reste alors \u00e0 cr\u00e9er la chaine de d\u00e9part (par exemple en utilisant <code>\".\"*256+\"#\"+\".\"*256), \u00e0 la faire \u00e9voluer 100 fois puis \u00e0 compter le nombre de</code>#` qu'on y trouve.</p> <p>V\u00e9rifier votre r\u00e9ponse :   </p>"},{"location":"itc/revisions/#exercice-17-le-tri-fusion","title":"Exercice 17 : Le tri fusion","text":"<p>L'algorithme du tri fusion consiste \u00e0 :  </p> <ul> <li>(diviser) partager le tableau \u00e0 trier en deux moiti\u00e9s (\u00e0 une unit\u00e9 pr\u00e8s), </li> <li>(r\u00e9gner) trier chacune des deux moiti\u00e9s, </li> <li>(combiner) les fusionner pour obtenir la liste tri\u00e9e. </li> </ul> <p>On a sch\u00e9matis\u00e9 le tri du tableau <code>[| 10; 6; 3; 9; 7; 5 |]</code> suivant ce principe ci-dessous : <pre><code>    graph TD\n    subgraph Partager en deux\n    S[\"{10,6,3,9,7,5}\"] --&gt; S1[\"{10,6,3}\"]\n    S --&gt; S2[\"{9,7,5}\"]\n    end\n    subgraph Fusionner\n    S1 -.Trier.-&gt; T1[\"{3,6,10}\"]\n    S2 -.Trier.-&gt; T2[\"{5,7,9}\"]\n    T1 --&gt; T[\"{3,5,6,7,9,10}\"]\n    T2 --&gt; T\n    end</code></pre></p> <ol> <li> <p>Ecrire  une fonction <code>separe</code> qui s\u00e9pare une liste en deux listes de m\u00eame longueur (\u00e0 une unit\u00e9 pr\u00e8s). On pourra utiliser les tranches, ou \u00e9crire (par exemple) une fonction renvoyant deux listes : celles des termes de rang pair et celle des termes de rang impair.</p> </li> <li> <p>Ecrire une fonction <code>fusion</code> qui prend en argument deux listes suppos\u00e9es d\u00e9j\u00e0 tri\u00e9es et les fusionne.</p> </li> <li> <p>Si vous avez utilis\u00e9 un algorithme it\u00e9ratif \u00e0 la question pr\u00e9c\u00e9dente (en manipulant des indices dans chacune des deux listes), \u00e9crire une version r\u00e9cursive de la fusion, \u00e0 l'inverse si vous avez utilis\u00e9 une version r\u00e9cursive, proposez une version it\u00e9rative.</p> </li> <li> <p>Donner une impl\u00e9mentation du tri fusion en Python.</p> </li> <li> <p>Ecrire une fonction <code>liste_aleatoire</code> qui prend en argument un nombre d'\u00e9l\u00e9ments <code>n</code>, deux bornes <code>vmin</code> et <code>vmax</code> et renvoie une liste de <code>n</code> entiers tir\u00e9s au sort dans l'intervalle <code>[vmin;vmax]</code> (les bornes sont comprises). On rappelle que pour g\u00e9n\u00e9rer un entier al\u00e9atoire on peut utiliser la fonction <code>randint</code> du module <code>random</code>.</p> </li> <li> <p>Les nombres al\u00e9atoires g\u00e9n\u00e9r\u00e9es par un ordinateur d\u00e9pendent d'une valeur appel\u00e9e graine (ou seed en anglais). Ainsi en fixant la valeur de la graine, la liste de nombres g\u00e9n\u00e9r\u00e9s est toujours la m\u00eame. Importer la fonction <code>seed</code> depuis le module <code>random</code> et fixer la valeur de la graine a 42, puis g\u00e9n\u00e9rer une liste de 500 nombre al\u00e9atoire entre 1 et 10000. Trier cette liste, quelle valeur se trouve \u00e0 l'indice 250 de cette liste ?   </p> </li> </ol>"},{"location":"itc/revisions/#exercice-18-boite-de-plus-grand-volume","title":"Exercice 18 : Bo\u00eete de plus grand volume","text":"<p>Le fichier <code>boites.txt</code> est t\u00e9l\u00e9chargeable ci-dessous, chaque ligne de ce fichier contient la r\u00e9f\u00e9rence d'un mod\u00e8le de bo\u00eete sous la forme d'un code \u00e0 4 lettres suivi de trois entiers repr\u00e9sentant les dimensions de la bo\u00eete. A titre d'exemple, les trois premi\u00e8res lignes du fichier sont : <pre><code>NWLR 283 75 46 \nQBHC 117 70 79 \nZOWK 262 66 31\n</code></pre> Donc, la boite de r\u00e9f\u00e9rence <code>NWLR</code> a comme dimension <code>283x75x46</code>. boites.txt </p> <p>Trouver la r\u00e9f\u00e9rence de la plus de plus grand volume, et v\u00e9rifier votre r\u00e9sultat dans le formulaire suivant :  </p>"},{"location":"itc/revisions/#exercice-19-suite-look-and-say","title":"Exercice 19 : Suite look and say","text":"<p>La suite look and say a pour premiers termes : <code>1, 11, 21, 1211, 111221, 312211, ...</code> en effet chaque terme s'obtient en regardant puis en disant le terme pr\u00e9c\u00e9dent. Le premier terme <code>1</code> se lit \"un un\" et donc le second terme est <code>11</code> qui se lit <code>deux un</code> et donc le troisi\u00e8me terme est <code>21</code> qui se lit <code>un deux un un</code> et donc le quatri\u00e8me terme est <code>1211</code> et ainsi de suite. Le but de l'exercice est de g\u00e9n\u00e9rer \u00e0 l'aide de Python les termes de cette  suite.</p> <ol> <li> <p>Ecrire une fonction <code>suivant</code> qui prend en argument une chaine de caract\u00e8res <code>terme</code> repr\u00e9sentant un terme de la suite et renvoie le terme suivant.</p> <p>Aide</p> <p>On pourra proc\u00e9der en parcourant la chaine <code>s</code> tout en mettant \u00e0 jour deux variables :</p> <ul> <li>l'une contenant le caract\u00e8re courant</li> <li>l'autre son nombre d'apparition</li> </ul> <p>Lorsque le caract\u00e8re suivant n'est pas le caract\u00e8re courant on remet \u00e0 1 nombre d'apparition.</p> <p>Tester votre fonction en calculant le 15e terme de la suite :   </p> </li> <li> <p>Faire une conjecture sur les chiffres pouvant apparaitre dans les termes de cette suite. Puis prouver cette conjecture (on pourra raisonner par r\u00e9currence).</p> </li> <li> <p>On souhaite maintenant utiliser le fait que les seuls chiffres apparaissant dans la suite look and say sont 1, 2 et 3 afin d'\u00e9crire une version r\u00e9cursive du calcul du terme suivant. Pour cela, le cas r\u00e9cursif consiste \u00e0 consid\u00e9rer les trois premiers chiffres du terme pr\u00e9c\u00e9dent et le cas de base est celui d'un terme contenant moins de 3 chiffres. Ecrire cette version r\u00e9cursive.</p> </li> </ol>"},{"location":"itc/revisions/#exercice-20-conversion-de-base-operateurs-bit-a-bit","title":"Exercice 20 : Conversion de base - Op\u00e9rateurs bit \u00e0 bit","text":"<p>On rappelle que 'algorithme des divisions successives  permet de convertir un nombre \u00e9crit en base 10 dans une base \\(b\\) quelconque (\\(b \\geqslant 2\\)).</p> <p>Il consiste tant que \\(n\\) n'est pas nul \u00e0 :</p> <ul> <li>Ajouter le reste dans la division euclidienne de \\(n\\) par \\(b\\) \u00e0 l'\u00e9criture en base \\(b\\)</li> <li>remplacer \\(n\\) par le quotient de \\(n\\) dans la division euclidienne par \\(b\\)</li> </ul> <p>Si \\(b&gt;10\\), on utilise comme chiffre les lettres de l'alphabet, on d\u00e9clare donc en d\u00e9but de programme une chaine de caract\u00e8res :</p> <pre><code>CHIFFRES=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n</code></pre> <ol> <li> <p>Ecrire une fonction <code>dec_to</code> qui prend en argument un entier <code>n</code> (type <code>int</code>) \u00e9crit en base 10 et une base <code>b</code> (sup\u00e9rieur ou \u00e9gale \u00e0 2) et renvoie l'\u00e9criture de <code>n</code> dans la base <code>b</code></p> </li> <li> <p>Tester votre programme en convertissant <code>816203</code> en hexad\u00e9cimal :   </p> </li> </ol> <p>Dans le cas particulier de la base 2, on peut aussi utiliser les op\u00e9rations bit \u00e0 bit qui consistent \u00e0 effectuer des op\u00e9rations logiques usuelles (<code>not</code>, <code>and</code>, <code>or</code>, ...) bit par bit sur la repr\u00e9sentation binaire des entiers. Les op\u00e9rateurs associ\u00e9s en Python sont :</p> <ul> <li><code>&amp;</code> pour le <code>and</code></li> <li><code>|</code> pour le <code>or</code></li> <li><code>~</code> pour le <code>not</code></li> <li><code>^</code> pour le <code>xor</code></li> </ul> <p>Prenons un exemple, si on effectue un <code>&amp;</code> entre les entiers :</p> <ul> <li>\\(\\overset{\\displaystyle{_{2^7}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^6}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^5}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^4}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^3}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^2}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^1}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^0}}}{\\boxed{\\strut1}}\\) = \\(179\\) et </li> <li>\\(\\overset{\\displaystyle{_{2^7}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^6}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^5}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^4}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^3}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^2}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^1}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^0}}}{\\boxed{\\strut1}}\\) = \\(53\\)</li> </ul> <p>alors, le r\u00e9sultat obtenu sera \\(\\overset{\\displaystyle{_{2^7}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^6}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^5}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^4}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^3}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^2}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^1}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^0}}}{\\boxed{\\strut1}}\\) = \\(49\\) car on effectue le et logique entre les bits de poids \\(2^7, 2^6, \\dots, 2^0\\). </p> <p>D'autre part, les op\u00e9rateurs <code>&gt;&gt;</code> (resp. <code>&lt;&lt;</code>) permettent de d\u00e9caler \u00e0 droite (resp. \u00e0 gauche) une repr\u00e9sentation binaire du nombre de rang donn\u00e9. Par exemple <code>25 &lt;&lt; 2</code> donne \\(\\overset{\\displaystyle{_{2^6}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^5}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^4}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^3}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^2}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^1}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^0}}}{\\boxed{\\strut0}}\\) = \\(100\\) car on d\u00e9cale de deux rang \u00e0 droites la repr\u00e9sentation.</p> <p>En utilisant ces op\u00e9rateurs, ecrire une fonction qui renvoie la repr\u00e9sentation binaire (sous forme d'une chaine de caract\u00e8res) de l'entier positif donn\u00e9 en argument.</p>"},{"location":"itc/revisions/#exercice-21-chiffrement-xor","title":"Exercice 21 : Chiffrement XOR","text":"<p>On rappelle que l'op\u00e9rateur <code>^</code> correspond en Python \u00e0 une op\u00e9ration bit \u00e0 bit entre les repr\u00e9sentations binaires. Par exemple, puisque</p> <ul> <li>\\(\\overset{\\displaystyle{_{2^6}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^5}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^4}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^3}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^2}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^1}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^0}}}{\\boxed{\\strut1}}\\) = \\(85\\)  et </li> <li>\\(\\overset{\\displaystyle{_{2^6}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^5}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^4}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^3}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^2}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^1}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^0}}}{\\boxed{\\strut1}}\\) = \\(115\\) alors</li> </ul> <p><code>85^115 = 38</code> (\\(\\overset{\\displaystyle{_{2^6}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^5}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^4}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^3}}}{\\boxed{\\strut0}}\\overset{\\displaystyle{_{2^2}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^1}}}{\\boxed{\\strut1}}\\overset{\\displaystyle{_{2^0}}}{\\boxed{\\strut0}}\\) = \\(38\\))car on effectue un ou exclusif entre les bits correspondant des deux repr\u00e9sentations.</p> <p>Le chiffrement XOR (xor cipher) est un algorithme de chiffrement qui consiste \u00e0 effectuer l'op\u00e9ration bit \u00e0 bit XOR entre les caract\u00e8res du texte \u00e0 chiffrer et une cl\u00e9 donn\u00e9e.  Prenons un exemple en supposant qu'un caract\u00e8re est repr\u00e9sent\u00e9 par son code ASCII, on veut coder le texte \"PYTHON\" avec la cl\u00e9 \"ab\". On transforme \"PYTHON\" en la suite de ces codes ascii : PYTHON devient <code>80 89 84 72 79 78</code> et de m\u00eame la cl\u00e9 \"ab\" devient <code>97 98</code> on effectue maintenant l'op\u00e9ration XOR entre les codes du texte et de la cl\u00e9 en la r\u00e9p\u00e9tant autant de fois que n\u00e9cessaire :</p> <ul> <li><code>80 ^ 97 = 49</code></li> <li><code>89 ^ 98 = 59</code></li> <li><code>84 ^ 97 = 53</code></li> <li><code>72 ^ 98 = 42</code></li> <li><code>79 ^ 97 = 46</code></li> <li><code>78 ^ 98 = 44</code></li> </ul> <p>Le chiffrement donne donc les valeurs <code>49 59 53 42 46 44</code> qui retranscris en caract\u00e8re donne <code>1;5*.,</code>.</p> <ol> <li> <p>Ecrire la fonction <code>chiffrexor</code> qui prend en argument deux chaines de caract\u00e8res (le texte et la cl\u00e9) et renvoie le r\u00e9sultat du chiffrement XOR.</p> <p>Aide</p> <p>On rappelle que  </p> <ul> <li>la fonction <code>ord</code> prend en argument un caract\u00e8re et renvoie son code</li> <li>la fonction <code>chr</code> prend en argument un code et renvoie le caract\u00e8re associ\u00e9</li> </ul> <p>On notera bien que certains caract\u00e8res ASCII ne sont pas imprimables et que donc le r\u00e9sultat du chiffrement XOR peut parfois ne peut s'afficher correctement.</p> </li> <li> <p>Tester votre fonction en chiffrant le message <code>BRAVO VOUS AVEZ REUSSI</code> avec la cl\u00e9 <code>python</code> (l'exemple est construit de fa\u00e7on \u00e0 avoir un r\u00e9sultat constitu\u00e9 de caract\u00e8res imprimables)   </p> </li> <li> <p>D\u00e9terminer pour un entier <code>n</code> le r\u00e9sultat de <code>n ^ n</code> et celui de <code>n ^ 0</code> en d\u00e9duire une m\u00e9thode permettant de d\u00e9chiffrer un codage XOR.</p> </li> </ol>"},{"location":"itc/revisions/#exercice-22-mediane","title":"Exercice 22 : Mediane","text":"<ol> <li> <p>Ecrire une fonction <code>mediane</code> qui prend en argument une liste d'entiers suppos\u00e9e d\u00e9j\u00e0 tri\u00e9 et renvoie sa m\u00e9diane.</p> <p>Aide</p> <p>On prendra la valeur centrale dans le cas d'un tableau contenant un nombre impair d'\u00e9l\u00e9ments et la moyenne arithm\u00e9tique entre les deux valeurs centrales dans le cas contraires.</p> </li> <li> <p>On s'int\u00e9resse dans la suite de l'exercice \u00e0 la recherche de la m\u00e9diane de la fusion de deux tableaux tri\u00e9es, on veut donc \u00e9crire une fonction <code>mediane_fusion</code> qui prend en entr\u00e9e deux listes d'entiers <code>lst1</code> (de longueur <code>n1</code>) et <code>lst2</code> (de longueur <code>n2</code>) et renvoie la m\u00e9diane de la fusion.</p> <p>a. Concat\u00e9nation et tri     On propose ici d'utiliser la m\u00e9thode consistant \u00e0 concat\u00e9ner les deux tableaux <code>lst1</code> et <code>lst2</code>, \u00e0 trier le r\u00e9sultat  (avec une fonction de tri int\u00e9gr\u00e9e \u00e0 Python) puis \u00e0 calculer la m\u00e9diane en utilisant la fonction \u00e9crite \u00e0 la question 1.Donner la complexit\u00e9 de cette m\u00e9thode puis en proposer une impl\u00e9mentation sous la forme d'une fonction <code>med_fusion_tri</code>.</p> <p>b. Parcours des deux listes     On propose maintenant d'utiliser deux indices <code>i1</code> et <code>i2</code> afin de parcourir en alternance chacune des deux listes jusqu'\u00e0 obtenir au moins la moiti\u00e9 des \u00e9l\u00e9ments. Pour cela, on initialise ces deux indices <code>i1</code> et <code>i2</code> \u00e0 0, puis \u00e0 chaque \u00e9tape apr\u00e8s comparaison entre les \u00e9l\u00e9ments <code>lst1[i1]</code> et <code>lst2[i2]</code> on incr\u00e9mente <code>i1</code> ou <code>i2</code>. Lorsque la somme des deux indices vaut la moiti\u00e9 de <code>n1+n2</code> cela signifie qu'on a atteint la m\u00e9diane. Donner la complexit\u00e9 de cette m\u00e9thode et en proposer une impl\u00e9mentation sous la forme d'une fonction <code>med_fusion_parcours</code></p> <p>c. Recherche dichotomique</p> <ol> <li> <p>On suppose qu'on a partitionn\u00e9 les \u00e9l\u00e9ments des deux listes <code>lst1</code> et <code>lst2</code> en prenant les <code>k</code> premiers \u00e9l\u00e9ments de <code>lst1</code> et les <code>l</code> premiers \u00e9l\u00e9ments de <code>lst2</code>. Donner les conditions portants sur <code>k</code> et <code>l</code> pour que cette partition repr\u00e9sente la moiti\u00e9 gauche de la liste tri\u00e9e issue de la fusion de <code>lst1</code> et <code>lst2</code> (on pourra s'aider d'un sch\u00e9ma).</p> </li> <li> <p>En d\u00e9duire une strat\u00e9gie de recherche par dichotomie afin de d\u00e9terminer la valeur correcte de <code>k</code>, nombre d'\u00e9l\u00e9ments \u00e0 prendre dans <code>lst1</code>, la mettre en place en \u00e9crivant une fonction <code>med_dicho</code>. Quelle est la complexit\u00e9 de cette nouvelle m\u00e9thode ?</p> <p>Aide</p> <p>On fera attention aux cas limites dans les indices.</p> </li> </ol> </li> </ol>"},{"location":"itc/terminaison/","title":"C10 Terminaison et corrections","text":""},{"location":"itc/terminaison/#cours","title":"Cours","text":"<p>Support de cours chapitre 10 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"itc/terminaison/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"itc/terminaison/#exercice-1-recherche-simple-dans-une-liste","title":"Exercice 1 : Recherche simple dans une liste","text":"<p>On souhaite \u00e9crire une fonction <code>recherche</code> en Python qui prend en argument une liste <code>lst</code> et une \u00e9l\u00e9ment <code>elt</code> renvoie <code>True</code> ou <code>False</code> suivant que <code>elt</code> se trouve ou non dans <code>lst</code>. On donne ci-dessous la r\u00e9ponse d'un \u00e9l\u00e8ve :</p> <pre><code>def recherche(elt,lst):\n    ''' Renvoie True si element est dans liste, False sinon '''\n    for x in liste:\n        # Si x est bien \u00e9gal \u00e0 \u00e9l\u00e9ment renvoyer True sinon renvoyer False\n        if x=element: \n            return True\n        else:\n            return False\n</code></pre> <ol> <li>Recopier ce code puis corriger l'erreur commise sur le test d'\u00e9galit\u00e9 \u00e0 la ligne 5.</li> <li>V\u00e9rifier que les tests <code>recherche(3,[3,10,7])</code> et <code>recherche(4,[3,10,7])</code> renvoient les valeurs attendues.</li> <li>En faisant un test adapt\u00e9, montrer que cette fonction n'est pas correcte.</li> <li>Doit-on renvoyer <code>False</code> si le premier \u00e9l\u00e9ment test\u00e9 est diff\u00e9rent de celui recherch\u00e9 comme indiqu\u00e9 dans le commentaire ligne 4 ?</li> <li>Corriger cette fonction.</li> <li>En vous inspirant de la fonction <code>recherche</code> \u00e9crire une fonction <code>occurrences</code> qui prend en argument une liste <code>lst</code> et un \u00e9l\u00e9ment <code>elt</code> et renvoie le nombre d'apparitions de <code>elt</code> dans <code>lst</code>. Par exemples <code>occurrences([2,7,1,2,8,2,6],2)</code> renvoie <code>3</code> et <code>occurrences([2,7,1,2,8,2,6],5)</code> renvoie 0. </li> </ol>"},{"location":"itc/terminaison/#exercice-2-comptage-des-elements-dune-liste","title":"Exercice 2 : Comptage des \u00e9l\u00e9ments d'une liste","text":"<p>On suppose qu'on a proc\u00e9d\u00e9 \u00e0 une \u00e9lection, on dispose :</p> <ul> <li>d'une liste <code>candidats</code> donnant les noms des candidats par exemple <code>['A', 'B', 'C', 'D']</code>, </li> <li>d'une liste <code>votes</code> repr\u00e9sentant les votes. par exemple <code>['C', 'B', 'C', 'C', 'D', 'B', 'D', 'B']</code>, on suppose que cette liste ne contient que des noms de candidats</li> </ul> <p>On  veut \u00e9crire une fonction <code>resultats</code> qui renvoie une dictionnaire dont les cl\u00e9s seront les noms des candidats et les valeurs leurs nombre de vote. . Par exemple, avec les deux listes donn\u00e9es en exemple ci-dessus, <code>resultats</code> doit renvoyer le dictionnaire <code>{'A': 0, 'B':3, 'C':3, 'D':2}</code></p> <ol> <li> <p>Ecrire une version de la fonction <code>resultats</code> qui  utilise une fonction <code>occurrences</code> qui prend en argument une liste <code>lst</code> et un \u00e9l\u00e9ment <code>elt</code> et renvoie le nombre d'apparitions de <code>elt</code> dans <code>lst</code> (voir exercice pr\u00e9c\u00e9dent). Combien de comparaisons effectue chaque appel \u00e0 occurrences ? En d\u00e9duire le nombre de comparaisons effectu\u00e9 par cette version de <code>resultats</code></p> </li> <li> <p>Ecrire une version de la fonction <code>resultats</code> qui part d'un dictionnaire dont les cl\u00e9s sont les candidats et les valeurs 0, parcourt la liste <code>votes</code> et incr\u00e9mente la valeur associ\u00e9e au candidat rencontr\u00e9. Quelle est le nombre de comparaisons effectu\u00e9s par cette version de <code>resultats</code> ?</p> </li> </ol>"},{"location":"itc/terminaison/#exercice-3-recherche-dichotomique-dans-une-liste-triee","title":"Exercice 3 : Recherche dichotomique dans une liste tri\u00e9e","text":"<p>Si une liste est tri\u00e9e, un algorithme de recherche plus efficace que la recherche simple (voir exercice 1), appel\u00e9e recherche dichotomique existe. Il consiste pour recherche un \u00e9lement <code>x</code> dans une liste <code>lst</code> de longueur <code>n</code> \u00e0</p> <ul> <li>comparer <code>x</code> \u00e0 <code>lst[n//2]</code></li> <li>en cas d'\u00e9galit\u00e9 on renvoie <code>true</code></li> <li>sinon on recommence la recherche dans la liste <code>lst[n//2]</code> si <code>x &lt; lst[n//2]</code> et <code>lst[n//2+1::]</code> sinon</li> </ul> <p>Le but de l'exercice est d'\u00e9crire une fonction <code>dichotomie</code> qui impl\u00e9mente de fa\u00e7on r\u00e9cursive cet algorithme.</p> <ol> <li>Quelle sont les cas de base de l'arr\u00eat de la r\u00e9cursion ? </li> <li>Ecrire la fonction <code>dichotomie</code></li> <li>Donner une version it\u00e9rative de cette fonction.</li> <li>Modifier votre fonction afin qu'elle renvoie l'indice de <code>x</code> lorsque <code>x</code> est pr\u00e9sent dans <code>lst</code> et <code>-1</code> sinon.</li> </ol>"},{"location":"itc/terminaison/#exercice-4-recherche-des-deux-elements-les-plus-proches-dans-une-liste","title":"Exercice 4 : Recherche des deux \u00e9l\u00e9ments les plus proches dans une liste","text":"<p>Ecrire une fonction <code>plus_proche</code> qui prend en argument une liste et renvoie les deux \u00e9l\u00e9ments les plus proches de cette liste.</p> <p>Aide</p> <p>On pourra proc\u00e9der en utilisant tous les couples possibles de deux indices c'est \u00e0 dire pour une liste de longueur <code>n</code>:</p> <ul> <li><code>(0,1), (0,2), ... (0,n-1)</code></li> <li><code>(1,2), (1,3), ... (1,n-1)</code></li> <li><code>(2,3), ... (2, n-1)</code></li> </ul> <p>C'est \u00e0 dire qu'on doit utiliser deux boucles imbriqu\u00e9es.</p>"},{"location":"itc/terminaison/#exercice-5-recherche-dun-motif-dans-un-texte","title":"Exercice 5 : Recherche d'un motif dans un texte","text":"<p>Pour recherche si un motif <code>m</code> (par exemple <code>\"math\"</code>) se trouve dans une texte <code>t</code> (par exemple <code>\"C'est super l'informatique\"</code>)on peut utiliser l'algorithme suivant :</p> <ul> <li>on parcourt chaque caract\u00e8re de <code>c</code></li> <li>si le caract\u00e8re rencontr\u00e9 correspond au premier caract\u00e8re du motif <code>m</code>, alors on avance dans le motif tant que les caract\u00e8res co\u00efncident</li> <li>si on atteint la fin du motif alors <code>m</code> se trouve bien dans <code>c</code> sinon on passe au caract\u00e8re suivant de <code>c</code>.</li> </ul> <p>On peut visualiser le fonctionnement de cet algorithme en ligne  (cr\u00e9dit : N. Reveret et L. Abdal).</p> <ol> <li>Ecrire une impl\u00e9mentation de cet algorithme en Python</li> <li>Modifier votre fonction afin qu'elle renvoie l'indice de la premi\u00e8re apparition du motif <code>m</code> s'il est pr\u00e9sent (ou <code>-1</code> sinon)</li> <li>Modifier de nouveau cette fonction afin qu'elle renvoie la liste des indices des occurrences du motif dans la chaine. Par exemple <code>recherche(\"ici\",\"ici, ou encore ici ou m\u00eame l\u00e0\")</code> renvoie la liste [0,15].</li> </ol>"},{"location":"itc/tris/","title":"C8 Tris","text":""},{"location":"itc/tris/#cours","title":"Cours","text":"<p>Support de cours chapitre 8 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"itc/tris/#travaux-pratiques","title":"Travaux pratiques","text":"<p>Aide</p> <p>Pour g\u00e9n\u00e9rer une liste d'\u00e9l\u00e9ments \u00e0 trier au hasard on pourra utiliser la fonction <code>randint</code> du module <code>random</code> et cr\u00e9er une liste d'entiers al\u00e9atoires par compr\u00e9hension: <pre><code>from random import randint\n# G\u00e9n\u00e8re  au hasard 10 entiers compris entre 1 et 20\ntest = [randint(1,20) for i in range(10)]\n</code></pre></p>"},{"location":"itc/tris/#exercice-1-liste-triee","title":"Exercice 1 : Liste tri\u00e9e","text":"<p>Ecrire une fonction <code>est_triee</code> qui prend en argument une <code>liste</code> et qui renvoie <code>True</code> si <code>liste</code> est tri\u00e9e par ordre croissant et <code>False</code> dans le cas contraire.</p> <p>Attention</p> <p>On ne doit pas trier la liste, simplement v\u00e9rifier si elle l'est d\u00e9j\u00e0 ou pas.</p>"},{"location":"itc/tris/#exercice-2-retour-sur-le-tri-par-selection","title":"Exercice 2 : Retour sur le tri par s\u00e9lection","text":"<p>On rappelle l'algorithme du tri par s\u00e9lection vu en cours :</p> <p>Algorithme</p> <p>Pour trier les \u00e9l\u00e9ments d'un tableau par ordre croissant, l'algorithme du tri par s\u00e9lection consiste \u00e0 :  </p> <ul> <li>rechercher le plus petit \u00e9lement du tableau \u00e0 partir de l'indice 0</li> <li>\u00e9changer cet \u00e9l\u00e9ment avec celui situ\u00e9 \u00e0 l'indice 0</li> <li>rechercher le plus petit \u00e9lement du tableau \u00e0 partir de l'indice 1</li> <li>\u00e9changer cet \u00e9l\u00e9ment avec celui situ\u00e9 \u00e0 l'indice 1</li> <li>et ainsi de suite jusqu'\u00e0 atteindre la fin du tableau</li> </ul> <ol> <li> <p>Ecrire les \u00e9tapes du tri par s\u00e9lection pour la liste <code>[12,19,10,13,11,15,9,14]</code></p> </li> <li> <p>Ecrire une fonction <code>echange</code> qui prend en argument une liste et deux indices \\(i\\) et \\(j\\) et \u00e9change les \u00e9l\u00e9ments d'indice \\(i\\) et \\(j\\) de cette liste.</p> </li> <li>Ecrire une fonction <code>indice_min_depuis</code> qui prend en argument une liste et un indice \\(i\\) et renvoie l'indice du minimum des \u00e9l\u00e9ments de ce tableau depuis l'indice \\(i\\).</li> <li>Programmer et tester l'algorithme du tri par s\u00e9lection.</li> </ol>"},{"location":"itc/tris/#exercice-3-retour-sur-le-tri-par-insertion","title":"Exercice 3 : Retour sur le tri par insertion","text":"<ol> <li> <p>Rappeler le principe de l'algorithme et \u00e9crire les \u00e9tapes du tri par insertion pour la liste <code>[12,19,10,13,11,15,9,14]</code></p> </li> <li> <p>Ecrire une fonction <code>insere</code> qui prend un argument une liste et <code>l</code> et un indice <code>i</code> et qui ins\u00e8re l'\u00e9l\u00e9ment d'indice <code>i</code> de <code>l</code> dans la liste <code>l[0],...l[i-1]</code> en supposant cette liste d\u00e9j\u00e0 tri\u00e9e</p> <p>Aide</p> <p>On rappelle qu'on peut proc\u00e9der en \u00e9changeant l'\u00e9l\u00e9ment d'indice <code>i</code> avec son voisin de gauche tant que ce dernier existe et qu'il est sup\u00e9rieur</p> </li> <li> <p>En d\u00e9duire une fonction qui impl\u00e9mente en Python l'algorithme du tri par insertion</p> </li> </ol>"},{"location":"itc/tris/#exercice-4-tri-a-bulles","title":"Exercice 4 : Tri \u00e0 bulles","text":"<p>Le tri \u00e0 bulles est un algorithme de tri qui consiste \u00e0 parcourir de fa\u00e7on r\u00e9p\u00e9titive un tableau, si deux \u00e9l\u00e9ments ne sont pas de bon ordre, alors on inverse leur position. A la fin du premier parcours, le plus grand \u00e9l\u00e9ment se trouve forc\u00e9ment en derni\u00e8re position. Le parcours suivant s'arr\u00eate donc \u00e0 l'avant-dernier \u00e9l\u00e9ment, et ainsi de suite. Par exemple, sur le tableau <code>{12, 9, 17, 11, 3}</code> les \u00e9tapes du tri seront :</p> <ul> <li>apr\u00e8s premier parcours : <code>{9, 12, 11, 3, 17}</code> </li> <li>apr\u00e8s second parcours : <code>{9, 11, 3, 12, 17}</code></li> <li>apr\u00e8s troisi\u00e8me parcours : <code>{9, 3, 11, 12, 17}</code></li> <li>apr\u00e8s quatri\u00e8me parcours : <code>{3, 9, 11, 12, 17}</code></li> </ul> <p>Le but de l'exercice est d'impl\u00e9menter cet algorithme</p> <ol> <li> <ol> <li>Ecrire une fonction <code>echange</code> qui prend en argument une liste et deux indices \\(i\\) et \\(j\\) et \u00e9change les \u00e9l\u00e9ments d'indice \\(i\\) et \\(j\\) de cette liste.</li> </ol> </li> <li>Ecrire une fonction de signature <code>parcours</code>  qui prend en argument une liste <code>l</code> ainsi qu'un indice <code>i</code> qui parcours <code>l</code> jusqu'\u00e0 l'indice <code>i</code> en \u00e9changeant l'\u00e9l\u00e9ment avec son voisin de droite s'il lui est inf\u00e9rieure. </li> <li>Ecrire une fonction <code>void tri_bulles(int tab, int size)</code> qui trie en place le tableau <code>tab</code>. Proposer des tests pour valider le comportement de cette fonction.</li> </ol>"},{"location":"itc/tris/#exercice-5-le-tri-fusion","title":"Exercice 5 : Le tri fusion","text":"<p>L'algorithme du tri fusion consiste \u00e0 :  </p> <ul> <li>(diviser) partager le tableau \u00e0 trier en deux moiti\u00e9s (\u00e0 une unit\u00e9 pr\u00e8s), </li> <li>(r\u00e9gner) trier chacune des deux moiti\u00e9s, </li> <li>(combiner) les fusionner pour obtenir la liste tri\u00e9e. </li> </ul> <p>On a sch\u00e9matis\u00e9 le tri du tableau <code>[| 10; 6; 3; 9; 7; 5 |]</code> suivant ce principe ci-dessous : <pre><code>    graph TD\n    subgraph Partager en deux\n    S[\"{10,6,3,9,7,5}\"] --&gt; S1[\"{10,6,3}\"]\n    S --&gt; S2[\"{9,7,5}\"]\n    end\n    subgraph Fusionner\n    S1 -.Trier.-&gt; T1[\"{3,6,10}\"]\n    S2 -.Trier.-&gt; T2[\"{5,7,9}\"]\n    T1 --&gt; T[\"{3,5,6,7,9,10}\"]\n    T2 --&gt; T\n    end</code></pre></p> <ol> <li> <p>Ecrire  une fonction <code>separe</code> qui s\u00e9pare une liste en deux listes de m\u00eame longueur (\u00e0 une unit\u00e9 pr\u00e8s).</p> </li> <li> <p>Ecrire une fonction <code>fusion</code> qui prend en argument deux listes suppos\u00e9es d\u00e9j\u00e0 tri\u00e9es et les fusionne.</p> </li> <li> <p>Donner une impl\u00e9mentation du tri fusion en Python.</p> </li> </ol>"},{"location":"itc/tris/#exercice-6-le-tri-rapide","title":"Exercice 6 : Le tri rapide","text":"<p>Le tri rapide (quicksort) est un algorithme de tri d\u00e9velopp\u00e9 par T. Hoare en 1959. Le tri rapide repose comme le tri fusion sur une m\u00e9thode diviser pour r\u00e9gner. La s\u00e9paration en deux sous tableaux s'effectue en choisissant (al\u00e9atoirement) un pivot, et en mettant d'un c\u00f4t\u00e9 les nombres inf\u00e9rieurs au pivot et de l'autre les nombres sup\u00e9rieurs. Par cons\u00e9quent, la longueur des sous listes  obtenue d\u00e9pend du pivot choisi. Par contre on s'affranchit de la phase de fusion puisqu'elle consiste simplement \u00e0 concat\u00e9ner les deux sous listes.</p> <p>Par exemple, sur le tableau \\([10, 6, 3, 9, 7, 5]\\) si on choisit comme pivot 5, alors la s\u00e9paration en deux sous listes donnera d'un c\u00f4t\u00e9 \\([3]\\) (les valeurs strictement inf\u00e9rieures ou \u00e9gales au pivot) et de l'autre \\([10, 6, 9, 7]\\) (les valeurs strictement sup\u00e9rieures).</p> <p>On propose ici d'impl\u00e9menter cet algorithme en Python en choisissant comme pivot le dernier \u00e9l\u00e9ment du tableau. </p> <ol> <li>Ecrire la fonction <code>partitionne</code> qui prend en argument une liste et renvoie deux listes, l'une form\u00e9e des \u00e9l\u00e9ments inf\u00e9rieurs ou  au dernier \u00e9l\u00e9ment de la liste et l'autre form\u00e9e des \u00e9l\u00e9ments strictement sup\u00e9rieurs.</li> <li>Ecrire la fonction <code>tri_rapide</code> qui prend en argument une liste et renvoie cette liste tri\u00e9e.</li> </ol>"},{"location":"mp2i/OCamlimp/","title":"C9 Ocaml : aspects imp\u00e9ratifs","text":"<p>\"OCaml offers a happy compromise here, making it easy and natural to program in a pure style, but also providing great support for imperative programming\"realworldocaml.org(Real World OCaml)</p>"},{"location":"mp2i/OCamlimp/#cours","title":"Cours","text":"<p>Support de cours chapitre 9 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/OCamlimp/#travaux-diriges","title":"Travaux dirig\u00e9s","text":""},{"location":"mp2i/OCamlimp/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"mp2i/OCamlimp/#exercice-1-manipulation-des-references","title":"Exercice 1 : Manipulation des r\u00e9f\u00e9rences","text":"<ol> <li> <p>Ecrire une fonction <code>affiche int ref -&gt; unit</code> qui permet d'afficher l'entier dont une r\u00e9f\u00e9rence est pass\u00e9e en argument.</p> </li> <li> <p>Ecrire une fonction <code>echange</code> qui \u00e9change le contenu des deux r\u00e9f\u00e9rences (sur des objets de m\u00eame type) donn\u00e9s en argument.</p> </li> <li> <p>Cr\u00e9er une fonction <code>incr\u00e9mente int ref -&gt; unit</code> qui ajoute 1 \u00e0 la valeur contenue dans la r\u00e9f\u00e9rence enti\u00e8re donn\u00e9e en argument.</p> </li> </ol>"},{"location":"mp2i/OCamlimp/#exercice-2-manipulation-denregistrement-modifiable","title":"Exercice 2 : Manipulation d'enregistrement modifiable","text":"<p>Dans tout la suite, on manipule le type suivant  <pre><code>type fraction = {mutable numerateur : int; mutable denominateur : int}\n</code></pre></p> <p>Aide</p> <p>On rappelle qu'on peut cr\u00e9er un objet de type fraction avec : <pre><code>let ma_fraction = {numerateur=45; denominateur=12}\n</code></pre></p> <ol> <li> <p>Ecrire une fonction <code>afficher</code> permettant d'afficher un objet de type fraction</p> </li> <li> <p>Rappeler rapidement le principe de l'algorithme d'Euclide permettant de calculer le pgcd de deux entiers. Et en \u00e9crire une impl\u00e9mentation r\u00e9cursive en OCaml</p> </li> <li> <p>Ecrire une fonction <code>simplifie fraction -&gt; unit</code> qui prend en argument une fraction et ne renvoie rien mais modifie la fraction fournie en argument de fa\u00e7on \u00e0 la rendre irreductible.</p> </li> <li> <p>Tester votre fonction sur la fonction <code>a</code> donn\u00e9e en ci-dessus</p> </li> </ol>"},{"location":"mp2i/OCamlimp/#exercice-3-creation-de-tableaux","title":"Exercice 3 : Cr\u00e9ation de tableaux","text":"<p>Les fonctions ci-dessous pourront \u00eatre utiles pour tester les fonctions des autres exercices :</p> <ol> <li> <p>Une fonction <code>cree_tableau</code> qui prend en argument trois entiers <code>taille vmin vmax</code>  et cr\u00e9e un tableau de taille <code>taille</code> contenant des entiers au hasard compris entre <code>vmin</code> et <code>vmax</code></p> <p>Aide</p> <p>On rappelle que <code>Random.int</code> prend en argument un entier <code>n</code> et tire au hasard un entier compris entre 0 inclus et <code>n</code> exclus</p> </li> <li> <p>Une fonction <code>affiche_tableau</code> qui prend en argument un tableau d'entiers et affiche les \u00e9l\u00e9ments de ce tableau. </p> </li> </ol>"},{"location":"mp2i/OCamlimp/#exercice-4-rechercher-un-element","title":"Exercice 4 : Rechercher un \u00e9l\u00e9ment","text":"<p>On veut \u00e9crire la fonction <code>appartient</code> 'a -&gt; 'a array -&gt; bool qui renvoie <code>true</code> ou <code>false</code> suivant que l'\u00e9l\u00e9ment se trouve ou non dans le tableau. Par exemple, <code>appartient 2 [|6; 7; 9; 12 |]</code> s'\u00e9value \u00e0 <code>false</code>.</p> <ol> <li> <p>Proposer une solution utilisant une boucle <code>for</code>, peut-on quitter la boucle d\u00e8s que l'\u00e9l\u00e9ment est rencontr\u00e9 (\u00e0 la fa\u00e7on de ce qu'on a pu faire \u00e0 C) pourquoi ?</p> </li> <li> <p>Proposer une solution utilisant une boucle <code>while</code>, cette fois est-il possible de quitter la boucle d\u00e8s qu'on rencontre l'\u00e9l\u00e9ment ? </p> </li> <li> <p>Proposer une version r\u00e9cursive n'utilisant pas de boucle.</p> </li> </ol>"},{"location":"mp2i/OCamlimp/#exercice-5-algorithmes-classiques-pour-reviser","title":"Exercice 5 : Algorithmes classiques (pour r\u00e9viser)","text":"<ol> <li> <p>Ecrire en OCaml une fonction permettant de trier un tableau d'\u00e9l\u00e9ments par la m\u00e9thode de votre choix, on rappelle qu'il faut connaitre (et avoir d\u00e9j\u00e0 impl\u00e9ment\u00e9) au moins une fois :</p> <ul> <li>le tri par insertion</li> <li>le tri par s\u00e9lection</li> <li>le tri \u00e0 bulles</li> <li>le tri fusion</li> </ul> </li> <li> <p>Impl\u00e9menter l'algorithme de recherche dichotomique en OCaml</p> </li> </ol>"},{"location":"mp2i/OCamlimp/#exercice-6-crible-derastothene","title":"Exercice 6 : Crible d'Erastoth\u00e8ne","text":"<p>On rappelle qu'un nombre premier est un entier naturel ayant exactement deux diviseurs 1 et lui-m\u00eame, ainsi 13 est premier mais pas 15. Le crible d'Erastoth\u00e8ne est un algorithme permettant de trouver tous les nombres premiers inf\u00e9rieurs ou \u00e9gaux \u00e0 un entier <code>n</code> donn\u00e9. </p> <p>Algorithme</p> <ul> <li>on cr\u00e9e un tableau de bool\u00e9ens <code>premiers</code> de taille <code>n+1</code></li> <li>on initialise le tableau \u00e0 <code>true</code> sauf <code>premiers[0]</code> et <code>premiers[1]</code> qui sont \u00e0 <code>false</code> puisque  \\(0\\) et 1 ne sont pas premiers.</li> <li>on parcourt ce tableau si <code>premiers[i]</code> est \u00e0 <code>true</code> alors on met tous ses multiples (sauf lui-m\u00eame) \u00e0 <code>false</code></li> <li>le parcours s'arr\u00eate d\u00e8s que l'entier <code>i</code> est sup\u00e9rieur \u00e0 \\(\\sqrt{n}\\).  </li> </ul> <ol> <li> <p>Ecrire  une fonction <code>crible</code> qui prend en param\u00e8tre un entier <code>n</code> et impl\u00e9mente cet algorithme de fa\u00e7on \u00e0 renvoyer le tableau de bool\u00e9ens issu du crible (c'est-\u00e0-dire tel que <code>tab.(i)</code> contient <code>true</code> si <code>i</code> est premier et \u00a0<code>false</code> sinon)</p> </li> <li> <p>Ecrire une fonction <code>premiers</code> qui prend en argument un entier <code>n</code>, utilise la fonction pr\u00e9c\u00e9dente puis cr\u00e9e la liste des nombres premiers jusqu'\u00e0 <code>n</code>.</p> </li> <li> <p>Ecrire  fonction <code>somme_premiers</code> qui prend en argument un entier <code>seuil</code> et renvoie la somme de tous les nombres premiers inf\u00e9rieurs ou \u00e9gaux \u00e0 <code>seuil</code>. Par exemple <code>somme_premiers(100)</code> renvoie <code>1060</code>.</p> </li> <li> <p>Utiliser votre fonction pour calculer la somme des nombres premiers jusqu'\u00e0 100000. Tester votre r\u00e9ponse dans le formulaire suivant :   </p> </li> </ol>"},{"location":"mp2i/OCamlimp/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/algographes/","title":"C20 Algorithmes des graphes","text":"<p>\"If in physics there's something you don't understand, you can always hide behind the uncharted depths of nature. You can always blame God. You didn't make it so complex yourself. But if your program doesn't work, there is no one to hide behind. You cannot hide behind an obstinate nature. If it doesn't work, you've messed up.\"E. Djikstra(Interview t\u00e9l\u00e9vis\u00e9e)</p>"},{"location":"mp2i/algographes/#cours","title":"Cours","text":"<p>Support de cours chapitre 20 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/algographes/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD20 </p>"},{"location":"mp2i/algographes/#travaux-pratiques","title":"Travaux pratiques","text":"<p>Note</p> <p>On rappelle les structures de donn\u00e9es utilis\u00e9s en OCaml pour repr\u00e9senter les graphes :</p> <ul> <li> <p>par matrice d'adjacence : <pre><code>type graphe = {\nordre : int; \nmadj : int array array};;\n</code></pre></p> </li> <li> <p>par liste d'adjacence : <pre><code>type graphe = {\nordre : int;\nladj : int list array};;\n</code></pre></p> </li> </ul>"},{"location":"mp2i/algographes/#exercice-1-nombre-de-chemins-de-longueurs-k","title":"Exercice 1 : Nombre de chemins de longueurs k","text":"<p>On rappelle que les puissances de la matrice d'adjacence d'un graphe donnent le nombres de chemins de longueurs \\(k\\) entre deux sommets de ce graphe. Plus formellement, en notant \\(M\\) la matrice d'adjacence d'un graphe \\(G\\), le coefficient \\(M_{ij}^k\\) de la puissance \\(k-\\)i\u00e8me de \\(M\\) est le nombre de chemins du sommet \\(i\\) vers le sommet \\(j\\) (voir l'exercice 9 de la fiche de TD du chapitre 17).</p> <ol> <li> <p>Ecrire une fonction <code>mult int array array -&gt; int array array -&gt; int array array</code> qui prend en entr\u00e9e deux matrices et calcule leur produit.</p> </li> <li> <p>Ecrire une fonction \u00a0<code>expr: int array array -&gt; int -&gt; int array array</code> qui prend en entr\u00e9e une matrice \\(M\\) et un entier \\(k\\) et renvoie \\(M^k\\) en utilisant l'algorithme d'exponentiation rapide.</p> </li> <li> <p>On consid\u00e8re le graphe suivant :</p> <p><pre><code>graph LR\nA((\"0\"))\nB((\"1\"))\nC((\"2\"))\nD((\"3\"))\nE((\"4\"))\nF((\"5\"))\nG((\"6\"))\nH((\"7\"))\nA --&gt; B\nA --&gt; C\nB --&gt; D\nC --&gt; F\nC --&gt; G\nE --&gt; G\nE --&gt; A\nD --&gt; F\nG --&gt; F\nB --&gt; C\nF --&gt; E\nF --&gt; H\nH --&gt; F\nD --&gt; C</code></pre> D\u00e9terminer le nombre de chemins de longueur 42 entre le sommet 6 et le sommet 7. V\u00e9rifier votre r\u00e9ponse :   </p> </li> </ol>"},{"location":"mp2i/algographes/#exercice-2-parcours-en-largeur-dun-graphe","title":"Exercice 2 : Parcours en largeur d'un graphe","text":"<ol> <li> <p>Visualiser l'algorithme de parcours en largeur d'un graphe (site de l'universit\u00e9 de San Francisco). On rappelle que dans ce parcours, on explore le graphe en \"cercles concentriques\" centr\u00e9s sur le sommet de d\u00e9part. Afin de s'assurer de la bonne compr\u00e9hension de l'algorithme, on pourra pr\u00e9voir le parcours puis lancer la visualisation afin de v\u00e9rifier.</p> </li> <li> <p>Ecrire en OCaml une fonction <code>bfs: graphe int -&gt; int array</code> qui prend en argument un graphe et un sommet de d\u00e9part et renvoie un tableau de d'entiers donnant la distance minimale en nombre d'ar\u00eates entre le sommet de d\u00e9part et les sommets du graphe.</p> <p>Note</p> <p>Dans le cours, on avait utilis\u00e9 la valeur <code>-1</code> pour indiquer l'absence de chemin. Une autre possibilit\u00e9 est d'utiliser un type option c'est en OCaml une fa\u00e7on \u00e9l\u00e9gante d'indiquer l'absence de valeur ici, le tableau de distance peut contenir un entier ou alors <code>None</code> pour indiquer qu'aucun chemin n'a \u00e9t\u00e9 trouv\u00e9. c'est-\u00e0-dire qu'on utilise le type <code>None | Some of int</code> (voir la documentation).</p> </li> <li> <p>Vous pouvez t\u00e9l\u00e9charger ci-dessous un fichier texte repr\u00e9sentant un graphe non orient\u00e9 \u00e0 50 noeuds (et 100 ar\u00eates). Chaque ligne est une ar\u00eate sous la forme de deux entiers : sommet de d\u00e9part et sommet d'arriv\u00e9e. Ecrire une fonction <code>lire_graphe string -&gt; int -&gt; int*int list</code> qui prend en argument une chaine de caract\u00e8re (le nom du fichier) ainsi qu'un entier <code>n</code> (le nombre de sommets) et renvoie un graphe d'ordre <code>n</code> en y cr\u00e9ant chaque ar\u00eate lue dans le fichier. Exemple (50 noeuds et 100 ar\u00eates) </p> </li> <li> <p>Tester votre fonction de parcours en largeur sur ce graphe, un seul sommet se situe \u00e0 la distance maximale. Multiplier le num\u00e9ro de ce sommet par cette distance et tester votre r\u00e9sultat :   </p> </li> <li> <p>Pour le moment, notre fonction renvoie le tableau de distance mais sans indiquer le chemin \u00e0 suivre. Cr\u00e9er un tableau <code>parent</code> qui indique lorsqu'un sommet est parcouru le sommet d'o\u00f9 l'on vient.</p> </li> <li> <p>Utiliser ce tableau afin de pouvoir reconstruire un chemin depuis le sommet de d\u00e9part 42 jusqu'\u00e0 n'importe quel sommet du graphe.     Un seul chemin de longueur 4 (la longueur minimale) permet de relier le sommet 42 au sommet 43.  Quel est ce chemin ? Vous pouvez v\u00e9rifier votre r\u00e9sultat en entrant les sommets de ce chemin s\u00e9par\u00e9 par des points virgules (inclure 42 comme premier sommet et 43 comme sommet final)   </p> </li> </ol>"},{"location":"mp2i/algographes/#exercice-3-parcours-en-profondeur-dun-graphe","title":"Exercice 3 : Parcours en profondeur d'un graphe","text":"<ol> <li> <p>Visualiser l'algorithme de parcours en profondeur d'un graphe (site de l'universit\u00e9 de San Francisco). On rappelle que dans ce parcours, on explore \u00e0 chaque \u00e9tape le premier voisin non encore explor\u00e9 du sommet courant. Afin de s'assurer de la bonne compr\u00e9hension de l'algorithme, on pourra pr\u00e9voir le parcours puis lancer la visualisation afin de v\u00e9rifier.</p> </li> <li> <p>Dans cet algorithme on doit disposer d'une structure de donn\u00e9es permettant de savoir si un sommet a d\u00e9j\u00e0 \u00e9t\u00e9 visit\u00e9 ou non. On proposer d'utiliser un tableau de bool\u00e9ens \u00a0<code>visite</code> (si le sommet <code>i</code> n'a pas \u00e9t\u00e9 encore visit\u00e9 alors l'\u00e9l\u00e9ment d'indice <code>i</code> de visite vaut <code>false</code>) et on rappelle que deux options sont envisageables :</p> <ul> <li>utiliser la r\u00e9cursivit\u00e9 de fa\u00e7on \u00e0 ce que les sommets en attente de traitement soient stock\u00e9s dans la pile des appels r\u00e9cursifs</li> <li>utiliser explicitement une pile (module <code>Stack</code> de OCaml)</li> </ul> <p>Ecrire les impl\u00e9mentations du parcours en profondeur en OCaml avec ces deux m\u00e9thodes en vous aidant \u00e9ventuellement de ce qui a \u00e9t\u00e9 fait en cours.</p> </li> <li> <p>M\u00eame question en C, il faudra dans le cas de l'utilisation explicite d'une pile en \u00e9crire une impl\u00e9mentation par liste chain\u00e9e.</p> </li> </ol>"},{"location":"mp2i/algographes/#exercice-4-applications-du-parcours-en-profondeur","title":"Exercice 4 : Applications du parcours en profondeur","text":"<ol> <li> <p>Tri topologique</p> <ol> <li> <p>Modifier le parcours en profondeur de l'exercice pr\u00e9c\u00e9dent afin de conserver l'ordre de visite des sommets. En d\u00e9duire une fonction <code>tri_topologique: graphe -&gt; int list</code> qui renvoie un tri topologique d'un graphe sans circuit donn\u00e9 en argument.</p> </li> <li> <p>Modifier la fonction pr\u00e9c\u00e9dente afin qu'elle l\u00e8ve une exception si on rencontre un circuit</p> </li> <li> <p>Tester sur le graphe suivant (sans circuit)</p> </li> </ol> <pre><code>graph LR\nS0((\"0\"))\nS1((\"1\"))\nS2((\"2\"))\nS3((\"3\"))\nS4((\"4\"))\nS5((\"5\"))\nS6((\"6\"))\nS7((\"7\"))\nS8((\"8\"))\nS7 --&gt; S4\nS4 --&gt; S8\nS5 --&gt; S8\nS5 --&gt; S1\nS8 --&gt; S0\nS6 --&gt; S3\nS1 --&gt; S0\nS4 --&gt; S3</code></pre> <ol> <li>Ajouter un arc de fa\u00e7on \u00e0 former un circuit dans le graphe pr\u00e9c\u00e9dent et tester la d\u00e9tection de cycle</li> </ol> </li> <li> <p>Calcul des composantes connexes </p> <ol> <li> <p>Utiliser l'algorithme de parcours en profondeur afin d'impl\u00e9menter une fonction  <code>composantes_connexes: graphe -&gt; int list list</code> qui renvoie les composantes connexes sous forme de listes de sommets.</p> </li> <li> <p>Tester sur le graphe non orient\u00e9 suivant :</p> </li> </ol> <pre><code>graph LR\nS0((\"0\"))\nS1((\"1\"))\nS2((\"2\"))\nS3((\"3\"))\nS4((\"4\"))\nS5((\"5\"))\nS6((\"6\"))\nS7((\"7\"))\nS8((\"8\"))\nS9((\"9\"))\nS7 --- S4\nS4 --- S8\nS8 --- S7\nS5 --- S1\nS2 --- S3\nS1 --- S2\nS1 --- S3\nS0 --- S6</code></pre> </li> </ol>"},{"location":"mp2i/algographes/#exercice-5-resolution-de-labyrinthe-par-un-parcours-en-largeur","title":"Exercice 5 : R\u00e9solution de labyrinthe par un parcours en largeur","text":"<p>On consid\u00e8re un labyrinthe de dimensions donn\u00e9es et fourni sous la forme d'un fichier ascii o\u00f9 les caract\u00e8res <code>.</code> indiquent les cases o\u00f9 il est possible de se d\u00e9placer et les caract\u00e8res <code>@</code> indiquent un mur infranchissable. On donne les coordonn\u00e9es d'une case en fournissant d'abord le num\u00e9ro de ligne puis le num\u00e9ro de colonne et la case  situ\u00e9e en haut et \u00e0 gauche est de coordonn\u00e9es <code>(0,0)</code>. Dans l'exemple suivant, les dimensions sont de 10 sur 10 et les coordonn\u00e9es de la case contenant un D sont <code>(6,4)</code> et celles de la case contenant un <code>A</code> sont <code>(1,6)</code>:</p> <pre><code>@@@@@@@@@@\n@....@A@.@\n@.@@.@...@\n@.@@.@@.@@\n@.@...@..@\n@......@.@\n@@@@D....@\n@..@...@.@\n@.....@@.@\n@@@@@@@@@@\n</code></pre> <p>Les seuls d\u00e9placements autoris\u00e9s dans le labyrinthe sont droite, haut, gauche et bas. Le but de l'exercice est de d\u00e9terminer, le nombre minimal de d\u00e9placements entre deux cases donn\u00e9es (lorsqu'un chemin entre ces deux cases existe). Dans l'exemple pr\u00e9c\u00e9dent, le nombre minimal de d\u00e9placements pour aller de <code>D</code> vers <code>A</code> est 11 et on a fl\u00e9ch\u00e9 ci-dessus un chemin possible : <pre><code>@@@@@@@@@@\n@....@A@.@\n@.@@.@^&lt;.@\n@.@@.@@^@@\n@.@...@^&lt;@\n@......@^@\n@@@@x&gt;&gt;&gt;^@\n@..@...@.@\n@.....@@.@\n@@@@@@@@@@\n</code></pre></p> <p>Pour cela, l'id\u00e9e est d'effectuer le parcours en largeur d'un graphe :</p> <ul> <li>chaque sommet du graphe est un \u00e9tat du labyrinthe indiquant les cases non encore visit\u00e9es</li> <li>un arc va d'un sommet \\(s\\) vers un sommet \\(t\\) lorsqu'il est possible \u00e0 partir de \\(s\\) d'atteindre une case non encore parcourue qui sera alors marqu\u00e9e comme tel dans \\(t\\).</li> </ul> <p>Par exemple, sur le labyrinthe ci-dessus, en supposant qu'on se trouve initialement sur la case marqu\u00e9e d'un <code>D</code>, trois nouveaux \u00e9tats qu'on a indiqu\u00e9 en les marquants d'un <code>1</code> sont accessibles (en un d\u00e9placement):</p> <pre><code>@@@@@@@@@@\n@....@A@.@\n@.@@.@...@\n@.@@.@@.@@\n@.@...@..@\n@...1..@.@\n@@@@D1...@\n@..@1..@.@\n@.....@@.@\n@@@@@@@@@@\n</code></pre> <p>A partir de ces nouveaux \u00e9tats, on peut acc\u00e9der en deux d\u00e9placements aux cases indiqu\u00e9es ci-dessous avec un 2 : <pre><code>@@@@@@@@@@\n@....@A@.@\n@.@@.@...@\n@.@@.@@.@@\n@.@.2.@..@\n@..212.@.@\n@@@@D12..@\n@..@12.@.@\n@...2.@@.@\n@@@@@@@@@@\n</code></pre></p> <p>On donnera les fichiers repr\u00e9sentant un labyrinthe sous le format suivant :</p> <ul> <li>La premi\u00e8re ligne donne le nombre de lignes </li> <li>La seconde ligne le nombre de colonnes</li> <li>La troisi\u00e8me ligne contient les coordonn\u00e9es du points de d\u00e9part (deux entiers : la ligne et la colonne)</li> <li>La quatri\u00e8me ligne contient les coordonn\u00e9es du point d'arriv\u00e9e </li> </ul> <p>Ainsi, le probl\u00e8me de trouver le plus court chemin depuis le point <code>D</code> jusqu'au point <code>A</code> donn\u00e9 dans le labyrinthe en exemple sera repr\u00e9sent\u00e9 par le fichier ascii suivant : <pre><code>10\n10\n6 4\n1 6\n@@@@@@@@@@\n@....@.@.@\n@.@@.@...@\n@.@@.@@.@@\n@.@...@..@\n@......@.@\n@@@@.....@\n@..@...@.@\n@.....@@.@\n@@@@@@@@@@\n</code></pre></p> <ol> <li> <p>On d\u00e9cide dans la suite de repr\u00e9senter la carte de taille <code>heightxwidth</code> par un tableau lin\u00e9aris\u00e9e c'est \u00e0 dire que le point de coordonn\u00e9es <code>l,c</code> dans la carte sera \u00e0 l'indice <code>l*width+c</code> dans un tableau \u00e0 une dimension. Ecrire les fonction suivantes :</p> <ul> <li><code>int get_index(int l, int c, int width)</code> qui renvoie l'index dans le tableau lin\u00e9aris\u00e9 du point de coordonn\u00e9es <code>l,c</code></li> <li><code>void get_lc(int index, int* l, int *c, int width)</code> qui modifie <code>*l</code> et <code>*c</code> afin qu'ils contiennent la ligne et la colonne correspondantes \u00e0 l'index <code>index</code> dans le tableau lin\u00e9aris\u00e9.</li> </ul> Correction <pre><code>int get_index(int l, int c, int width)\n{\n    return l * width + c;\n}\n\nvoid get_lc(int index, int *l, int *c, int width)\n{\n    *l = index / width;\n    *c = index % width;\n}\n</code></pre> </li> <li> <p>Ecrire une fonction de signature <code>int *read_map(char filename[], int* height, int* width, int* start, int* arrival)</code> qui prend en entr\u00e9e un nom de fichier <code>filename</code>, modifie les entiers <code>height</code>, <code>width</code>, <code>start</code> et  <code>arrival</code> afin qu'ils contiennent le nombre de lignes du labyrinthe, le nombre de colonne, l'index dans le tableau lin\u00e9aris\u00e9 des points de d\u00e9part et d'arriv\u00e9e. Cette fonction renvoie un pointeur vers une matrice lin\u00e9aris\u00e9e d'entiers, dans lequel on repr\u00e9sentant les cases vides par <code>0</code> et les murs par <code>1</code>. Ces deux constantes peuvent \u00eatres d\u00e9finies (par exemple avec une directive de pr\u00e9compiliation en d\u00e9but de programme de fa\u00e7on explicite : <code>#define EMPTY 0</code> et <code>#define WALL 1</code>)</p> Correction <pre><code>int *read_map(char filename[], int *height, int *width, int *start, int *arrival)\n{\n    FILE *inputstream = fopen(filename, \"r\");\n    int l, c;\n    if (!inputstream)\n    {\n        printf(\"Fichier non trouv\u00e9 !\\n\");\n        exit(-1);\n    }\n    // Les dimensions sont sur les deux premieres lignes\n    fscanf(inputstream, \"%d\", height);\n    fscanf(inputstream, \"%d\", width);\n    // Puis on lit les coordonn\u00e9es du point de d\u00e9part et d'arriv\u00e9e\n    fscanf(inputstream, \"%d\", &amp;l);\n    fscanf(inputstream, \"%d\", &amp;c);\n    *start = get_index(l, c, *width);\n    fscanf(inputstream, \"%d\", &amp;l);\n    fscanf(inputstream, \"%d\", &amp;c);\n    *arrival = get_index(l, c, *width);\n    int *map = malloc(sizeof(int) * *height * *width);\n    char cc;\n    fgetc(inputstream);\n    for (int l = 0; l &lt; *height; l++)\n    {\n        for (int c = 0; c &lt; *width; c++)\n        {\n            cc = fgetc(inputstream);\n            if (cc == '@')\n            {\n                map[get_index(l,c,*width)] = WALL;\n            }\n            else if (cc == '.')\n            {\n                map[get_index(l,c,*width)] = EMPTY;\n            }\n            else\n            {\n                printf(\"Caract\u00e8re inconnu dans le fichier \\n\");\n            }\n        }\n        fgetc(inputstream);\n    }\n    fclose(inputstream);\n    return map;\n}\n</code></pre> </li> <li> <p>On doit maintenant \u00e9crire la structure de donn\u00e9es de file dans laquelle seront enfiler les \u00e9tats successifs lors du parcours en largeur du graphe. Pour cela on propose le type structur\u00e9 suivant :</p> <pre><code>    struct node_s\n    {\n        int num; //l'index de la case dans le tableau lin\u00e9aris\u00e9\n        int dist;//le nombre de d\u00e9placements pour l'atteindre\n        struct node_s *next;//pointeur vers le noeud suivant\n    };\n    typedef struct node_s node;\n    typedef node *lnode;\n    struct queue_s\n    {\n        lnode start;\n        lnode end;\n    };\n    typedef struct queue_s queue;\n</code></pre> <p>C'est \u00e0 dire qu'on repr\u00e9sente une file d'attente par une liste chain\u00e9e avec un pointeur sur le premier \u00e9l\u00e9ment et un pointeur sur le dernier \u00e9l\u00e9ment de la liste. Dans cette structure, il est bien important de comprendre que l'ajout d'un \u00e9l\u00e9ment se fait apr\u00e8s le pointeur de queue et que le retrait d'un \u00e9l\u00e9ment se fait depuis le pointeur de t\u00eate.</p> <pre><code>flowchart LR\nsubgraph \"Pointeurs d'acc\u00e8s\"\n    direction RL\n    T[Start]\n    Q[End]\nend\nsubgraph \"Liste chain\u00e9e\"\n    direction RL \n    A((\"A\")) \n    B((\"B\"))\n    C((\"C\"))\n    D((\"D\"))\n    E((\"E\"))\n    N[\"NULL\"]\n    A --&gt;  B --&gt; C--&gt; D --&gt; E --&gt; N\nend\nT --&gt; A\nQ --&gt; E</code></pre> <p>Dans l'exemple ci-dessus, l'\u00e9l\u00e9ment d\u00e9fil\u00e9 serait A et on enfilerais un nouvel \u00e9l\u00e9ment apr\u00e8s E.</p> <p>Ecrire les fonctions suivantes qui permettront de manipuler cette structure de donn\u00e9es :</p> <ol> <li><code>queue create()</code> qui renvoie une file vide (les deux pointeurs <code>start</code> et <code>end</code> sont <code>NULL</code>).</li> <li><code>bool is_empty(queue q)</code> qui renvoie <code>true</code> si la file est vide.</li> <li><code>insert(queue *q, int nodenum, int nodedist)</code> qui enfile un nouveau nom dont on donne l'indice <code>nodenum</code> et la distance par rapport au point de d\u00e9part <code>nodedist</code></li> <li><code>node extract(queue *q)</code> qui d\u00e9file un noeud.</li> <li><code>void destroy(queue *q)</code> qui d\u00e9file tous les \u00e9l\u00e9ments et lib\u00e8re l'espace m\u00e9moire allou\u00e9.</li> </ol> Correction <pre><code>queue create()\n{\n    queue q = {.start = NULL, .end = NULL};\n    return q;\n}\n\nbool is_empty(queue q)\n{\n    return q.start == NULL;\n}\n\nvoid insert(queue *q, int nodenum, int nodedist)\n{\n    // Ajout d'un noeud APRES le pointeur de fin\n    node *new = malloc(sizeof(node));\n    if (!new)\n    {\n        printf(\"Impossible d'allouer un espace m\u00e9moire suffisant \\n\");\n        exit(-2);\n    }\n    new-&gt;num = nodenum;\n    new-&gt;dist = nodedist;\n    new-&gt;next = NULL;\n    if (q-&gt;end)\n    {\n        q-&gt;end-&gt;next = new;\n    }\n    else\n    {\n        q-&gt;start = new;\n    }\n    q-&gt;end = new;\n}\n\nnode extract(queue *q)\n{\n    // Retrait du noeud point\u00e9 par le pointeur de t\u00eate\n    assert(q-&gt;start != NULL);\n    node n;\n    node *temp = q-&gt;start;\n    n.num = q-&gt;start-&gt;num;\n    n.dist = q-&gt;start-&gt;dist;\n    q-&gt;start = q-&gt;start-&gt;next;\n    if (!q-&gt;start)\n    {\n        q-&gt;end = NULL;\n    }\n    free(temp);\n    return n;\n}\n\nvoid destroy(queue *q)\n{\n    node *temp;\n    while (q-&gt;start)\n    {\n        temp = q-&gt;start;\n        q-&gt;start = q-&gt;start-&gt;next;\n        free(temp);\n    }\n}\n</code></pre> </li> <li> <p>Maintenant que nous disposons de la structure de donn\u00e9es ad\u00e9quate il nous reste \u00e0 appliquer l'algorithme de parcours en largeur afin de d\u00e9terminer la longueur minimale d'un chemin liant le point de d\u00e9part \u00e0 celui d'arriver. On commencer par initialiser une file avec pour seul \u00e9l\u00e9ment le point de d\u00e9part (repr\u00e9sent\u00e9 par son index dans le tableau lin\u00e9aris\u00e9) associ\u00e9e \u00e0 une distance de 0. Puis tant que cette file vide n'est pas vide et que l'arriv\u00e9e n'a pas \u00e9t\u00e9 atteinte, on d\u00e9file un noeud et on enfile les cases adjacentes non encore parcourues (qu'on pourra marquer dans la carte \u00e0 l'aide d'une constante <code>VISITED</code>). Ecrire une fonction <code>int solve(char* fname)</code> qui prend en argument un nom de fichier contenant un labyrinthe (au format d\u00e9crit en introduction) et renvoie la longueur d'un plus court chemin ou <code>-1</code> si aucun chemin n'existe.</p> Correction <pre><code>queue create()\n{\n    queue q = {.start = NULL, .end = NULL};\n    return q;\n}\n\nbool is_empty(queue q)\n{\n    return q.start == NULL;\n}\n\nvoid insert(queue *q, int nodenum, int nodedist)\n{\n    // Ajout d'un noeud APRES le pointeur de fin\n    node *new = malloc(sizeof(node));\n    if (!new)\n    {\n        printf(\"Impossible d'allouer un espace m\u00e9moire suffisant \\n\");\n        exit(-2);\n    }\n    new-&gt;num = nodenum;\n    new-&gt;dist = nodedist;\n    new-&gt;next = NULL;\n    if (q-&gt;end)\n    {\n        q-&gt;end-&gt;next = new;\n    }\n    else\n    {\n        q-&gt;start = new;\n    }\n    q-&gt;end = new;\n}\n\nnode extract(queue *q)\n{\n    // Retrait du noeud point\u00e9 par le pointeur de t\u00eate\n    assert(q-&gt;start != NULL);\n    node n;\n    node *temp = q-&gt;start;\n    n.num = q-&gt;start-&gt;num;\n    n.dist = q-&gt;start-&gt;dist;\n    q-&gt;start = q-&gt;start-&gt;next;\n    if (!q-&gt;start)\n    {\n        q-&gt;end = NULL;\n    }\n    free(temp);\n    return n;\n}\n\nvoid destroy(queue *q)\n{\n    node *temp;\n    while (q-&gt;start)\n    {\n        temp = q-&gt;start;\n        q-&gt;start = q-&gt;start-&gt;next;\n        free(temp);\n    }\n}\n</code></pre> </li> <li> <p>On peut \u00e0 pr\u00e9sent tester notre programme en lui donnant en entr\u00e9e un fichier contenant un probl\u00e8me de labyrinthe. Par exemple pour le labyrinthe donn\u00e9 en exemple :     <pre><code>10\n10\n6 4\n1 6\n@@@@@@@@@@\n@....@.@.@\n@.@@.@...@\n@.@@.@@.@@\n@.@...@..@\n@......@.@\n@@@@.....@\n@..@...@.@\n@.....@@.@\n@@@@@@@@@@\n</code></pre>     Le programme doit renvoyer 11.     On propose ci-dessous un autre jeu de donn\u00e9es avec un labyrinthe bien plus grands, il est extrait du site      2D Pathfinding Benchmark. Et vous pouvez le t\u00e9l\u00e9charger ci-dessous : Labyrinthe      Et vous pouvez v\u00e9rifier la r\u00e9ponse du programme :   </p> </li> <li> <p>Pour le moment on dispose de la longueur minimale d'un chemin, mais pas du chemin lui-m\u00eame. Afin de reconstruire le chemin parcouru, on propose d'enregistrer dans un tableau <code>parent</code> la case d'origine d'une case nouvellement atteinte. Ainsi \u00e0 l'origine le point de d\u00e9part n'a pas de parent, puis chaque case atteinte en un d\u00e9placement a pour parent la case de d\u00e9part. Une fois la case d'arriv\u00e9e atteinte, on remonte de proche en proche dans ce tableau afin de reconstruire le chemin parcouru. Ecrire une fonction de signature <code>int* solve_path(char* fname)</code> qui renvoie un pointeur vers le tableau des cases parcourues si un chemin est trouv\u00e9 et un pointeur null sinon. On pourra retrouver la taille de ce tableau car un chemin se termine forc\u00e9ment sur la case d'arriv\u00e9e.</p> </li> </ol>"},{"location":"mp2i/algographes/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/arbres/","title":"C12 Arbres binaires","text":"<p>\"Trees sprout up just about everywhere in computer science\"D. Knuth</p>"},{"location":"mp2i/arbres/#cours","title":"Cours","text":"<p>Support de cours chapitre 12 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/arbres/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD12 </p>"},{"location":"mp2i/arbres/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"mp2i/arbres/#exercice-1-implementation-des-arbres-binaires-en-c","title":"Exercice 1 : Impl\u00e9mentation des arbres binaires en C","text":"<p>On rappelle la structure de donn\u00e9es vue en cours et permettant de repr\u00e9senter une arbre binaire en C : <pre><code>    struct noeud\n    {\n        struct noeud *sag;\n        int valeur;\n        struct noeud *sad;\n    };\n    typedef struct noeud noeud;\n    typedef noeud *ab;\n</code></pre> On donne aussi, la fonction permettant de cr\u00e9er un arbre binaire en donnant ses deux sous arbres et son \u00e9tiquette : <pre><code>    ab cree_arbre(ab g, int v, ab d)\n    {\n        noeud *n = malloc(sizeof(noeud));\n        {\n            n-&gt;sag = g;\n            n-&gt;valeur = v;\n            n-&gt;sad = d;\n            return n;\n        }\n    }\n</code></pre></p> <ol> <li> <p>En utilisant cette repr\u00e9sentation, cr\u00e9er une variable <code>t</code> de type arbre binaire repr\u00e9sentant l'arbre suivant ; <pre><code>    graph TD\n    A[\"14\"] --&gt; L[\"7\"]\n    A --&gt; G[\"10\"]\n    L --&gt; O[\"5\"]\n    L --&gt; R[\"6\"]\n    G --- V1[\" \"]\n    G --&gt; I[\"12\"]\n    style V1 fill:#FFFFFF, stroke:#FFFFFF\n    linkStyle 4 stroke:#FFFFFF,stroke-width:0px</code></pre></p> Visualisation de l'arbre <p>On donne ci-dessous une fonction permettant de visualiser l'arbre.</p> <pre><code>    void write_edge(FILE *writer, ab g, int *ninv)\n    {\n        if (g-&gt;sag != NULL)\n        {\n            fprintf(writer, \"%d\", g-&gt;valeur);\n            fprintf(writer, \" -&gt; \");\n            fprintf(writer, \"%d\\n\", g-&gt;sag-&gt;valeur);\n            write_edge(writer, g-&gt;sag, ninv);\n        }\n        else\n        {\n            fprintf(writer, \"I%d [style=invis]\\n\", *ninv);\n            fprintf(writer, \"%d -&gt; I%d [style=invis]\\n\", g-&gt;valeur, *ninv);\n            (*ninv)++;\n        }\n        fprintf(writer, \"I%d [style=invis]\\n\", *ninv);\n        fprintf(writer, \"%d -&gt; I%d [style=invis]\\n\", g-&gt;valeur, *ninv);\n        (*ninv)++;\n        if (g-&gt;sad != NULL)\n        {\n            fprintf(writer, \"%d\", g-&gt;valeur);\n            fprintf(writer, \" -&gt; \");\n            fprintf(writer, \"%d\\n\", g-&gt;sad-&gt;valeur);\n            write_edge(writer, g-&gt;sad, ninv);\n        }\n        else\n        {\n            fprintf(writer, \"I%d [style=invis]\\n\", *ninv);\n            fprintf(writer, \"%d -&gt; I%d [style=invis]\\n\", g-&gt;valeur, *ninv);\n            (*ninv)++;\n        }\n    }\n\n    void view(ab g)\n    {\n        FILE *writer = fopen(\"temp.gv\", \"w\");\n        int n = 0;\n        fprintf(writer, \"digraph mygraph {\\n\");\n        write_edge(writer, g, &amp;n);\n        fprintf(writer, \"}\\n\");\n        fclose(writer);\n        system(\"xdot temp.gv &amp;\");\n    }\n</code></pre> </li> <li> <p>Ecrire une fonction <code>est_vide</code> de signature <code>bool est_vide(ab a)</code> permettant de tester si l'arbre donn\u00e9 en param\u00e8tre est vide.</p> </li> <li> <p>Ecrire et tester la fonction <code>taille</code>  de signature <code>int taille(ab a)</code> et qui renvoie le nombre de noeuds de l'arbre binaire donn\u00e9 en argument.</p> </li> <li> <p>Ecrire et tester la fonction <code>hauteur</code>  de signature <code>int hauteur(ab a)</code> et qui renvoie la hauteur de l'arbre binaire donn\u00e9 en argument.</p> </li> <li> <p>Ecrire une fonction permettant <code>detruit</code> de signature <code>void detruit(ab *a)</code> qui permet de d\u00e9truire un arbre binaire en lib\u00e9rant l'espace m\u00e9moire occup\u00e9 par ses noeuds. Apr\u00e8s l'appel \u00e0 cette fonction, <code>a</code> est le pointeur <code>NULL</code>.</p> </li> <li> <p>Ecrire une fonction <code>insere_noeud</code> de signature <code>void insere_noeud(ab *t, int v)</code> qui ins\u00e8re \u00e0 un emplacement al\u00e9atoire un noeud portant l'\u00e9tiquette <code>v</code> dans l'abre <code>*t</code>. </p> <p>Aide</p> <p>Pour ins\u00e9rer un noeud de fa\u00e7on al\u00e9atoire, on pourra proc\u00e9der de la fa\u00e7on suivante :</p> <ul> <li>Si l'arbre est vide il devient l'arbre <code>(NULL,v,NULL)</code></li> <li>Sinon on descend al\u00e9atoirement \u00e0 gauche ou \u00e0 droit pour y faire l'insertion.</li> <li>On rappelle qu'en C, <code>rand()</code> g\u00e9n\u00e8re un entier al\u00e9atoire entre 0 et le plus grand entier repr\u00e9sentable</li> <li>Une m\u00e9thode possible d'initialisation du g\u00e9n\u00e9rateur al\u00e9atoire de nombre est d'utiliser le temps : <code>srand(time(NULL));</code> disponible apr\u00e8s <code>#include &lt;time.h&gt;</code></li> </ul> </li> <li> <p>Ecrire une fonction <code>arbre_aleatoire</code> de signature <code>ab arbre_aleatoire(int n)</code> qui g\u00e9n\u00e8re un arbre binaire al\u00e9atoire de <code>n</code> noeuds portant comme \u00e9tiquette les entiers \\(0, \\dots, n-1\\). </p> <p>Aide</p> <p>On pourra proc\u00e9der de la fa\u00e7on suivante :</p> <ul> <li>g\u00e9n\u00e9rer une permutation al\u00e9atoire de \\(\\{0,\\dots,n-1\\}\\) en utilisant par exemple le m\u00e9lange de Fischer-Yates,</li> <li>ins\u00e9rer les entiers dans l'ordre de la permutation en utilisant la fonction <code>insere_noeud</code> de la question pr\u00e9c\u00e9dente.</li> </ul> </li> </ol>"},{"location":"mp2i/arbres/#exercice-2-implementation-des-arbres-binaires-en-ocaml","title":"Exercice 2 : Impl\u00e9mentation des arbres binaires en OCaml","text":"<p>On rappelle l'impl\u00e9mentation des arbres binaires avec des \u00e9tiquettes enti\u00e8res  en OCaml vu en cours : <pre><code>    type ab = \n      |Vide \n      | Noeud of ab * int * ab ;;\n</code></pre></p> <ol> <li> <p>En utilisant cette repr\u00e9sentation, cr\u00e9er une variable <code>t</code> de type <code>ab</code> repr\u00e9sentant l'arbre suivant ; <pre><code>    graph TD\n    A[\"14\"] --&gt; L[\"17\"]\n    A --&gt; G[\"9\"]\n    G --- V1[\" \"]\n    L --&gt; R[\"6\"]\n    L --- V2[\" \"]\n    G --&gt; I[\"8\"]\n    style V1 fill:#FFFFFF, stroke:#FFFFFF\n    style V2 fill:#FFFFFF, stroke:#FFFFFF\n    linkStyle 2 stroke:#FFFFFF,stroke-width:0px\n    linkStyle 4 stroke:#FFFFFF,stroke-width:0px</code></pre></p> Visualisation de l'arbre <p>On donne ci-dessous une fonction permettant de visualiser l'arbre.</p> <pre><code>    let rec write_edge a writer ninv=\n      match a with\n      | Vide -&gt; ()\n      | Noeud (sag,e,sad) -&gt;\n        match sag, sad with\n        | Vide, Vide -&gt; ();\n        | Noeud (_, eg, _), Vide -&gt;\n          Printf.fprintf writer \"%d -&gt; %d\\n\" e eg;\n          Printf.fprintf writer  \"I%d [style=invis]\\n %d -&gt; I%d [style=invis]\\n\" !ninv e !ninv;\n          ninv := !ninv +1;\n          Printf.fprintf writer  \"I%d [style=invis]\\n %d -&gt; I%d [style=invis]\\n\" !ninv e !ninv;\n          ninv := !ninv +1;\n          write_edge sag writer ninv;\n        | Vide, Noeud(_,ed,_) -&gt;\n          Printf.fprintf writer  \"I%d [style=invis]\\n %d -&gt; I%d [style=invis]\\n\" !ninv e !ninv;\n          ninv := !ninv +1;\n          Printf.fprintf writer  \"I%d [style=invis]\\n %d -&gt; I%d [style=invis]\\n\" !ninv e !ninv;\n          ninv := !ninv +1;\n          Printf.fprintf writer \"%d -&gt; %d\\n\" e ed;\n          write_edge sad writer ninv;\n        | Noeud (_,eg,_), Noeud (_,ed, _ ) -&gt;\n          Printf.fprintf writer \"%d -&gt; %d\\n\" e eg;\n          Printf.fprintf writer  \"I%d [style=invis]\\n %d -&gt; I%d [style=invis]\\n\" !ninv e !ninv;\n          ninv := !ninv +1;\n          Printf.fprintf writer \"%d -&gt; %d\\n\" e ed;\n          write_edge sag writer ninv;\n          write_edge sad writer ninv;\n    ;;\n\n    let view a =\n      let ninv = ref 0 in\n      let outc = open_out \"temp.gv\" in\n      output_string outc \"digraph mygraph {\\n\";\n      write_edge a outc ninv;\n      output_string outc \"}\\n\";\n      close_out outc;\n      ignore (Sys.command \"xdot temp.gv\");;\n</code></pre> </li> <li> <p>Ecrire une fonction <code>est_vide</code> de signature <code>ab -&gt; bool</code> permettant de tester si l'arbre donn\u00e9 en param\u00e8tre est vide.</p> </li> <li> <p>Ecrire et tester la fonction <code>taille</code>  de signature <code>ab -&gt; int</code> et qui renvoie le nombre de noeuds de l'arbre binaire donn\u00e9 en argument.</p> </li> <li> <p>Ecrire et tester la fonction <code>hauteur</code>  de signature <code>ab -&gt; int</code> et qui renvoie la hauteur de l'arbre binaire donn\u00e9 en argument.</p> </li> <li> <p>En utilisant la m\u00e9thode de votre choix (deux sont propos\u00e9es dans l'exercice pr\u00e9c\u00e9dent), \u00e9crire en OCaml une fonction <code>arbre_alaetoire</code> de signature <code>int -&gt; ab</code> et qui renvoie un arbre al\u00e9atoire de \\(n\\) noeuds.</p> </li> </ol>"},{"location":"mp2i/arbres/#exercice-3-arbre-complet-represente-par-un-tableau","title":"Exercice 3 : Arbre complet repr\u00e9sent\u00e9 par un tableau","text":"<p>Cet exercice concerne la repr\u00e9sentation d'un arbre binaire complet de taille \\(n\\) par un tableau de taille \\(n\\) et  est \u00e0 traiter au choix en OCaml ou en C.  Pour chaque question, le tableau <code>tab</code> da taille <code>n</code> est la repr\u00e9sentation en machine d'un arbre binaire complet de taille <code>n</code>.</p> <ol> <li> <p>Ecrire une fonction qui pour le noeud situ\u00e9 \u00e0 l'indice <code>i</code> renvoie l'indice du parent (\\(-1\\) pour la racine)</p> </li> <li> <p>Ecrire une fonction qui pour le noeud situ\u00e9 \u00e0 l'indice <code>i</code> renvoie les indices des fils gauches et droit (\\(-1\\) s'il n'existent pas)</p> </li> <li> <p>Ecrire une fonction renvoyant la hauteur de l'arbre.</p> </li> </ol>"},{"location":"mp2i/arbres/#exercice-4-parcours-recursif-en-c","title":"Exercice 4 : Parcours r\u00e9cursif en C","text":"<ol> <li> <p>Ecrire en langage C, une fonction qui affiche les noeuds dans l'ordre :</p> <p>a. d'un parcours prefixe b. d'un parcours infixe c. d'un parcours postfixe  </p> </li> <li> <p>On souhaite \u00e0 pr\u00e9sent cr\u00e9er une liste chain\u00e9e contenant les noeuds dans l'ordre du parcours pr\u00e9fixe  </p> <p>a. Impl\u00e9menter une structure de liste chain\u00e9e en C dans laquelle on conservera un pointeur sur la premier \u00e9l\u00e9ment de la liste et aussi un pointeur sur le dernier \u00e9l\u00e9ment de la liste. De cette fa\u00e7on, on peut concat\u00e9ner deux listes en temps constant.</p> <p>b. En utilisant cette impl\u00e9mentation, \u00e9crire une fonction renvoyant une liste chain\u00e9e contenant les noeuds de l'arbre dans l'ordre d'un parcours prefixe. </p> </li> </ol>"},{"location":"mp2i/arbres/#exercice-5-parcours-recursif-en-ocaml","title":"Exercice 5 : Parcours r\u00e9cursif en OCaml","text":"<ol> <li> <p>Ecrire en OCaml, en utilisant l'op\u00e9rateur de concat\u00e9nation <code>@</code> une fonction <code>prefixe : 'a ab -&gt; 'a list</code> qui renvoie le parcours pr\u00e9fixe de l'arbre binaire donn\u00e9 en argument.</p> </li> <li> <p>Comme cela a \u00e9t\u00e9 vu en td, on rappelle que le parcours pr\u00e9c\u00e9dent est de compl\u00e9xit\u00e9 quadratique (car l'op\u00e9rateur <code>@</code> est de complexit\u00e9 lin\u00e9aire par rapport \u00e0 la longueur de la premi\u00e8re liste). On cherche donc maintenant \u00e0 \u00e9crire une version de complexit\u00e9 lin\u00e9aire du parcours pr\u00e9fixe. d'un arbre binaire. Pour cela on propose d'\u00e9crire une fonction auxilaire <code>prefixe_aux : 'a ab -&gt; 'a list -&gt; 'a list</code> qui prend en argument un arbre binaire et une liste <code>acc</code> et renvoie le parcours prefixe de l'arbre suivi du contenu de <code>acc</code>.</p> <p>Aide</p> <p>Utiliser la fonction auxiliaire pour traduire le fait que le parcours pr\u00e9fixe de l'arbre <code>(g, v, d)</code> est <code>v</code> suivi du parcours pr\u00e9fixe de <code>g</code> suivi du parcours pr\u00e9fixe de <code>d</code>.</p> </li> <li> <p>R\u00e9prendre le question pr\u00e9c\u00e9dentes pour le parcours infixe et pour le parcours postfixe.</p> </li> </ol>"},{"location":"mp2i/arbres/#exercice-6-parcours-en-largeur-en-c","title":"Exercice 6 : Parcours en largeur en C","text":"<p>Ecrire une fonction de signature <code>void largeur(ab a)</code> qui affiche les noeuds dans l'ordre d'un parcours en largeur. Comme expliqu\u00e9 en cours, on peut utiliser une file qu'on pourra impl\u00e9menter par exemple par une liste chain\u00e9e (avec un pointeur de t\u00eate et un pointeur de queue).</p>"},{"location":"mp2i/arbres/#exercice-7-parcours-en-largeur-en-ocaml","title":"Exercice 7 : Parcours en largeur en OCaml","text":"<p>Ecrire une fonction de signature <code>ab -&gt; unit</code> qui affiche les noeuds dans l'ordre d'un parcours en largeur. Comme expliqu\u00e9 en cours, on peut utiliser une file qu'on pourra impl\u00e9menter \u00e0 l'aide du module <code>Queue</code> de Caml dont on rappelle ci-dessous quelques fonctions :</p> <ul> <li><code>Queue.create</code> de signature <code>unit -&gt; 'a Queue.t</code> qui cr\u00e9e une file d'attente vide, par exemple <code>let ma_file = Queue.create ()</code></li> <li><code>Queue.is_empty</code> de signature (<code>'a Queue.t -&gt; bool</code>) qui teste si la file est vide ou non</li> <li><code>Queue.push</code> de signature (<code>'a -&gt; 'a Queue.t -&gt; unit</code>) qui enfile un \u00e9l\u00e9ment, par exemple <code>Queue.push 10 ma_file</code></li> <li><code>Queue.pop</code> de signature (<code>'a Queue.t -&gt; 'a</code>) qui d\u00e9file un \u00e9l\u00e9ment, par exemple <code>let elt = Queue.pop ma_file</code></li> </ul>"},{"location":"mp2i/arbres/#exercice-8-arbre-binaire-de-recherche-en-c","title":"Exercice 8 : Arbre binaire de recherche en C","text":"<p>Pour l'impl\u00e9mentation des arbres binaires de recherche en C, on reprend la structure utilis\u00e9e pour les arbres binaires : <pre><code>    struct noeud\n    {\n        struct noeud *sag;\n        int valeur;\n        struct noeud *sad;\n    };\n    typedef struct noeud noeud;\n    typedef noeud *abr;\n</code></pre></p> <ol> <li> <p>Ecrire une fonction <code>insere</code> de signature <code>void insere(abr *t, int v)</code> qui ins\u00e8re la valeur <code>v</code> dans l'arbre binaire <code>t</code>. </p> </li> <li> <p>Construire et visualiser l'arbre binaire obtenu en ins\u00e9rant successivement les valeurs \\(7, 5, 9, 2\\) et \\(11\\).</p> </li> <li> <p>Ecrire une fonction <code>present</code> de signature <code>bool present(abr t, int v)</code> qui teste l'appartenance de la valeur <code>v</code> \u00e0 l'arbre <code>t</code>.</p> </li> </ol> <p>Note</p> <p>Pour \u00e9crire l'impl\u00e9mentation de la suppression d'une cl\u00e9 dans un abr en C, on recommande de commencer par l\u2019impl\u00e9mentation en OCaml ci-dessous.</p>"},{"location":"mp2i/arbres/#exercice-9-arbre-binaire-de-recherche-en-ocaml","title":"Exercice 9 : Arbre binaire de recherche en OCaml","text":"<p>Pour l'impl\u00e9mentation des arbres binaires de recherche en OCaml, on reprend la structure utilis\u00e9e pour les arbres binaires : <pre><code>    type abr = \n      |Vide \n      |Noeud of abr *  int * abr;;\n</code></pre></p> <ol> <li> <p>Ecrire une fonction <code>insere</code> de signature <code>abr -&gt; int -&gt; abr</code> qui ins\u00e8re une valeur dans un  abr et renvoie l'abr obtenu. </p> </li> <li> <p>Construire et visualiser l'arbre binaire obtenu en ins\u00e9rant successivement les valeurs \\(7, 5, 9, 2\\) et \\(11\\).</p> </li> <li> <p>Ecrire une fonction <code>present</code> de signature <code>abr -&gt; int -&gt; bool</code> qui teste si une valeur appartient ou non \u00e0 un <code>abr</code>.</p> </li> <li> <p>Ecrire une fonction <code>min_arb : abr -&gt; int</code> qui renvoie la plus petite cl\u00e9 pr\u00e9sente dans un abr non vide. </p> </li> <li> <p>Ecrire une fonction <code>max_arb : abr -&gt; int</code> qui renvoie la plus grande cl\u00e9 pr\u00e9sente dans un abr non vide. </p> </li> <li> <p>Ecrire une fonction <code>supprime : abr -&gt; int -&gt; abr</code> qui supprime une cl\u00e9 dans un abr.</p> <p>Aide</p> <p>On rappelle que l'algorithme de suppression distingue plusieurs cas :</p> <ul> <li>si l'arbre est vide ou que la cl\u00e9 n'est pas pr\u00e9sente alors on renvoie l'arbre.</li> <li>sinon on descend r\u00e9cursivement dans l'arbre jusqu'\u00e0 trouver la cl\u00e9 \\(x\\), dans un noeud \\((g, x, d)\\) si ce noeud est une feuille on le supprime sinon on peut soit remplacer \\(x\\) par le maximum de \\(g\\) (si \\(g\\) est non vide) soit remplacer \\(d\\) par le minimum de \\(d\\) (si \\(d\\) est non vide).</li> </ul> </li> </ol>"},{"location":"mp2i/arbres/#exercice-10-hauteur-moyenne-dun-abr-aleatoire","title":"Exercice 10 : Hauteur moyenne d'un ABR al\u00e9atoire","text":"<p>Le but de cet exercice est de faire des statistiques sur la hauteur de l'arbre binaire obtenu en ins\u00e9rant al\u00e9atoirement dans cet arbre les entiers \\(0, \\dots, 1023\\). Pour l'impl\u00e9mentation, on utilisera au choix le C ou OCaml.</p> <ol> <li>Quelle est la hauteur maximale obtenue ? donner un ordre d'insertion permettant d'atteindre cette valeur</li> <li>Quelle est la hauteur minimale ?</li> <li> <p>Ecrire une fonction permettant de g\u00e9n\u00e9rer une permutation al\u00e9atoire des entiers \\(0,\\dots,1023\\)</p> <p>Aide</p> <p>On pourra par exemple, g\u00e9n\u00e9rer le tableau des entiers de 0 \u00e0 1023 puis utiliser le melagne de Knuth</p> </li> <li> <p>Cr\u00e9er une fonction prenant en argument un tableau d'entiers, qui ins\u00e8re ces entiers dans un abr puis renvoie la hauteur de l'arbre obtenu.</p> </li> <li> <p>Donner la moyenne, le minimum, le maximum de la s\u00e9rie statistique des hauteurs obtenues en utilisant 1000 fois la fonction pr\u00e9c\u00e9dente.</p> </li> </ol>"},{"location":"mp2i/arbres/#exercice-11-implementation-de-la-structure-de-tas-en-c","title":"Exercice 11 : Impl\u00e9mentation de la structure de tas en C","text":"<p>On rappelle qu'un tas est un arbre binaire complet et que par cons\u00e9quent, on peut le repr\u00e9senter \u00e0 l'aide d'un tableau. En C, on propose la structure de donn\u00e9es suivantes : <pre><code>    struct heap_s\n    {\n        int size;\n        int capacity;\n        int *array;\n    };\n    typedef struct heap_s heap;\n</code></pre></p> <ul> <li><code>size</code> est la taille courant du tas</li> <li><code>capacity</code> est la capacit\u00e9 maximale du tas</li> <li><code>array</code> est le pointeur vers les \u00e9l\u00e9ments du tas, la zone m\u00e9moire correspondante est allou\u00e9e de taille <code>capacity</code> \u00e0 la cr\u00e9ation du tas.</li> </ul> <p>Le but de l'exercice est d'\u00e9crire les fonctions d'insertion (percolation vers le haut) et de suppression du minimum  (percolation vers le bas) d'un \u00e9l\u00e9ment dans ce tas puis de les utiliser afin d'impl\u00e9menter l'algorithme du tri par tas.</p> <ol> <li> <p>Rappeler les indices des fils \u00e9ventuels d'un \u00e9l\u00e9ment dont l'indice dans le tableau est <code>i</code> puis \u00e9crire une fonction de signature <code>int son(int i)</code> qui renvoie l'indice du fils gauche du noeud d'indice <code>i</code>.</p> </li> <li> <p>Rappeler l'indices du parent  d'un \u00e9l\u00e9ment dont l'indice dans le tableau est <code>i&gt;0</code> puis \u00e9crire une fonction de signature <code>int father(int i)</code> qui renvoie l'indice du parent du noeud d'indice <code>i</code>.</p> </li> <li> <p>Ecrire la fonction <code>heap make_heap(int cap)</code> qui renvoie un tas binaire de capacit\u00e9 maximale <code>cap</code>, on rappelle qu'il faut allouer le pointeur vers les \u00e9l\u00e9ments du tas.</p> </li> <li> <p>Ecrire la fonction <code>bool insert_heap(int nv, heap *mh)</code> qui modifie le tas donn\u00e9 en argument en y ins\u00e9rant la valeur <code>nv</code>. </p> </li> <li> <p>Tester ces fonctions sur un exemple simple et afficher le tas binaire cr\u00e9e en utilisant la fonction de visualisation des arbres.</p> </li> <li> <p>Ecrire et tester la fonction <code>#c int getmin(heap *mh)</code> qui extrait le minimum du tas binaire donn\u00e9 en argument.</p> </li> <li> <p>Ecrire une impl\u00e9mentation du tri par tas de signature <code>#c void heapsort(int *array, int size)</code> qui trie le tableau donn\u00e9 en argument.</p> </li> </ol>"},{"location":"mp2i/arbres/#exercice-12-implementation-de-la-structure-de-tas-en-ocaml","title":"Exercice 12 : Impl\u00e9mentation de la structure de tas en Ocaml","text":"<p>Reprendre l'exercice pr\u00e9c\u00e9dent en utilisant OCaml, avec le type suivant pour repr\u00e9senter un tas :</p> <pre><code>    type 'a heap = {mutable size : int; data : 'a array};;\n</code></pre>"},{"location":"mp2i/arbres/#humour-dinformaticien","title":"Humour d'informaticien","text":"<p> Finally after years of search I found a real tree ... </p>"},{"location":"mp2i/arithmetique/","title":"C4 Arithm\u00e9tique des ordinateurs","text":"<p>\"It makes me nervous to fly an airplane since I know they are designed using floating-point arithmetic\"A. Householder</p>"},{"location":"mp2i/arithmetique/#cours","title":"Cours","text":"<p>Support de cours chapitre 4 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/arithmetique/#travaux-diriges","title":"Travaux Dirig\u00e9s","text":"<p>Fiche de TD4 </p>"},{"location":"mp2i/arithmetique/#travaux-pratiques","title":"Travaux Pratiques","text":""},{"location":"mp2i/arithmetique/#exercice-1-puissance","title":"Exercice 1 : Puissance","text":"<ol> <li>Ecrire une fonction <code>puissance</code> qui prend en argument un entier \\(n\\) et un entier positif \\(p\\) et renvoie \\(n^p\\).</li> <li> <p>Modifier la fonction pr\u00e9c\u00e9dente de fa\u00e7on \u00e0 prendre en compte le cas des exposants n\u00e9gatifs.</p> <p>Aide</p> <p>On rappelle que pour \\(n \\in \\mathbb{Z}^*,\\; p \\in \\mathbb{N} \\quad n^{-p} = \\dfrac{1}{n^p}\\)</p> </li> <li> <p>Proposer un jeu de test pour cette fonction.</p> </li> </ol>"},{"location":"mp2i/arithmetique/#exercice-2-du-binaire-au-decimal","title":"Exercice 2 : Du binaire au d\u00e9cimal","text":"<ol> <li>Ecrire une fonction <code>bin_to_decimal</code> qui convertit une \u00e9criture binaire en sa valeur d\u00e9cimale. L'\u00e9criture binaire sera lue comme un tableau d'entiers contenant des 0 ou des 1 et on prendra aussi en argument sa taille. Par exemple si le tableau <code>bin</code> contient les valeurs <code>1,0,1,1</code> alors <code>bin_to_decimal(bin,4)</code> doit renvoyer <code>11</code> (car \\(2^3 + 2^1+2^0 = 11\\)) </li> <li> <p>Modifier la fonction <code>bin_to_decimal</code> qui prend maintenant en argument un troisi\u00e8me param\u00e8tre bool\u00e9en <code>signe</code>, si <code>signe</code> vaut <code>true</code> l'\u00e9criture binaire est trait\u00e9 comme un compl\u00e9ment \u00e0 deux sur la longueur du tableau, sinon la fonction se comporte comme \u00e0 la question pr\u00e9c\u00e9dente. Par exemple  <code>bin_to_decimal(bin,4,false)</code> doit renvoyer <code>11</code> (m\u00eame comportement que ci-dessus) mais <code>bin_to_decimal(bin,4,true)</code> doit renvoyer \u00a0<code>-5</code>, en effet \\(-2^3+2^1+2^0=-5\\).</p> </li> <li> <p>Vous avez (peut-\u00eatre) utilis\u00e9 la fonction <code>puissance</code> de l'exercice pr\u00e9c\u00e9dent, dans ce cas, reprendre cet exercice en remarquant que :</p> \\[ \\sum_{k=0}^{n} a_ib^i = a_0 + b\\left( a_1 + b\\left(a_2+ \\dots (a_n-1+ba_n) \\right) \\right) \\] <p>et que par cons\u00e9quent la somme de gauche peut se calculer (plus efficacement) sans utiliser le calcul explicite des puissances de \\(b\\).</p> </li> </ol>"},{"location":"mp2i/arithmetique/#exercice-3-conversion-en-decimal","title":"Exercice 3 : Conversion en d\u00e9cimal","text":"<p>Ecrire une fonction <code>to_decimal</code> qui prend en argument un entier <code>base</code> (compris entre 2 et 16), un tableau de caract\u00e8res <code>chiffres</code> et sa taille <code>size</code> et renvoie l'entier dont l'\u00e9criture en base <code>base</code> corresponds aux \u00e9lements du tableau <code>chiffres</code>. Par exemple si <code>chiffres</code> contient <code>\"C\",\"7\"</code>  alors <code>to_decimal(16,chiffres,2)</code> doit renvoyer \\(12\\times 16+7 = 199\\).</p> <p>Aide</p> <ul> <li>On utilisera (bien \u00e9videmment) les caract\u00e8res \"A\", \"B\", \"C\", \"D\", \"E\", \"F\" pour les chiffres situ\u00e9s au del\u00e0 de 9.</li> <li>On \u00e9crira une version ne calculant pas explicitement les puissances de la base (voir la troisi\u00e8me question de l'exercice pr\u00e9c\u00e9dent)</li> </ul>"},{"location":"mp2i/arithmetique/#exercice-4-conversion-depuis-la-base-10","title":"Exercice 4 : Conversion depuis la base 10","text":"<ol> <li> <p>la base 2</p> <ol> <li> <p>Ecrire en C, une fonction <code>binaire</code> qui prend en argument un entier <code>n</code> positif compris entre 0 et 255 et renvoie un tableau de 0 et de 1 contenant son \u00e9criture binaire sur 8 bits (avec les bits de poids forts en premier). Par exemple l'appel <code>binaire(28)</code> doit renvoyer le tableau  <code>00011100</code>.</p> <p>Aide</p> <p>On rappelle que la m\u00e9thode consiste \u00e0 effectuer des divisions successives par 2 puis \u00e0 lire les restes obtenus dans l'ordre inverse.</p> </li> <li> <p>Ecrire un programme <code>bin.exe</code> qui utilise cette fonction, le <code>main</code> de ce programme accepte en ligne de commande un argument <code>n</code> et affiche ensuite l'\u00e9criture binaire de <code>n</code> dans le terminal. Par exemple <code>./bin.exe 135</code> affiche <code>11100001</code>.</p> </li> <li> <p>Expliquer rapidement pourquoi <code>./bin.exe 260</code> affiche  <code>00000100</code>.</p> </li> </ol> </li> <li> <p>la base 16</p> <ol> <li>Ecrire en C, une fonction <code>hexadecimal</code> qui prend en argument un entier <code>n</code> positif compris entre 0 et \\(2^{32}-1\\) et renvoie un tableau de caract\u00e8res correspondant aux chiffres en base 16 de l'\u00e9criture hexad\u00e9cimal de <code>n</code>.</li> <li>De m\u00eame que pour le binaire, \u00e9crire un programme <code>hex.exe</code> qui utilise cette fonction en prenant son argument sur la ligne de commande. Par exemple <code>./hex.exe 212</code> affiche <code>D4</code>.</li> </ol> </li> </ol>"},{"location":"mp2i/arithmetique/#exercice-5-algorithme-des-divisions-succesives","title":"Exercice 5 : Algorithme des divisions succesives","text":"<p>Le but de l'exercice est d'\u00e9crire une impl\u00e9mentation en langage C de l'algorithme des divisions successives qui permet de convertir un nombre \u00e9crit en base 10 dans une base \\(b\\) quelconque (\\(b \\geqslant 2\\)). Si \\(b&gt;10\\), on utilise comme chiffre les lettres de l'alphabet, on d\u00e9clare donc en d\u00e9but de programme une chaine de caract\u00e8res :</p> <pre><code>const char* CHIFFRES=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n</code></pre> <ol> <li>Ecrire une fonction de signature \u00a0<code>int nb_chiffres(int n, int b)</code> qui renvoie le nombre de chiffres de <code>n</code> en base <code>b</code>.</li> <li> <p>Ecrire une fonction de signature <code>char* chiffres(int n, int b)</code> qui renvoie les chiffres de <code>n</code> en base <code>b</code> sous la forme d'une chaine de caract\u00e8res. Par exemple <code>chiffres(42,2)</code> doit renvoyer le chaine de caract\u00e8res <code>\"101010\"</code></p> <p>Aide</p> <p>On pourra proc\u00e9der de la fa\u00e7on suivante :</p> <ul> <li>d\u00e9terminer <code>p</code> le nombre de chiffres de <code>n</code> en base <code>b</code> gr\u00e2ce \u00e0 la fonction de la question 1.</li> <li>allouer dans le tas un tableau de <code>p+1</code> caract\u00e8res (on pr\u00e9voit le caract\u00e8re sentinelle en fin de chaine).</li> <li>remplir ce tableau avec les restes successifs des divisions de <code>n</code> par <code>b</code></li> </ul> </li> <li> <p>Ecrire une fonction main qui accepte en ligne de commande des arguments et utiliser ces arguments (apr\u00e8s conversion) dans l'appel \u00e0 la fonction <code>chiffres</code> et \u00e9crit le r\u00e9sultat dans le terminal. Par exemple si votre executable s'appelle <code>baseb.exe</code>, alors on pourra \u00e9crire <code>./baseb.exe 42 2</code> pour optenir comme affichage dans le terminal l'\u00e9criture en base 2 de 42 c'est \u00e0 dire <code>101010</code>.</p> </li> <li> <p>Tester votre fonction en affichant l'\u00e9criture en base <code>26</code> de <code>403642</code> (on rappelle qu'il y a 26 chiffres en base 26, les premiers sont <code>0,1, .. ,9</code> et apr\u00e8s on utilise  les lettres <code>A, B, ...</code>). V\u00e9rfier votre r\u00e9ponse   </p> </li> </ol>"},{"location":"mp2i/arithmetique/#exercice-6-fonction-atoi","title":"Exercice 6 : Fonction atoi","text":"<p>On rappelle que la fonction <code>atoi</code> (disponible sans <code>stblib.h</code>) permet de convertir une chaine de caract\u00e8re en un entier. Par exemple <code>atoi(\"42\")</code> renvoie l'entier (<code>int</code>) <code>42</code>. Le but de l'exercice est d'\u00e9crire votre propre version de cette fonction qu'on appellera <code>myatoi</code>, pour simplifier, cette fonction ne g\u00e8rera pas les probl\u00e8mes de d\u00e9passements de capacit\u00e9, ainsi lorsque la chaine de caract\u00e8re en entr\u00e9e correspond \u00e0 l'\u00e9criture d\u00e9cimale d'un entier sup\u00e9rieur \u00e0 <code>INT_MAX</code> ou inf\u00e9rieur \u00e0 <code>INT_MIN</code> alors le r\u00e9sultat est ind\u00e9fini. D'autre part, la fonction traitera le d\u00e9but de la cha\u00eene jusqu'\u00e0 rencontrer un caract\u00e8re autre qu'un chiffre, si aucun chiffre n'est fourni la fonction renverra <code>0</code> . Voici des exemples de comportements attendus :</p> <ul> <li><code>myatoi(\"78\")</code> renvoie l'entier <code>78</code></li> <li><code>myatoi(\"-212\")</code> renvoie l'entier <code>-212</code></li> <li><code>myatoi(\"77trucs212\")</code> renvoie l'entier <code>77</code> (on a arr\u00eat\u00e9 le traitement de la chaine au <code>t</code>)</li> <li><code>myatoi(\"MPI\")</code> renvoie <code>0</code> (aucun chiffre)</li> </ul>"},{"location":"mp2i/arithmetique/#exercice-7-attention-aux-flottants","title":"Exercice 7 : Attention aux flottants !","text":"<ol> <li> <p>On consid\u00e8re le programme suivant :</p> <pre><code>    # include &lt;stdio.h&gt;\n\n    int main()\n    {\n        double x = 0;\n        int nb_tours = 0;\n        while (x!=1.0)\n        {\n            x = x + 0.25;\n            nb_tours = nb_tours + 1;\n        }\n        printf(\"Sortie apr\u00e8s %d tours de boucle\\n\",nb_tours);\n    }\n</code></pre> <ol> <li>Expliquer pourquoi ce programme ne termine pas</li> <li>Expliquer pourquoi en modifiant la ligne 9 en <code>x = x + 0.25</code> le programme termine et indiquer l'affichage obtenu.</li> <li>Donner une autre modification de la ligne 9 qui permettrait aussi d'avoir un programme qui termine.</li> </ol> </li> <li> <p>On consid\u00e8re le programme suivant :</p> <pre><code>    # include &lt;stdio.h&gt;\n    # include &lt;math.h&gt;\n\n    int main()\n    {\n        double big = pow(2.0,53.0);\n        double small = 1.0;\n        double test;\n        test = (big + small) - big;\n        printf(\"R\u00e9sultat = %f \\n\",test);\n    }\n</code></pre> <ol> <li>Pr\u00e9dire l'affichage produit par ce programme, le tester.</li> <li>M\u00eame question si la ligne 6 est modifi\u00e9e en <code>double big = pow(2.0,52.0);</code></li> <li>Expliquer les r\u00e9sultats obtenus.</li> </ol> </li> <li> <ol> <li> <p>Justifier rapidement que pour tout entier \\(n \\geq 1\\),</p> \\[ \\sum_{k=1}^{n} \\frac{1}{k(k+1)} = 1 - \\frac{1}{n+1} \\] <p>Aide</p> <p>On pourra remarquer que \\(\\frac{1}{k(k+1)} = \\frac{1}{k} - \\frac{1}{k+1}\\)</p> </li> <li> <p>Ecrire un programme calculant cette somme et comparer avec le r\u00e9sultat exact pour \\(n=999999\\). On utilisera le sp\u00e9cificateur de format <code>%.16f</code> afin d'afficher 16 chiffres significatifs lors de <code>printf</code> sur les flottants.</p> <p>Warning</p> <p>Si <code>i</code> est de type entier, l'op\u00e9ration <code>1/i</code> est la division enti\u00e8re, pour une division d\u00e9cimal l'un des arguments au moins doit \u00eatre un nombre en virgule flotttante, on peut donc (par exemple) faire <code>1.0/i</code>.</p> </li> </ol> </li> <li> <ol> <li>Ecrire un programme calculant la somme des inverses des nombres entiers allant de \\(1\\) \u00e0 \\(10^9\\).</li> <li>Faire de m\u00eame en inversant l'ordre des calculs c'est-\u00e0-dire en commen\u00e7ant par ajouter les nombres de plus grands d\u00e9nominateurs.</li> <li>Expliquer la diff\u00e9rence entre les deux r\u00e9sultats obtenus (visible en utilisant le sp\u00e9cificateur de format <code>%.16f</code> lors de l'affichage des flottants)</li> <li>Lequel des deux est selon vous le plus pr\u00e9cis ? (justifier)</li> </ol> </li> </ol>"},{"location":"mp2i/arithmetique/#exercice-8-erreur-darrondi","title":"Exercice 8 : Erreur d'arrondi","text":"<p>Le calcul en arithm\u00e9tique \u00e0 virgule de \\(0.1+0.2\\) ne donne pas exactement \\(0.3\\). Cet exercice a pour but d'expliquer cette erreur bien connue.</p> <ol> <li> <p>Donner la repr\u00e9sentation en simple pr\u00e9cision au format de la norme IEEE-754 des nombres suivants :</p> <ol> <li>\\(0.1\\)</li> <li>\\(0.2\\)</li> <li>\\(0.3\\)</li> </ol> </li> <li> <p>Faire l'addition \"\u00e0 la main\" des repr\u00e9sentations des \\(0.1\\) et de \\(0.2\\)</p> </li> <li> <p>Comparer le r\u00e9sultat obtenu avec la repr\u00e9sentation de \\(0.3\\) et en d\u00e9duire l'erreur commise</p> </li> <li> <p>Ecrire un programme qui affiche le r\u00e9sultat de \\((0.2+0.1)-0.3\\)</p> </li> </ol>"},{"location":"mp2i/arithmetique/#exercice-9-discriminant","title":"Exercice 9 : Discriminant","text":"<ol> <li>Ecrire une fonction <code>discriminant</code> qui prend en param\u00e8tres trois flottants  \\(a,b\\) et \\(c\\) et renvoie \\(b^2-4ac\\).</li> <li>Ecrire une fonction <code>nombre_solutions</code> qui prend en param\u00e8tre un flottant \\(d\\) et affiche <code>2 solutions</code> si \\(d&gt;0\\), <code>1 solution</code> si \\(d=0\\) et <code>pas de solutions</code> si \\(d&lt;0\\).</li> <li>D\u00e9terminer le nombre de solutions r\u00e9elles des \u00e9quations suivantes et comparer avec les r\u00e9sultats obtenus en utilisant les deux fonctions ci-dessous :<ul> <li>\\(x^2 + 1,4x - 0,49 = 0\\)</li> <li>\\(x^2 + 0,6x - 0,09 = 0\\)</li> <li>\\(x^2 + 0,4x - 0,04 = 0\\)</li> </ul> </li> <li>Interpr\u00e9ter ces r\u00e9sultats</li> </ol>"},{"location":"mp2i/arithmetique/#exercice-10-comportement-dune-suite","title":"Exercice 10 : Comportement d'une suite","text":"<p>On consid\u00e8re la suite \\((u_n)_{n \\in \\mathbb{N}}\\) d\u00e9finie par : \\(\\left\\{ \\begin{array}{ll} u_0=e-1 \\\\ u_{n+1} = (n+1)\\,u_n - 1 \\end{array}\\right.\\)</p> <p>On rappelle qu'en TD (exercice 10), on a \u00e9tabli que cette suite converge et a pour limite 0.</p> <ol> <li> <p>Ecrire un programme en C, qui  affiche les \\(30\\) premiers termes de la suite \\(u\\). On utilisera la constante <code>M_E</code> de <code>math.h</code> comme valeur de \\(e\\). </p> </li> <li> <p>Expliquer le r\u00e9sultat obtenu.</p> </li> </ol>"},{"location":"mp2i/arithmetique/#exercice-11-convergence-numerique-et-mathematique","title":"Exercice 11 : Convergence num\u00e9rique et math\u00e9matique","text":"<p>On consid\u00e8re la suite \\((u_n)_{n \\in \\mathbb{N}}\\) d\u00e9finie par : \\(\\left\\{ \\begin{array}{ll} u_1= \\dfrac{5}{4} \\\\ u_2 = \\dfrac{7}{5} \\\\ u_{n+2} = 10 - \\dfrac{23}{u_{n+1}} + \\dfrac{14}{u_nu_{n+1}} \\end{array}\\right.\\)</p> <p>On rappelle qu'en TD (exercice 10), on a \u00e9tabli que cette suite converge et on a d\u00e9termin\u00e9 sa limite.</p> <ol> <li>Ecrire un programme qui affiche les 40 premiers termes de la suite \\(u\\).</li> <li>Expliquer le r\u00e9sultat obtenu.</li> </ol> <p>Note</p> <p>Cet exercice se contente d'exhiber une suite qui converge vers 2 mais qui num\u00e9riquement semble converger vers 7. On ne d\u00e9taille pas le principe de constructions de telles suites, il faut bien comprendre que 2 et 7 sont choisis au hasard et qu'il est assez facile de construire une suite qui converge vers une valeur \\(\\alpha\\) alors que num\u00e9riquement elle semble converger vers une valeur diff\u00e9rente \\(\\beta\\). On pourra consulter les travaux de Jean-Michel Muller et Vicent Lef\u00e8vre dont cet exemple s'inspire.</p>"},{"location":"mp2i/arithmetique/#exercice-12-exercice-de-synthese-constante-de-kaprekar","title":"Exercice 12 : Exercice de synth\u00e8se : constante de Kaprekar","text":"<p>Etant donn\u00e9 un nombre \\(n\\), on consid\u00e8re le processus suivant appel\u00e9 Algorithme de Kaprekar d'apr\u00e8s le nom de son inventeur le math\u00e9maticien indien D. R. Kaprekar :</p> <ul> <li>former le nombre \\(m\\) \u00e9crit avec les chiffres de \\(n\\) dans l'ordre d\u00e9croissant</li> <li>former le nombre \\(p\\) \u00e9crit avec les chiffres de \\(n\\) dans l'ordre croissant</li> <li>calculer la diff\u00e9rence  \\(m-p\\) qu'on note \\(k(n)\\).</li> </ul> <p>Par exemple en base 10, avec \\(n=7182\\), on obtient successivement : \\(m=8721\\), \\(p=1278\\) et donc \\(k(n) = 7443\\). On peut recommencer le processus avec ce nouveau nombre on trouve alors \\(k(7443) = 7443 - 3447 = 3996\\), en it\u00e9rant encore le processus on obtient \\(6264\\) puis \\(4176\\) et enfin \\(6174\\) qui s'av\u00e8re \u00eatre un point fixe c'est \u00e0 dire que \\(k(6174) = 6174\\). Le nombre \\(6174\\) s'appelle la constante de Kaprekar et dans cet exercice nous allons montrer que le processus aboutit toujours \u00e0 cette valeur pour n'importe quel entier de 4 chiffres de d\u00e9part (avec ces chiffres non tous \u00e9gaux). </p> <p>Comme nous devons travailler sur les chiffres de l'entier \\(n\\) (les extraire, les trier), on propose de repr\u00e9senter un nombre par le tableau de ses chiffres, il sera aussi utile de disposer du nombre de chiffres du nombre aussi on propose le type structur\u00e9 suivant permettant de repr\u00e9senter un nombre :</p> <pre><code>struct nombre_s\n{\n    uint8_t nb_chiffres;\n    uint8_t *chiffres;\n};\ntypedef struct nombre_s nombre;\n</code></pre> <p>Note</p> <p>On prendra soin au fil des questions de tester les fonctions d\u00e9j\u00e0 \u00e9crites.</p> <ol> <li> <p>Ecrire une fonction de signature <code>nombre cree_nombre(int n)</code> qui prend en entr\u00e9e un nombre positif <code>n</code> et renvoie un struct contenant son nombre de chiffres et le tableau de ses chiffres. Par exemple <code>cree_nombre(1492)</code> doit renvoyer une variable de type <code>nombre</code> dont le champ <code>nb_chiffres</code> vaut 4 et dont le champ <code>chiffres</code> pointe sur une zone m\u00e9moire contenant les entiers <code>{2, 9, 4, 1}</code>.</p> </li> <li> <p>Ecrire une fonction <code>int valeur(nombre n)</code> qui effectue l'op\u00e9ration inverse, elle prend une variable de type <code>nombre</code> en entr\u00e9e et renvoie l'entier correspondant.</p> </li> <li> <p>Ecrire une fonction <code>void libere(nombre n)</code> qui lib\u00e8re l'espace m\u00e9moire occup\u00e9 par les chiffres de <code>n</code> et mets son nombre de chiffres \u00e0 0.</p> </li> <li> <p>Ecrire une fonction de signature <code>nombre copie(nombre n)</code> qui renvoie une copie du struct nombre donn\u00e9 en argument.</p> </li> <li> <p>Ecrire en utilisant l'algorithme de tri de votre choix (parmi le tri par s\u00e9lection, par insertion ou \u00e0 bulles) une fonction <code>tri</code> de signature <code>void tri(uint8_t tab[], int size)</code> qui tri en place le tableau <code>tab</code> dans l'ordre croissant. On pourra s'aider d'une fonction annexe qui \u00e9change dans un tableau deux \u00e9l\u00e9ments dont on donne les indices.</p> </li> <li> <p>Ecrire une fonction de signature <code>nombre decroissant(nombre n)</code> qui prend en entr\u00e9e un nombre <code>n</code> et renvoie le nombre form\u00e9 par les chiffres de <code>n</code> pris dans l'ordre d\u00e9croissant.</p> </li> <li> <p>Ecrire une fonction de signature <code>void retourne(uint8_t tab[], int size)</code> qui retourne en place les \u00e9l\u00e9ments du tableau <code>tab</code>.</p> </li> <li> <p>En utilisant les fonctions pr\u00e9c\u00e9dentes, \u00e9crire une fonction <code>nombre kaprekar(nombre n)</code> qui renvoie le nombre obtenu \u00e0 partir de <code>n</code> en effectuant une it\u00e9ration du processus de Kaprekar. </p> </li> <li> <p>V\u00e9rifier que pour tous les entiers \u00e0 4 chiffres (non tous \u00e9gaux), la r\u00e9p\u00e9tition du processus de Kaprekar aboutit toujours au point fixe \\(6174\\). Quel est le nombre maximal d'it\u00e9rations n\u00e9cessaire pour obtenir \\(6174\\) ?</p> </li> <li> <p>Parmi les nombres \u00e0 5 chiffres existe-t-il des nombres qui sont des points fixes ? </p> </li> <li> <p>V\u00e9rifier qu'il y a deux nombres qui sont des points fixes dans le cas de nombres \u00e0 6 chiffres, quel est le plus petit d'entre eux ?   </p> </li> </ol> <p>Note</p> <p>On peut utiliser ce processus pour des nombres \u00e9cris dans n'importe quel base, par exemple en base 16 et chercher s'il existe des points fixes.</p>"},{"location":"mp2i/arithmetique/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/complement/","title":"C21 Complement sur les arbres","text":"<p>\"Trees sprout up just about everywhere in computer science\"D. Knuth</p>"},{"location":"mp2i/complement/#cours","title":"Cours","text":"<p>Support de cours chapitre 21 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/complement/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD21 </p>"},{"location":"mp2i/complement/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"mp2i/complement/#exercice-1-sur-les-arbres-rouge-noir","title":"Exercice 1 : Sur les arbres rouge-noir","text":"<p>Pour r\u00e9pr\u00e9senter un arbre rouge noir en OCaml, on d\u00e9finit un type somme <code>Rouge | Noir</code> pour la couleur puis on ajoute cette information de couleur dans les noeuds :</p> <pre><code>    type couleur = Rouge | Noir;;\n    type arb = Vide | Noeud of arb * (couleur*int) * arb;;\n</code></pre> <ol> <li> <p>G\u00e9n\u00e9ralit\u00e9s</p> <ol> <li> <p>On rappelle (voir cours) que dans un arbre rouge-noir, le nombre de noeuds noirs le long d'un chemin menant de la racine \u00e0 une feuille est toujours le m\u00eame, cette quantit\u00e9 est  la hauteur noire. Ecrire une fonction <code>arn -&gt; int</code> qui calcule la hauteur noire d'un arbre rouge noir.</p> </li> <li> <p>Tester votre fonction sur les deux arbres suivants : <pre><code>let t1 = Noeud(Noeud(Vide,(Noir,0),Vide),(Noir,1),Noeud(Noeud(Vide,(Noir,2),Vide),(Rouge,3),Noeud(Vide,(Noir,4),Noeud(Vide,(Rouge,5),Vide))))\nlet t2 = Noeud(Noeud(Vide,(Noir,0),Vide),(Noir,1),Noeud(Noeud(Vide,(Noir,2),Vide),(Rouge,3),Noeud(Vide,(Noir,4),Noeud(Vide,(Rouge,5),Noeud(Vide,(Noir,6),Vide)))))\n</code></pre> Vous pouvez visualiser ces arbres gr\u00e2ce \u00e0 la fonction de visualisation :</p> Visualisation d'un arbre rouge noir en Caml <p>Attention, cette fonction utiliser une variable globale <code>int ninv = 0</code> que vous devrez d\u00e9clarer en d\u00e9but de programme. <pre><code>    let rec write_edge a writer =\n      match a with\n      | Vide -&gt; ()\n      | Noeud (sag,(c,e),sad) -&gt;  Printf.fprintf writer \"%d [color = %s]\\n\" e (string_of_color c);\n        match sag, sad with\n        | Vide, Vide -&gt; ();\n        | Noeud (_, (_,eg), _), Vide -&gt;\n            Printf.fprintf writer \"%d -&gt; %d\\n\" e eg;\n            Printf.fprintf writer  \"I%d [style=invis]\\n %d -&gt; I%d [style=invis]\\n\" !ninv e !ninv;\n            ninv := !ninv +1;\n            Printf.fprintf writer  \"I%d [style=invis]\\n %d -&gt; I%d [style=invis]\\n\" !ninv e !ninv;\n            ninv := !ninv +1;\n            write_edge sag writer;\n        | Vide, Noeud(_,(_,ed),_) -&gt;\n            Printf.fprintf writer  \"I%d [style=invis]\\n %d -&gt; I%d [style=invis]\\n\" !ninv e !ninv;\n          ninv := !ninv +1;\n            Printf.fprintf writer  \"I%d [style=invis]\\n %d -&gt; I%d [style=invis]\\n\" !ninv e !ninv;\n            ninv := !ninv +1;\n            Printf.fprintf writer \"%d -&gt; %d\\n\" e ed;\n            write_edge sad writer;\n        | Noeud (_,(_,eg),_), Noeud (_,(_,ed), _ ) -&gt;\n            Printf.fprintf writer \"%d -&gt; %d\\n\" e eg;\n            Printf.fprintf writer  \"I%d [style=invis]\\n %d -&gt; I%d [style=invis]\\n\" !ninv e !ninv;\n            ninv := !ninv +1;\n            Printf.fprintf writer \"%d -&gt; %d\\n\" e ed;\n            write_edge sag writer;\n            write_edge sad writer;\n        ;;\n\n    let view a =\n    let outc = open_out \"temp.gv\" in\n    output_string outc \"digraph mygraph {\\n\";\n    write_edge a outc;\n    output_string outc \"}\\n\";\n    close_out outc;\n    ignore (Sys.command \"dot -Tpng temp.gv -o temp.png\");\n    ignore (Sys.command \"eog temp.png\");\n    ();;\n</code></pre></p> </li> <li> <p>Ecrire une fonction <code>verifie_abr</code> de signature <code>arn -&gt; bool</code> qui v\u00e9rifie que l'arbre donn\u00e9 en argument est un arbre binaire de recherche.</p> </li> <li> <p>Ecrire une fonction <code>verifier_couleurs</code> de signature <code>arn-&gt;bool</code> qui v\u00e9rifie que dans un <code>arn</code>, le p\u00e8re d'un noeud rouge est noir</p> </li> <li> <p>D\u00e9duire des questions pr\u00e9c\u00e9dentes une fonction permettant de v\u00e9rifier qu'un arbre est bien un arbre rouge-noir.</p> </li> </ol> </li> <li> <p>Insertion dans un arbre rouge-noir On rappelle (voir TD), que pour ins\u00e9rer un nouveau noeud dans un arbre rouge-noir, on commence par ins\u00e9rer comme dans un abr en coloriant le nouveau noeud en rouge. Puis lorsqu'un conflit rouge-rouge intervient, on le r\u00e9sout en coloriant la racine en noire si le conflit se situe \u00e0 la racine, sinon on effectue une des transformations vues en TD.</p> <ol> <li> <p>Ecrire une fonction <code>noicir_racine</code> de signature <code>arn -&gt; arn</code> qui colorie la racine en noire</p> </li> <li> <p>Ecrire une fonction <code>correction_rouge</code> qui permet de corriger un conflit rouge-rouge lorsque celui ci ne se trouve pas \u00e0 la racine. On utilisera un filtrage par motif et on rappelle qu'on se trouve dans l'un des quatre cas ci-dessous :   qui se ram\u00e8ne tous \u00e0 : </p> </li> <li> <p>Ecrire une fonction qui ins\u00e8re une nouvelle valeur dans un arbre rouge-noir</p> </li> <li> <p>Cr\u00e9er un arbre rouge noir et y ins\u00e9rer tous les entiers compris entre 1 et \\(1\\,000\\,000\\). Quelle est la hauteur de l'arbre obtenu ?   </p> </li> </ol> </li> </ol>"},{"location":"mp2i/complement/#humour-dinformaticien","title":"Humour d'informaticien","text":"<p> Finally after years of search I found a real tree ... </p>"},{"location":"mp2i/decomposition/","title":"C15 D\u00e9composition en sous probl\u00e8mes","text":"<p>\"Those who cannot remember the past are condemned to repeat it.\"George Santayana(in The Life of Reason, 1905)</p>"},{"location":"mp2i/decomposition/#cours","title":"Cours","text":"<p>Support de cours chapitre 15 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/decomposition/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD15 </p>"},{"location":"mp2i/decomposition/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"mp2i/decomposition/#exercice-1-exemple-standard-de-dpr-le-tri-fusion","title":"Exercice 1 : Exemple standard de DPR : le tri fusion","text":"<p>L'algorithme du tri fusion consiste \u00e0 :  </p> <ul> <li>(diviser) partager le tableau \u00e0 trier en deux moiti\u00e9s (\u00e0 une unit\u00e9 pr\u00e8s), </li> <li>(r\u00e9gner) trier chacune des deux moiti\u00e9s, </li> <li>(combiner) les fusionner pour obtenir la liste tri\u00e9e. </li> </ul> <p>On a sch\u00e9matis\u00e9 le tri du tableau <code>[| 10; 6; 3; 9; 7; 5 |]</code> suivant ce principe ci-dessous : <pre><code>    graph TD\n    subgraph Partager en deux\n    S[\"{10,6,3,9,7,5}\"] --&gt; S1[\"{10,6,3}\"]\n    S --&gt; S2[\"{9,7,5}\"]\n    end\n    subgraph Fusionner\n    S1 -.Trier.-&gt; T1[\"{3,6,10}\"]\n    S2 -.Trier.-&gt; T2[\"{5,7,9}\"]\n    T1 --&gt; T[\"{3,5,6,7,9,10}\"]\n    T2 --&gt; T\n    end</code></pre></p> <ol> <li> <p>Ecrire en OCaml une fonction <code>separe int list -&gt; int list * int list</code> qui s\u00e9pare une liste en deux listes de m\u00eame longueur (\u00e0 une unit\u00e9 pr\u00e8s).</p> </li> <li> <p>Ecrire en OCaml une fonction \u00a0 <code>fusion int list -&gt; int list -&gt; int list</code> qui effectue la fusion de deux listes tri\u00e9es.</p> </li> <li> <p>Donner une impl\u00e9mentation du tri fusion en OCaml.</p> </li> </ol>"},{"location":"mp2i/decomposition/#exercice-2-le-tri-rapide","title":"Exercice 2 : Le tri rapide","text":"<p>Le tri rapide (quicksort) est un algorithme de tri d\u00e9velopp\u00e9 par T. Hoare en 1959. Le tri rapide repose comme le tri fusion sur une m\u00e9thode diviser pour r\u00e9gner. La s\u00e9paration en deux sous tableaux s'effectue en choisissant (al\u00e9atoirement) un pivot, la s\u00e9paration s'effectue alors en mettant d'un c\u00f4t\u00e9 les nombres inf\u00e9rieurs au pivot et de l'autre les nombres sup\u00e9rieurs. Par cons\u00e9quent, la longueur des sous listes  obtenue d\u00e9pend du pivot choisi. Par contre on s'affranchit de la phase de fusion puisqu'elle consiste simplement \u00e0 concat\u00e9ner les deux sous listes. Bien qu'ayant une complexit\u00e9 quadratique dans le pire des cas, l'algorithme a d'excellentes performances dans le cas moyen (la fonction <code>quicksort</code> existe d\u00e9j\u00e0 en C).</p> <p>Par exemple, sur le tableau \\([10, 6, 3, 9, 7, 5]\\) si on choisit comme pivot 5, alors la s\u00e9paration en deux sous listes donnera d'un c\u00f4t\u00e9 \\([3, 5]\\) (les valeurs inf\u00e9rieures ou \u00e9gales au pivot) et de l'autre \\([10, 6, 9, 7]\\) (les valeurs sup\u00e9rieurs).</p> <p>On propose ici d'impl\u00e9menter cet algorithme en langage C en choisissant comme pivot le dernier \u00e9l\u00e9ment du tableau. On effectue la s\u00e9paration en place en renvoyant l'indice du pivot. c'est-\u00e0-dire qu'on veut \u00e9crire une fonction de signature <code>int partitionne(int tab[], int debut, int fin)</code> qui partitionne les valeurs du tableaux comprises entre les indices <code>debut</code> (inclus) et <code>fin</code> (exclu) en choisissant comme pivot <code>tab[fin-1]</code> et qui renvoie l'indice \\(e\\) auquel se trouvera le pivot apr\u00e8s ce partitionnement. On pourra proc\u00e9der de la fa\u00e7on suivante : </p> \\[\\underbrace{\\boxed{\\strut t_0 \\quad \\quad \\quad t_{e-1}}}_{\\leqslant \\text{pivot}}\\underbrace{\\boxed{\\strut t_e}  \\boxed{t_{e+1} \\strut \\quad \\quad \\quad}}_{&gt; \\text{pivot}}\\underbrace{\\boxed{t_i\\strut \\quad \\quad \\quad \\quad t_{n-1}}}_{\\text{non tri\u00e9e}}\\] <ul> <li>La partie situ\u00e9e apr\u00e8s l'indice \\(i\\) n'est pas encore tri\u00e9e</li> <li>Le dernier \u00e9l\u00e9ment est le pivot</li> <li>La partie situ\u00e9e avant l'indice \\(e\\) contient les \u00e9l\u00e9ments plus petits que le pivot</li> <li>La partie situ\u00e9e entre les indice \\(e\\) et \\(i\\) contient les \u00e9l\u00e9ments plus grand que le pivot</li> </ul> <p>Donc on initialise \\(e\\) \u00e0 \\(0\\), on parcourt le tableau avec l'indice \\(i\\), si \\(t_i\\) est plus grand que le pivot il n'y a rien \u00e0 faire, sinon il faut l'\u00e9changer avec \\(t_e\\) et incr\u00e9menter \\(e\\). A la fin, on renvoie \\(e\\).</p> <ol> <li>Ecrire en C la fonction <code>int partitionne(int tab[], int debut, int fin)</code></li> <li>Ecrire en C la fonction <code>void mqsort(int tab[], int start, int end)</code> qui trie avec l'algorithme du tri rapide la portion de tableau comprise entre les indices \u00a0<code>start</code> et <code>end</code>.</li> </ol>"},{"location":"mp2i/decomposition/#exercice-3-nombre-dinversion","title":"Exercice 3 : Nombre d'inversion","text":"<p>Dans une liste d'entiers de \\(n\\) entiers \\(t = [t_0,\\dots t_n]\\), on dit que le couple d'indice \\((i,j)\\) (\\(0 \\leq i &lt;n, 0 \\leq j &lt;n\\)) est une inversion lorsque \\(i&lt;j\\) et \\(t_i&gt;t_j\\) c'est-\u00e0-dire que les \u00e9l\u00e9ments sont dans l'ordre inverse de leurs indices. Par exemple, dans la liste <code>[1; 5; 3; 7]</code> le couple d'indices <code>(1,2)</code> est une inversion car <code>5&gt;3</code>. Par contre, le couple \u00a0<code>(1,3)</code> n'est pas une d'inversion car <code>5&lt;7</code>.</p> <ol> <li> <p>Ecrire en OCaml, une fonction <code>nb_inversion int list -&gt; int</code> qui  renvoie le nombre d'inversions de la liste donn\u00e9e en argument en examinant chaque couple d'indice <code>(i,j)</code>. Quelle est la complexit\u00e9 de cette fonction ?</p> <p>Aide</p> <ul> <li>On peut pr\u00e9f\u00e9rer une solution it\u00e9rative, dans ce cas  on pourra convertir la liste en tableau en utilisant <code>Array.of_list</code> de fa\u00e7on \u00e0 pouvoir acc\u00e9der directement aux \u00e9l\u00e9ments par leur indice.</li> <li>Une solution r\u00e9cursive sans conversion en tableau est aussi envisageable, dans ce cas on pourra soit \u00e9crire une fonction auxiliaire permettant de compter les \u00e9l\u00e9ments sup\u00e9rieurs \u00e0 une valeur donn\u00e9e dans une liste ou utiliser <code>List.filter</code></li> </ul> </li> <li> <p>Montrer que si <code>l1</code> et <code>l2</code> sont deux listes tri\u00e9es dans l'ordre croissant, alors on peut d\u00e9terminer en temps lin\u00e9aire le nombre d'inversion de <code>l1 @ l2</code></p> <p>Aide</p> <p>Dans le cas o\u00f9 <code>l1 = h1::t1</code> et <code>l2 = h2::t2</code>, distinguer les cas <code>h1 &lt;= h2</code> et <code>h1 &gt; h2</code>.</p> </li> <li> <p>On note <code>inv(l)</code> le nombre d'inversion d'une liste <code>l</code>. Montrer que si <code>l1</code> est la moiti\u00e9 gauche de <code>l</code> et <code>l2</code> la moiti\u00e9 droite alors <code>inv(l) = inv(l1) + inv(l2) + inv(l1' @ l2')</code> o\u00f9 <code>l1'</code> (resp. <code>l2'</code>) est la version tri\u00e9e de <code>l1</code> (resp. <code>l2</code>).</p> </li> <li> <p>Ecrire une fonction comptant le nombre d'inversions d'une liste en utilisant une m\u00e9thode diviser pour r\u00e9gner. On pourra utiliser <code>List.sort compare l</code> qui renvoie la liste d'entiers <code>l</code> tri\u00e9e dans l'ordre croissant en \\(O(n\\log n)\\).</p> </li> <li> <p>D\u00e9terminer la complexit\u00e9 de la m\u00e9thode diviser pour r\u00e9gner</p> </li> </ol>"},{"location":"mp2i/decomposition/#exercice-4-recherche-des-deux-points-les-plus-proches","title":"Exercice 4 : Recherche des deux points les plus proches","text":"<p>On consid\u00e8re un ensemble de \\(n\\) points du plan et on souhaite d\u00e9terminer la distance minimale \\(d_{\\min}\\) entre deux de ces points.</p> <ol> <li> <p>R\u00e9solution \"na\u00efve\" (langage de votre choix)</p> <ol> <li>D\u00e9finir un type structur\u00e9 <code>point</code>  ayant deux coordonn\u00e9es flottantes <code>x</code> et <code>y</code>.</li> <li>Ecrire une fonction <code>distance</code> qui prend en argument deux points et renvoie la distance euclidienne entre ces deux points.</li> <li>Ecrire une fonction <code>dmin</code> de complexit\u00e9 quadratique qui r\u00e9sout le probl\u00e8me.</li> </ol> </li> <li> <p>R\u00e9solution avec la m\u00e9thode diviser pour r\u00e9gner</p> <ol> <li> <p>On commence par trier par abscisse croissante l'ensemble des points, on note \\(M_x\\) le tableau obtenu. On coupe ce tableau en deux moiti\u00e9s. Puisque le tableau est tri\u00e9, la moiti\u00e9 gauche (resp. droite) contient les points d'abscisses inf\u00e9rieures (resp. sup\u00e9rieures) \u00e0 \\(x_{\\frac{n}{2}}\\). On recherche la distance minimale entre deux points de la moiti\u00e9 gauche (not\u00e9e \\(d_g\\)) et deux points de la moiti\u00e9 droite (not\u00e9e \\(d_d\\)) et on pose \\(d = \\min\\{d_g, d_d\\}\\). Justifier que si \\(d_{min} &lt; d\\) alors deux points r\u00e9alisant la distance minimale sont forc\u00e9ment de part et d'autre de la bande de largeur \\(d\\) autour de la droite d'\u00e9quation \\(x =  x_{\\frac{n}{2}}\\) (voir illustration ci-dessous).</p> <p></p> </li> <li> <p>On suppose maintenant qu'on dispose des points de cette bande tri\u00e9s par ordonn\u00e9es croissantes. Justifier qu'on peut se contenter de calculer la distance minimale entre chaque point de cette liste et les 7 points suivants. On pourra raisonner sur le sch\u00e9ma suivant :</p> <p></p> </li> <li> <p>Montrer que cette m\u00e9thode conduit \u00e0 l'\u00e9quation de complexit\u00e9 \\(T(n) = 2T(\\frac{n}{2}) + K n \\log(n)\\). Et en d\u00e9duire que \\(T(n) \\in O(n \\log^2(n))\\)</p> </li> <li> <p>En utilisant les questions pr\u00e9c\u00e9dentes, \u00e9crire une impl\u00e9mentation dans le langage de votre choix de la m\u00e9thode diviser pour r\u00e9gner afin de d\u00e9terminer la distance minimale entre deux points.</p> <p>Aide</p> <p>Pour les tris, on pourra utiliser les fonctions d\u00e9j\u00e0 disponibles dans le langage utilis\u00e9 :</p> <ul> <li>En C, c'est la fonction <code>qsort</code> (attention, l'utilisation est prend en param\u00e8tre une fonction de comparaison qui sert de cl\u00e9 de tri)</li> <li>En OCaml, c'est la fonction <code>sort</code> (disponibles sur les listes et les tableaux).</li> </ul> </li> </ol> </li> </ol>"},{"location":"mp2i/decomposition/#exercice-5-la-montee-des-marches","title":"Exercice 5 : La mont\u00e9e des marches","text":"<p>Pour gravir un escalier on peut faire des enjamb\u00e9es d'une ou deux marches. Par exemple pour monter un escalier de 4 marches, on pourrait faire <code>1+2+1</code> ou encore <code>2+2</code>. On s'int\u00e9resse au nombre de fa\u00e7ons de monter un escalier de \\(n\\) marches qu'on note \\(f_n\\). </p> <ol> <li> <p>Donner \\(f_0\\) et \\(f_1\\).</p> </li> <li> <p>Etablir une relation de r\u00e9currence liant \\(f_{n}\\), \\(f_{n-1}\\) et \\(f_{n-2}\\) pour \\(n \\geq 2\\).</p> <p>Aide</p> <p>on pourra diff\u00e9rencier les cas o\u00f9 la derni\u00e8re enjamb\u00e9e fait une ou deux marches.</p> </li> <li> <p>En d\u00e9duire une fonction <code>Ocaml</code>  de complexit\u00e9 lin\u00e9aire permettant de r\u00e9pondre au probl\u00e8me</p> </li> <li> <p>On s'int\u00e9resse maintenant \u00e0 la construction effective de toutes les possibilit\u00e9s et on notera \\(p_n\\) la liste des fa\u00e7ons possibles de gravir un escalier de \\(n\\) marches. Les possibilit\u00e9s sont donn\u00e9es sous forme de cha\u00eene de caract\u00e8res compos\u00e9es de 1 et de 2. Par exemple, \\(p_5\\)=<code>[\"11111\"; \"1112\"; \"1121\"; \"1211\"; \"122\"; \"2111\"; \"212\"; \"221\"]</code></p> <ol> <li>Donner \\(p_1\\) et \\(p_2\\).</li> <li>Etablir une relation de r\u00e9currence liant les \u00e9l\u00e9ments de \\(p_{n}\\) \u00e0 ceux de \\(p_{n-1}\\) et \\(p_{n-2}\\)</li> <li>Ecrire une fonction OCaml permettant de r\u00e9pondre au probl\u00e8me.</li> </ol> </li> </ol>"},{"location":"mp2i/decomposition/#exercice-6-jamais-deux-consecutifs","title":"Exercice 6 : Jamais deux cons\u00e9cutifs !","text":"<p>Vous disposez d'un tableau de valeurs de \\(n\\) valeurs \\([h_0,\\dots,h_{n-1}]\\), on doit sommer les valeurs pr\u00e9sentes dans ce tableau mais sans jamais utiliser deux \u00e9l\u00e9ments cons\u00e9cutifs. Le but de l'exercice est d'\u00e9crire un programme permettant de trouver la somme maximale ainsi atteignable.</p> <p>Par exemple si le tableau contient les valeurs \\([7, 5, 3, 6]\\) alors la somme maximale est atteinte en prenant \\(7\\) et \\(6\\) et vaut \\(13\\).</p> <ol> <li> <p>R\u00e9soudre ce probl\u00e8me en utilisant la programmation dynamique</p> <p>Aide</p> <p>On pourra noter \\(S_i\\) la somme maximale sans utiliser d'\u00e9l\u00e9ments cons\u00e9cutifs \u00e0 partir de l'indice \\(i\\) et d\u00e9terminer la relation de recurrence liant les \\(S_i\\) (\\(0 \\leq i \u00a0&lt; n\\))</p> </li> <li> <p>Proposer une solution pour reconstruire la liste des valeurs  utilis\u00e9es dans la solution</p> </li> </ol>"},{"location":"mp2i/decomposition/#exercice-7-decoupe-de-valeur-maximale","title":"Exercice 7 : D\u00e9coupe de valeur maximale","text":"<p>Le probl\u00e8me de la recherche de la d\u00e9coupe de valeur maximale d'une barre a \u00e9t\u00e9 r\u00e9solu en cours. On rappelle ci-dessous la fonction C it\u00e9rative qui r\u00e9pond au probl\u00e8me :</p> <p>D\u00e9coupe de valeur maximale en C</p> <pre><code>int vmax_iter(int barre[], int n){\n    int vmax[n];\n    vmax[0] = 0;\n    vmax[1] = barre[1];\n    for (int i=2; i&lt;=n; i++){\n        vmax[i] = 0;\n        for (int j=1; j&lt;=i; j++){\n            if (vmax[j]+barre[i-j]&gt;vmax[i])\n            {vmax[i] = vmax[j]+barre[i-j];}}}\n    return vmax[n];}\n</code></pre> <ol> <li> <p>Faire fonctionner ce programme avec les donn\u00e9es suivantes et donner la valeur de la d\u00e9coupe maximale.</p> <p>Longueur12345678910111213141516Prix36812131619242829323337404243 </p> </li> <li> <p>Utiliser le tableau <code>vmax</code> des valeurs maximales des d\u00e9coupes d\u00e9j\u00e0 construit afin de d\u00e9terminer une d\u00e9coupe maximale.</p> <p>Aide</p> <p>On pourra remarquer que puisque <code>vmax[16] = vmax[7] + prix[9]</code> cela signifie qu'une d\u00e9coupe maximale peut-\u00eatre obtenue avec un morceau de taille 9 et la  d\u00e9coupe maximale d'une barre de taille 7. En r\u00e9p\u00e9tant ce processus de proche en proche on peut d\u00e9terminer la taille des morceaux d'une d\u00e9coupe de valeur maximale.</p> </li> </ol>"},{"location":"mp2i/decomposition/#exercice-8-tranche-de-somme-maximale-dans-un-tableau","title":"Exercice 8 : Tranche de somme maximale dans un tableau","text":"<p>Etant donn\u00e9 un tableau d'entiers (positif ou n\u00e9gatif) \\([e_0,\\dots,e_{n-1}]\\) on cherche dans ce tableau la tranche de plus grande somme. Par exemple pour le tableau \\([-2, 7, 1, -3, 5, -8, -2, 9]\\) c'est la tranche \\([7, 1, -3, 5]\\) qui a la plus grande somme et cette somme est 10. On n'autorise pas de tranche de longueur nulle et donc par exemple pour le tableau \\([-5, -2, -7]\\) c'est la tranche \\([-2]\\) qui a la plus grande somme.</p> <ol> <li> <p>Impl\u00e9menter  l'algorithme na\u00eff qui calcule la somme de toutes les tranches possibles c'est-\u00e0-dire les \\(\\displaystyle{S_{ij} = \\sum_{k=i}^{j} e_k}\\) et donne ensuite le maximum. Quel est la complexit\u00e9 de cet algorithme ?</p> <p>Aide</p> <p>On pourra d'abord \u00e9crire la fonction <code>somme_tranche</code> qui prend en argument deux entiers \\(i\\) et \\(j\\) et renvoie \\(S_{ij}\\)</p> </li> <li> <p>Proposer une version permettant de se ramener \u00e0 un algorithme ayant une complexit\u00e9 quadratique.</p> <p>Aide</p> <p>On pourra par exemple calculer les \\(S_{0i}\\) pour \\(0 \\leq i \\leq n-1\\) et exprimer les \\(S_{ij}\\) \u00e0 l'aide de ces sommes partielles.</p> </li> <li> <p>Un algorithme tr\u00e8s \u00e9l\u00e9gant et ayant une complexit\u00e9 en \\(\\mathcal{O}(n)\\) pour ce probl\u00e8me a \u00e9t\u00e9 propos\u00e9 par Jay Kadane. L'algorithme consiste \u00e0 parcourir le tableau en tenant \u00e0 jour la valeur de \\(T_j\\) qui est la tranche de somme maximale qui se termine \u00e0 l'index \\(j\\). La somme de la tranche maximale est alors obtenu en maintenant \u00e0 jour une variable contenant le maximum des \\(T_j\\) au fur et \u00e0 mesure de leurs calculs.</p> <ol> <li>Etablir la relation de r\u00e9currence liant \\(T_{j+1}\\) et \\(T_{j}\\)</li> <li>Impl\u00e9menter et tester ce nouvel algorithme</li> <li>Proposer une version qui donne aussi les index de d\u00e9but et de fin de la tranche de somme maximale.</li> </ol> </li> </ol>"},{"location":"mp2i/decomposition/#exercice-9-parenthesage-optimal-dun-produit-matriciel","title":"Exercice 9 : Parenth\u00e9sage optimal d'un produit matriciel","text":"<p>Etant donn\u00e9e \\(n\\) matrices \\(A_0,\\dots,A_{n-1}\\), on note \\((l_i,c_i)\\) les dimensions de \\(A_i\\) (\\(0 \\leqslant i &lt; n\\)) et \\(m(i,j)\\) le nombre minimal de multiplication pour effectuer le produit \\(A_i \\times \\dots \\times A_j\\) avec (\\(0\\leqslant i \\leqslant j &lt; n\\)), les relations suivantes ont \u00e9t\u00e9 \u00e9tablies en TD:  </p> <p>\\(\\left\\{ \\begin{array}{lll} m(i,j) &amp;=&amp; 0 \\text{ si } i=j \\\\ m(i,j) &amp;=&amp;\\min \\left\\{ m(i,k) + m(k,j) +l_{i}c_{k}c_{j}, i \\leqslant k &lt; j\\right\\}  \\\\ \\end{array} \\right.\\)</p> <p>En effet, si le produit ne contient qu'un terme alors aucune multiplication n'est n\u00e9cessaire. Sinon pour tout \\(i\\leqslant k &lt;j\\), on s\u00e9pare le produit \\(A_i\\times \\dots \\times A_j\\) en deux sous produits \\(A_i\\times \\dots \\times A_k\\) et \\(A_{k+1}\\times \\dots \\times A_j\\) , on calcule le nombre minimal de multiplications pour ces deux sous produits et on ajoute le nombre de multiplication de la multiplication finale. Et on prend le minimum des valeurs obtenues.</p> <p>On suppose que les dimensions des \\(n\\) matrices sont donn\u00e9es sous la forme d'un tableau de couple d'entiers en OCaml (type <code>int *int Array</code>)</p> <ol> <li> <p>Ecrire une fonction <code>int*int Array -&gt; int -&gt; int -&gt; int -&gt; int</code> qui prend en argument un tableau de dimensions ainsi que 3 indices <code>i,j</code> et <code>k</code> et renvoie le nombre de multiplications effectu\u00e9s lors du produit entre les matrices \\(A_i\\times \\dots \\times A_k\\) et \\(A_{k+1}\\times \\dots \\times A_j\\)</p> </li> <li> <p>Ecrire une fonction <code>get_min int list -&gt; int</code> qui renvoie le minimum des \u00e9l\u00e9ments d'une liste, on pourra traiter le cas de la liste vide avec un <code>failwith</code></p> </li> <li> <p>Ecrire une fonction <code>opti int*int Array</code> qui prend en argument le tableau de dimensions des matrices et renvoie le nombre minimal de multiplications \u00e0 effectuer.</p> <p>Aide</p> <p>On pourra utiliser <code>List.init</code> pour g\u00e9n\u00e9rer la liste du nombre de multiplications pour chaque valeur de \\(k\\) puis r\u00e9cup\u00e9rer le minimum \u00e0 l'aide de la fonction <code>get_min</code></p> </li> <li> <p>Tester votre fonction sur le tableau <code>[|(2, 4); (4, 6); (6, 5); (5, 4); (4, 2); (2, 8)|]</code> et v\u00e9rifier que le r\u00e9sultat est \\(196\\).</p> </li> <li> <p>On consid\u00e8re maintenant le tableau suivant repr\u00e9sentant les dimensions de 25 matrices : <pre><code>[|(15, 8); (8, 13); (13, 11); (11, 6); (6, 2); (2, 17); (17, 17); (17, 12);\n  (12, 3); (3, 10); (10, 7); (7, 10); (10, 11); (11, 8); (8, 7); (7, 8);\n  (8, 9); (9, 8); (8, 12); (12, 10); (10, 3); (3, 4); (4, 19); (19, 12);\n  (12, 1)|]\n</code></pre>     Obtient-on la r\u00e9ponse en un temps raisonnable avec la fonction de la question 3 ? Pourquoi ? Mettre en oeuvre la strat\u00e9gie de m\u00e9mo\u00efsation afin de palier le probl\u00e8me puis tester votre r\u00e9ponse   </p> </li> </ol>"},{"location":"mp2i/decomposition/#exercice-10-plus-longue-sous-chaine-palindrome","title":"Exercice 10 : Plus longue sous cha\u00eene palindrome","text":"<p>Etant donn\u00e9 une cha\u00eene de caract\u00e8res <code>str</code>, on chercher \u00e0 d\u00e9terminer une des plus longue sous cha\u00eene de \u00a0<code>str</code> qui soit un palindrome. Par exemple, pour le mot <code>banane</code>, une des plus longue sous cha\u00eene palindrome est <code>ana</code>, ce n'est pas la seule, <code>nan</code> est aussi une sous cha\u00eene palindrome de <code>banane</code> de longueur 3. Pour le mot <code>ananas</code> la plus longue sous cha\u00eene palindrome est <code>anana</code> et c'est la seule.</p> <p>On souhaite mettre en place une m\u00e9thode de programmation dynamique afin de r\u00e9soudre ce probl\u00e8me, pour cela on va construire progressivement un tableau de booleens <code>palindrome[i][j]</code> avec <code>0&lt;i&lt;n</code> et <code>i&lt;=j&lt;n</code> tel que <code>palindrome[i][j]</code> soit \u00e9gal \u00e0 <code>true</code> si et seulement si la sous cha\u00eene <code>str[i]...str[j]</code> est un palindrome (les deux extr\u00e9mit\u00e9s sont comprises)</p> <ol> <li>Avec quelles valeurs faut-il initialiser la diagonale principale de la matrice palindrome ?</li> <li>A quelles conditions <code>str[i]str[i+1]</code> est-elle une sous cha\u00eene palindrome ? En d\u00e9duire l'initialisation des <code>palindrome[i][i+1]</code> pour <code>0&lt;i&lt;n-1</code> </li> <li>En utilisant le fait que <code>str[i]...str[j]</code> est un palindrome ssi <code>str[i]==str[j]</code> et que <code>str[i-1]...str[j-1]</code> est un palindrome, d\u00e9termine une m\u00e9thode de remplissage du reste de la matrice <code>palindrome</code>.</li> <li>Mettre en oeuvre l'algorithme sous la forme d'une fonction de signature <code>void lps(char *str, int* deb, int *fin)</code> qui prend en entr\u00e9e une chaine de caract\u00e8re et deux pointeurs vers des entiers et modifie ces entiers de sorte que la sous chaine <code>str[deb]...str[fin]</code> soit l'une des plus longues sous chaines palindrome de la chaine <code>str</code>.</li> </ol>"},{"location":"mp2i/decomposition/#exercice-11-chemin-de-somme-maximale-dans-une-pyramide","title":"Exercice 11 : Chemin de somme maximale dans une pyramide","text":"<p>On reprend l'exemple de la recherche de la somme maximale d'un chemin dans une pyramide d\u00e9j\u00e0 vu en cours. L'exercice est \u00e0 traiter en OCaml et on suppose dans toute la suite que la pyramide est repr\u00e9sent\u00e9 par un tableau de tableau, par exemple la pyramide suivante :  est repr\u00e9sent\u00e9 par le tableau de tableau :</p> <pre><code>[|\n    [|5|];\n    [|3; 4|];\n    [|9; 2; 6|];\n    [|4; 6; 8; 4|];\n    [|3; 9; 2; 5; 7|]\n|]\n</code></pre> <ol> <li> <p>Ecrire la fonction <code>somme_max</code> qui prend en argument une pyramide <code>p</code> (sous la forme d'une liste de listes) ainsi que deux entiers <code>i</code> et <code>j</code> et renvoie la somme maximal d'un chemin dans la sous pyramide de sommet <code>p[i][j]</code>.</p> <p>Aide</p> <p>On rappelle les \u00e9quations de complexit\u00e9 (o\u00f9 <code>n</code> est le nombre de niveau de la pyramide):</p> <ul> <li><code>somme_max(p,i,j) = p[i][j]</code> si <code>i=n-1</code> (c'est le cas de base, on a atteint la base de la pyramide)</li> <li><code>somme_max(p,i,j) = p[i][j] + max(somme_max(p,i+1,j), somme_max(p,i+1,j+1))</code> sinon</li> </ul> </li> <li> <p>V\u00e9rifier que votre fonction renvoie bien 32 sur l'exemple de la pyramide donn\u00e9e en introduction.</p> </li> <li> <p>Sur des exemples de taille plus importantes, on doit m\u00e9mo\u00efser les r\u00e9sultats des sous pyramides afin de ne pas les recalculer. Le faire \u00e0 l'aide d'une table de hachage. Puis tester votre programme sur la pyramide ci-dessous :</p> Pyramide (\u00e0 copier pour tester) <pre><code>[|\n  [|5|];\n  [|4; 4|];\n  [|4; 7; 5|];\n  [|3; 1; 7; 1|];\n  [|8; 6; 5; 4; 6|];\n  [|4; 6; 7; 3; 3; 3|];\n  [|7; 8; 2; 5; 3; 8; 8|];\n  [|7; 2; 6; 7; 7; 5; 6; 6|];\n  [|9; 2; 1; 4; 9; 2; 9; 9; 2|];\n  [|6; 7; 1; 7; 6; 4; 9; 1; 9; 8|];\n  [|7; 7; 7; 7; 7; 4; 8; 9; 1; 1; 9|];\n  [|1; 8; 2; 3; 2; 5; 1; 1; 2; 8; 8; 3|];\n  [|7; 2; 3; 5; 7; 2; 8; 8; 7; 6; 8; 7; 4|];\n  [|1; 8; 6; 4; 5; 3; 6; 1; 1; 8; 9; 5; 3; 8|];\n  [|8; 7; 3; 9; 2; 3; 7; 5; 7; 5; 2; 2; 5; 2; 6|];\n  [|1; 8; 2; 5; 2; 3; 9; 1; 1; 5; 5; 2; 6; 7; 6; 2|];\n  [|8; 5; 5; 9; 4; 3; 4; 4; 8; 4; 7; 9; 2; 6; 6; 8; 2|];\n  [|5; 3; 7; 2; 7; 8; 3; 9; 7; 4; 6; 7; 7; 4; 5; 6; 7; 3|];\n  [|1; 3; 8; 9; 2; 7; 1; 8; 7; 8; 8; 2; 5; 7; 4; 9; 1; 8; 9|];\n  [|8; 4; 4; 3; 3; 5; 3; 4; 6; 7; 7; 5; 4; 3; 4; 8; 2; 5; 2; 2|];\n  [|7; 7; 8; 5; 9; 1; 7; 2; 3; 1; 3; 6; 5; 8; 5; 3; 5; 6; 5; 3; 1|];\n  [|9; 7; 9; 3; 6; 9; 3; 1; 8; 5; 5; 1; 5; 1; 7; 4; 4; 5; 7; 1; 6; 8|];\n  [|8; 7; 6; 4; 3; 1; 8; 2; 1; 1; 6; 1; 6; 5; 9; 3; 9; 6; 3; 4; 2; 6; 4|];\n  [|5; 2; 1; 2; 4; 1; 8; 1; 6; 1; 4; 4; 6; 5; 5; 8; 7; 6; 6; 3; 4; 3; 3; 8|];\n|]\n</code></pre> <p>V\u00e9rifier votre r\u00e9ponse : </p> <p> </p> </li> <li> <p>Ce probl\u00e8me est l'un du site du Project Euler, vous y trouverez donc des jeux de donn\u00e9es de taille plus importantes pour tester votre programme : voir le probl\u00e8me 18 ainsi que le probl\u00e8me 67</p> </li> </ol>"},{"location":"mp2i/decomposition/#exercice-12-probleme-du-sac-a-dos","title":"Exercice 12 : Probl\u00e8me du sac \u00e0 dos","text":"<p>On dispose d\u2019un sac \u00e0 dos pouvant contenir un poids maximal \\(P\\) et de \\(n\\) objets ayant chacun un poids \\((p_i)_{1\\leq i \\leq n}\\) et une valeur \\((v_i)_{1\\leq i \\leq n}\\). Le probl\u00e8me du sac \u00e0 dos consiste \u00e0 remplir ce sac en maximisant la valeur des objets qu\u2019il contient tout en respectant la contrainte de poids total du sac qui doit rest\u00e9 inf\u00e9rieur \u00e0 \\(P\\). Dans toute la suite, on consid\u00e8re que les poids et les valeurs sont des entiers. On veut r\u00e9soudre ce probl\u00e8me par programmation dynamique.</p> <ol> <li> <p>Etablir une relation de r\u00e9currence entre diff\u00e9rentes instances du probl\u00e8me.</p> <p>Aide</p> <p>On pourra noter  \\(S(p,k)\\) la valeur maximale atteignable pour un sac de poids maximal \\(p\\) avec les objets \\((p_i,v_i)_{1 \\leq i \\leq k}\\) et chercher une relation de r\u00e9currence liant \\(S(P,k)\\) \u00e0  d'autres instances du probl\u00e8mes en distinguant deux cas :</p> <ul> <li>\\(p_k \\leq p\\) et donc on peut (ou pas) prendre l'objet d'indice \\(k\\)</li> <li>\\(p_k &gt; p\\) et donc l'objet d'indice \\(k\\) ne rentre pas dans le sac</li> </ul> </li> <li> <p>Ecrire une fonction  permettant de d\u00e9terminer la valeur maximale du sac.</p> </li> <li> <p>R\u00e9soudre le probl\u00e8me avec un sac de poids maximal 670 et la liste de 24 objets suivantes :</p> <p><pre><code>78,3897\n38,1953\n79,3871\n91,4598\n14,602\n56,2730\n87,4283\n55,2668\n77,3895\n69,3512\n87,4318\n89,4355\n73,3660\n29,1574\n53,2548\n5,142\n8,430\n6,398\n38,1776\n82,4073\n88,4507\n57,2932\n10,599\n78,3802\n</code></pre> Tester votre r\u00e9ponse ici :   </p> </li> <li> <p>D\u00e9terminer un remplissage du sac r\u00e9alisant la valeur maximale. Tester votre r\u00e9ponse ici en donnant par ordre croissant les num\u00e9ros des objets utilis\u00e9s s\u00e9par\u00e9 par des virgules. Par exemple si les objets \u00e0 prendre portent les num\u00e9ros 2, 7 et 20 vous devez taper <code>2,7,20</code> :   </p> </li> </ol> <p>Attention : les objets sont num\u00e9rot\u00e9s \u00e0 partir de 1.</p>"},{"location":"mp2i/decomposition/#exercice-13-distance-dedition","title":"Exercice 13 : Distance d'\u00e9dition","text":"<p>La distance d'\u00e9dition (ou distance de Levenshtein) entre deux cha\u00eenes de caract\u00e8res \\(M\\) et \\(N\\) est le nombre de caract\u00e8res qu'il faut supprimer, ins\u00e9rer ou remplacer pour passer d'une cha\u00eene \u00e0 l'autre, on la note \\(D(M,N)\\).</p> <p>Par exemple, la distance d'\u00e9dition entre \"TEST\" et \"VESTE\" est de deux (une insertion et une substitution). On note \\(l_m\\) la longueur de \\(M\\) et \\(l_n\\) celle de \\(M\\), \\(M_i\\) les \\(i\\) (\\(0 \\leq i &lt; l_M\\)) premiers caract\u00e8res  de la cha\u00eene \\(M\\) et \\(N_j\\) les \\(j\\) (\\(0 \\leq j &lt; l_N\\)) premiers caract\u00e8res de la cha\u00eene \\(N\\) et \\(d(i,j) = D(M_i,N_j)\\)</p> <ol> <li>Donner les cas de base suivantes :  \\(d(i,0)\\) et \\(d(0,j)\\)</li> <li>Exprimer \\(d(i,j)\\) en fonction de \\(d(i,j-1)\\), \\(d(i-1,j)\\) et \\(d(i-1,j-1)\\), en distinguant le cas o\u00f9 le \\(i\\)\u00e8me caract\u00e8re de \\(M\\) con\u00efncide avec le \\(j\\)i\u00e8me de \\(N\\) ou non.</li> <li>Ecrire une fonction permettant de r\u00e9pondre au probl\u00e8me</li> <li>A l'aide de la matrice \\(d(i,j)\\) (\\(0 \\leq i &lt; l_M\\), (\\(0 \\leq j &lt; l_N\\))) reconstruire les op\u00e9rations permettant de passer de \\(M\\) \u00e0 \\(N\\).</li> </ol>"},{"location":"mp2i/decomposition/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/discipline/","title":"C2 Discipline de programmation","text":"<p>\"Program testing can be used to show the presence of bugs, but never to show their absence! \"E. Dijkstra(in Notes on structured programming, 1970)</p>"},{"location":"mp2i/discipline/#cours","title":"Cours","text":"<p>Support de cours chapitre 2 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/discipline/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD2 </p>"},{"location":"mp2i/discipline/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"mp2i/discipline/#exercice-1-recherche-dun-element-dans-un-tableau","title":"Exercice 1 : Recherche d'un \u00e9l\u00e9ment dans un tableau","text":"<p>Voici le code d'une fonction <code>recherche</code> en C :</p> <pre><code>    int indice(int tab[], int taille, int elt)\n    {\n        /* Renvoie l'indice de la premi\u00e8re occurrence de elt dans tab\n         ou -1 si elt n'est pas dans tab  */\n        for (int i = 0; i &lt; taille; i++)\n        {\n            if (tab[i] == elt)\n            {\n                return i;\n            }\n            else\n            {\n                return -1;\n            }\n        }\n</code></pre> <ol> <li> <p>Les tests propos\u00e9s pour cette fonction sont de v\u00e9rifier qu'elle renvoie <code>-1</code> lorsqu'on cherche <code>12</code> dans le tableau <code>{2, 5, 6, 1}</code> et <code>0</code> lorsqu'on cherche <code>2</code> dans ce tableau. Cette fonction valide-t-elle ces tests ?</p> </li> <li> <p>Par des tests appropri\u00e9s, montrer que cette fonction n'est pas conforme \u00e0 sa sp\u00e9cification.</p> </li> <li> <p>Corriger cette fonction</p> </li> </ol>"},{"location":"mp2i/discipline/#exercice-2-validation-de-date","title":"Exercice 2 : Validation de date","text":"<ol> <li>Ecrire une fonction bissextile qui prend en argument un entier strictement positif <code>annee</code> et renvoie <code>true</code> si <code>annee</code> est une ann\u00e9e bissextile.</li> <li>Ecrire une fonction <code>verifie_date</code> prenant en argument trois entiers (jour, mois et annee)  et renvoyant <code>true</code> si <code>jour/mois/annee</code> est une date valide.</li> <li>Proposer un jeu de tests pour cette fonction.</li> </ol>"},{"location":"mp2i/discipline/#exercice-3-somme-des-elements-dun-tableau","title":"Exercice 3 : Somme des \u00e9l\u00e9ments d'un tableau","text":"<p>Afin de faire la somme des \u00e9l\u00e9ments d'un tableau un \u00e9l\u00e8ve propose le code suivant qui selon lui permet de gagner du temps car on somme les \u00e9l\u00e9ments deux par deux : <pre><code>int somme_deux(int tab[], int size)\n{\n    /* renvoie la somme des \u00e9l\u00e9ments de tab*/\n    int s = 0;\n    for (int i=0; i&lt;n-1;i+=2)\n    {\n        s = s + tab[i] + tab[i+1];\n    }\n    return s;\n}\n</code></pre></p> <ol> <li>Montrer par un test appropri\u00e9 que cette fonction n'est pas conforme \u00e0 sa sp\u00e9cification.</li> <li>Ecrire une version correcte de cette fonction.</li> </ol>"},{"location":"mp2i/discipline/#exercice-4-tri-a-bulles","title":"Exercice 4 : Tri \u00e0 bulles","text":"<p>Le tri \u00e0 bulles est un algorithme de tri qui consiste \u00e0 parcourir de fa\u00e7on r\u00e9p\u00e9titive un tableau, si deux \u00e9l\u00e9ments ne sont pas de bon ordre, alors on inverse leur position. A la fin du premier parcours, le plus grand \u00e9l\u00e9ment se trouve forc\u00e9ment en derni\u00e8re position. Le parcours suivant s'arr\u00eate donc \u00e0 l'avant-dernier \u00e9l\u00e9ment, et ainsi de suite. Par exemple, sur le tableau <code>{12, 9, 17, 11, 3}</code> les \u00e9tapes du tri seront :</p> <ul> <li>apr\u00e8s premier parcours : <code>{9, 12, 11, 3, 17}</code> </li> <li>apr\u00e8s second parcours : <code>{9, 11, 3, 12, 17}</code></li> <li>apr\u00e8s troisi\u00e8me parcours : <code>{9, 3, 11, 12, 17}</code></li> <li>apr\u00e8s quatri\u00e8me parcours : <code>{3, 9, 11, 12, 17}</code></li> </ul> <p>Le but de l'exercice est d'impl\u00e9menter cet algorithme</p> <ol> <li>Ecrire une fonction de signature <code>void echange(int tab[], int i, int j, int taille)</code> qui \u00e9change les \u00e9l\u00e9ments d'indice <code>i</code> et <code>j</code> dans <code>tab</code>. On v\u00e9rifiera les pr\u00e9conditions suivantes : <code>0 &lt;= i &lt; taille</code> et <code>0 &lt;= j &lt; taille</code>.</li> <li>Ecrire une fonction de signature <code>void parcours(int tab[], int limite, int taille)</code> qui parcours <code>tab</code> jusqu'\u00e0 l'indice <code>limite</code> en \u00e9changeant l'\u00e9l\u00e9ment avec son voisin de droite s'il lui est inf\u00e9rieure. Donner les pr\u00e9conditions.</li> <li>Ecrire une fonction <code>void tri_bulles(int tab, int size)</code> qui trie en place le tableau <code>tab</code>. Propose des tests pour valider le comportement de cette fonction.</li> </ol>"},{"location":"mp2i/discipline/#exercice-5-nombres-narcissiques","title":"Exercice 5 : Nombres narcissiques","text":"<p>Un nombre \\(a\\) ayant \\(p\\) chiffres en base 10, not\u00e9 \\(a = \\overline{a_{p-1}\\dots a_1a_0}^{10}\\) est dit narcissique lorsqu'il est \u00e9gal \u00e0 la somme des puissance \\(p\\)i\u00e8mes de ses chiffres, c'est \u00e0 dire lorsque \\(a = a_{p-1}^p + \\dots + a_1^p + a_0^p\\). Exemples :</p> <ul> <li>\\(153\\) est narcissique (\\(p=3\\)) car, \\(1^3 + 5^3 + 3^3 = 153\\)</li> <li>\\(255\\) n'est pas narcissique (\\(p=3\\))  car, \\(2^3 + 5^3 + 5^5 = 258\\)</li> <li>\\(1634\\) est narcissique (\\(p=4\\)) car, \\(1^4 + 6^4 + 3^4 + 4^4 = 1634\\)</li> <li>\\(3375\\) n'est pas narcissique (\\(p=4\\)), car \\(3^4 + 3^4 + 7^4 + 5^4 = 3188\\)</li> </ul> <p>Le but de l'exercice est de trouver le plus grand nombre narcissique inf\u00e9rieur \u00e0 un million.</p> <ol> <li> <p>Ecrire une fonction prenant en entr\u00e9e un entier \\(n\\) et un entier \\(p\\) et renvoyant \\(n^p\\). On se limite au cas \\(p&gt;0\\) et \\(n\\geqslant 0\\) et on v\u00e9rifiera ces pr\u00e9conditions \u00e0 l'aide d'instructions. Ecrire dans le code en commentaire une sp\u00e9cification pr\u00e9cise de cette fonction et proposer un jeu de tests sous la forme d'instructions <code>assert</code>.</p> </li> <li> <p>Ecrire une fonction <code>nb_chiffres</code> prenant en entr\u00e9e un entier \\(n \\geqslant 0\\) et renvoyant son nombre de chiffres. Par exemple <code>nb_chiffres(1634)</code> doit renvoyer 4.</p> <p>Aide</p> <p>Voir le cours</p> </li> <li> <p>Ecrire une fonction <code>est_narcissique</code> qui prend en argument un entier <code>n</code> et qui renvoie <code>true</code> si et seulement si <code>n</code> est un nombre narcissique.</p> <p>Aide</p> <p>On rappelle que si \\(a = \\overline{a_{p-1}\\dots a_1a_0}^{10}\\), alors :</p> <ul> <li>\\(a_0\\) est le reste  dans la division euclidienne de \\(a\\) par 10,</li> <li>le quotient dans la division euclidienne de \\(a\\) par 10 est \\(\\overline{a_{p-1}\\dots a_1}^{10}\\).</li> </ul> </li> <li> <p>Tester cette fonction en \u00e9crivant les instructions <code>assert</code> permettant de v\u00e9rifier les exemples de nombre narcissiques ou non donn\u00e9s en d\u00e9but d'exercice.</p> </li> <li> <p>Ecrire une fonction <code>narcissique_seuil</code> qui prend en entr\u00e9e un entier <code>n</code> et renvoie le plus grand nombre narcissique inf\u00e9rieur \u00e0 cet entier <code>n</code>. Par exemple <code>narcissique_seuil(200)</code> doit renvoyer <code>153</code>. Quel est le plus grand nombre narcissique inf\u00e9rieur \u00e0 un million ? Tester votre r\u00e9ponse   </p> </li> <li> <p>Ecrire une fonction <code>compte_narcissique</code> qui prend en entr\u00e9e un entier <code>n</code> et renvoie le nombre de nombres narcissiques inf\u00e9rieurs ou \u00e9gaux \u00e0 <code>n</code>. Combien de nombre narcissiques sont inf\u00e9rieurs \u00e0 un million ? Tester votre r\u00e9ponse   </p> </li> </ol>"},{"location":"mp2i/discipline/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/forcebrute/","title":"C13 Force brute, retour sur trace","text":"<p>\"When in doubt, use brute force.\"K. Thomson</p>"},{"location":"mp2i/forcebrute/#cours","title":"Cours","text":"<p>Support de cours chapitre 13 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/forcebrute/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD13 </p>"},{"location":"mp2i/forcebrute/#travaux-pratiques","title":"Travaux pratiques","text":"<p>Note</p> <p>Dans ce chapitre, on peut r\u00e9soudre les probl\u00e8mes propos\u00e9s dans le langage de son choix.</p>"},{"location":"mp2i/forcebrute/#exercice-1-probleme-du-sac-a-dos-par-force-brute","title":"Exercice 1 : Probl\u00e8me du sac \u00e0 dos par force brute","text":"<p>On dispose d\u2019un sac \u00e0 dos et d\u2019une liste objet ayant chacun un poids et une valeur. Le probl\u00e8me du sac \u00e0 dos consiste \u00e0 remplir ce sac en maximisant la valeur des objets qu\u2019il contient tout en respectant une contrainte sur le poids du sac. Dans l'exemple repr\u00e9sent\u00e9 ci-dessus (credit : wikipedia)</p> <p></p> <p>Le poids maximal du sac est de 15kg, la combinaison d'objet ne d\u00e9passant pas ce poids et de valeur maximale est celle constitu\u00e9e de tous les livres sauf le vert. </p> <p>Le but de l'exercice est de tester sur cet exemple :</p> <ul> <li>l'approche par force brute,</li> <li>la strat\u00e9gie gloutonne</li> </ul> <p>Nous utiliserons un sac de poids maximal 8kg avec les objets suivants:  </p> <ol> <li>Cr\u00e9er un type adapt\u00e9 permettant de repr\u00e9senter un objet. Dans la suite, on suppose que les \\(n\\) objets sont rang\u00e9s dans un tableau de taille \\(n\\).</li> <li>On d\u00e9cide de repr\u00e9senter un choix d'objets par un tableau  \\(c\\) de \\(n\\) bool\u00e9ens, tel que \\(c_i\\) vaut <code>true</code> si l'objet \\(i\\) fait partie du choix et <code>false</code> dans le cas contraire. Par exemple si \\(n=5\\) la combinaison <code>{false, false, true, false, true}</code> signifie qu'on a pris les objets 2 et 4. Ecrire une fonction <code>poids_valeur</code> qui prend en entr\u00e9e un tableau d'objets et un tableau de bool\u00e9ens repr\u00e9sentant un choix d'objets et qui renvoie le poids et la valeur de ce choix.</li> <li>Avec \\(n\\) objets, combien de combinaisons faudra-t-il tester ? Justifier</li> <li> <p>Ecrire une fonction qui r\u00e9soud le probl\u00e8me par force brute, v\u00e9rifier votre r\u00e9ponse   </p> <p>Aide</p> <p>Pour \u00e9num\u00e9rer les choix possibles on peut  utiliser :</p> <ul> <li>un compteur binaire</li> <li>les codes de gray</li> </ul> </li> <li> <p>R\u00e9soudre le probl\u00e8me avec un sac de poids maximal 67 et la liste de 24 objets suivantes : <pre><code>7.8,3897\n3.8,1953\n7.9,3871\n9.1,4598\n1.4,602\n5.6,2730\n8.7,4283\n5.5,2668\n7.7,3895\n6.9,3512\n8.7,4318\n8.9,4355\n7.3,3660\n2.9,1574\n5.3,2548\n0.5,142\n0.8,430\n0.6,398\n3.8,1776\n8.2,4073\n8.8,4507\n5.7,2932\n1.0,599\n7.8,3802\n</code></pre></p> <p>Tester votre r\u00e9ponse :   </p> <p>Note</p> <p>Vous pouvez cr\u00e9er un fichier texte repr\u00e9sentant la liste des objets et le faire lire par votre programme, c'est une excellente occasion de revoir la lecture de fichier !</p> </li> <li> <p>Mesurer le temps d'ex\u00e9cution de votre programme avec la commande <code>time</code> des syt\u00e8mes Linux (ou directement avec le module <code>time.h</code> du C ou <code>Sys.time</code> en OCaml)</p> </li> <li> <p>Pr\u00e9dire le temps d'ex\u00e9cution pour un probl\u00e8me avec 50 objets r\u00e9solu par force brute.</p> </li> <li> <p>Pour ce probl\u00e8me, la strat\u00e9gie gloutonne consiste \u00e0 classer les objets un utilisant un crit\u00e8re pertinent, par exemple le rapport <code>valeur/poids</code> de l'objet puis \u00e0 parcourir la liste ordonn\u00e9e des objets et \u00e0 les prendre s'ils rentrent encore dans le sac. Mettre en oeuvre cette strat\u00e9gie et comparer les r\u00e9sultats obtenus avec ceux de la force brute, que peut-on en conclure sur la strat\u00e9gie gloutonne sur cet exemple ?</p> </li> </ol>"},{"location":"mp2i/forcebrute/#exercice-2-strategie-gloutonne-pour-le-rendu-de-monnaie","title":"Exercice 2 : Strat\u00e9gie gloutonne pour le rendu de monnaie","text":"<p>On dispose d'un syst\u00e8me mon\u00e9taire c'est-\u00e0-dire d'un ensemble de valeurs possibles pour les pi\u00e8ces et les billets. Le probl\u00e8me du rendu de monnaie consiste \u00e0 d\u00e9terminer le nombre minimal de pi\u00e8ces \u00e0 utiliser pour former une somme donn\u00e9e. Par exemples :</p> <ul> <li>Si on se place dans le syst\u00e8me mon\u00e9taire des euros c'est \u00e0 dire \\(\\{500, 200, 100, 50, 20, 10, 5, 2, 1\\}\\), alors<ul> <li>pour former 17 euros le nombre minimal de pi\u00e8ces et de billets est  \\(3\\) (\\(10+5+2\\))</li> <li>pour 38 euros, c'est \\(5\\) \\((20+10+5+2+1)\\)</li> </ul> </li> <li>Si on place dans le syst\u00e8me mon\u00e9taire \\(\\{5, 4, 3, 1\\}\\) alors<ul> <li>pour former 19 le nombre minimal est de \\(4\\) (\\(5+5+5+4\\))</li> <li>pour former 7 le nombre minimal est de \\(2\\) (\\(4+3\\))</li> </ul> </li> </ul> <p>Le but de l'exercice est d'impl\u00e9menter et de tester une strat\u00e9gie gloutonne sur ce probl\u00e8me.</p> <ol> <li> <p>Impl\u00e9menter la strat\u00e9gie gloutonne qui consiste \u00e0 rendre la pi\u00e8ce de plus forte valeur possible \u00e0 chaque \u00e9tape</p> </li> <li> <p>Tester sur les exemples donn\u00e9s en introduction, que peut-on en d\u00e9duire ?</p> </li> </ol> <p>Note</p> <ul> <li>On montre que si le syst\u00e8me mon\u00e9taire poss\u00e8de certaines propri\u00e9t\u00e9s alors l'algorithme glouton est optimal (le syst\u00e8me mon\u00e9taire est alors dit canonique), c'est le cas des euros (voir la page wikipedia) pour plus de d\u00e9tails.</li> <li>De m\u00eame que pour le probl\u00e8me du sac \u00e0 dos, la programmation dynamique fournira une solution efficace \u00e0 ce probl\u00e8me.</li> </ul>"},{"location":"mp2i/forcebrute/#exercice-3-retour-sur-le-probleme-des-n-reines","title":"Exercice 3 : Retour sur le probl\u00e8me des n reines","text":"<p>On rappelle (voir cours) que le probl\u00e8me des \\(n\\) reines consiste \u00e0 placer \\(n\\) reines sur un \u00e9chiquier de taille \\(n \\times n\\) sans qu'aucune reine n'en menace une autre (c'est-\u00e0-dire que deux reines ne se trouvent pas sur la m\u00eame ligne, colonne ou diagonale.)</p> <p>Comme chaque reine est n\u00e9cessairement sur une colonne diff\u00e9rente, on repr\u00e9sentera une position par un tableau <code>tab</code> de taille \\(n\\) tel que <code>tab[i]</code> contient le num\u00e9ro de colonne de la reine <code>i</code> (num\u00e9rot\u00e9 \u00e0 partir de 0) ou <code>-1</code> si la reine n'est pas encore plac\u00e9e. Par exemple, pour \\(n=8\\), l'\u00e9chiquier ci-dessous (credit wikipedia), correspond au tableau : <code>[3, 0, 4, 7, 2, 6, 2, 5]</code></p> <p></p> <ol> <li> <p>R\u00e9solution par retour sur trace en OCaml Dans toute la suite on supposera d\u00e9finie une variable globale <code>size</code> contenant la taille \\(n\\) de l'\u00e9chiquier.</p> <p>a. Ecrire une fonction <code>menace</code> <code>int array -&gt; int -&gt; bool</code>, qui prend en argument un tableau de taille <code>size</code> et un indice <code>idx</code> et qui renvoie un bool\u00e9n indiquant si la reine situ\u00e9e en colonne <code>idx</code> est en prise avec une des reines situ\u00e9es aux colonnes <code>0 ... idx-1</code>. </p> <p>b. Ecrire une fonction qui calcule le nombre de solutions au probl\u00e8mes des <code>n</code> reines.</p> <p>Aide</p> <p>On pourra \u00e9crire une fonction qui renvoie <code>unit</code> et qui incr\u00e9mente un compteur <code>nb_sol</code> d\u00e9fini en variable globale dans le programme <code>let nb_sol = ref 0;;</code></p> <p>c. D\u00e9terminer le nombre de solutions dans le cas \\(n=14\\) V\u00e9rifier votre r\u00e9ponse :   </p> </li> <li> <p>Par force brute On peut aussi utiliser la force brute pour r\u00e9soudre ce probl\u00e8me, au lieu de valider des solutions partielles de fa\u00e7on incr\u00e9mentale comme dans le retour sur trace, on g\u00e9n\u00e8re les solutions compl\u00e8tes puis on les teste une \u00e0 une. Une solution est forc\u00e9ment une permutation de \\(0, \\dots n-1\\) car toutes les reines sont sur des lignes diff\u00e9rentes et on peut se contenter de v\u00e9rifier les diagonales pour valider une solution car par construction les reines sont d\u00e9j\u00e0 sur des lignes et colonnes diff\u00e9rentes.</p> <p>a. Ecrire une fonction <code>int -&gt; int list list</code> en Ocaml qui prend en entr\u00e9e un entier <code>n</code> et renvoie la liste des permutations possibles de \\(\\{0,...,n-1\\}\\).</p> <p>b. En d\u00e9duire une r\u00e9solution par force brute.</p> </li> </ol>"},{"location":"mp2i/forcebrute/#exercice-4-resolution-dun-sudoku-par-retour-sur-trace","title":"Exercice 4 : R\u00e9solution d'un sudoku par retour sur trace","text":"<p>Le sudoku est un c\u00e9l\u00e8bre jeu de r\u00e9flexion dans lequel on doit placer les chiffres de 1 \u00e0 9 dans une grille de fa\u00e7on \u00e0 ce qu'une ligne, une colonne ou une sous grille de dimension 3x3 contienne un unique exemplaire de chacun des chiffres.</p> <p>Voici un exemple de sudoku, ou les sous grilles (de taille 3x3) appel\u00e9es blocs sont d\u00e9limit\u00e9es par des traits en gras (credits : Wikipedia,Tim Stellmach): </p> <p>La solution est : </p> <p>On repr\u00e9sente une grille de sudoku en lin\u00e9arisant la grille de 9x9 dans un tableau \u00e0 une seule dimension de 81 cases. On rappelle que la case d'indice \\((i,j)\\) dans la grille 9x9 correspond \u00e0 la case \\(9 \\times i+j\\) dans le tableau lin\u00e9aris\u00e9. Et que la case d'indice \\(k\\) dans le tableau lin\u00e9aris\u00e9 correspond \u00e0 la case d'indice \\((q,r)\\) ou \\(q\\) et \\(r\\) sont le quotient et le reste dans la division euclidienne de \\(k\\) par 9.</p> <p>Le but de l'exercice est d'\u00e9crire un programme en C permettant de r\u00e9soudre un sudoku par backtracking</p> <ol> <li> <p>Ecrire une fonction <code>meme_ligne</code> qui prend en argument un num\u00e9ro de case <code>n</code> (entre 0 et 80) et renvoie un tableau contenant les num\u00e9ros des 8 autres cases situ\u00e9s sur la m\u00eame ligne que la case <code>n</code>. Par exemple, si <code>n=42</code> alors la fonction renvoie le tableau <code>[36, 37, 38, 39, 40, 41, 43, 44]</code></p> </li> <li> <p>Ecrire une fonction <code>meme_colonne</code> qui prend en argument un num\u00e9ro de case <code>n</code> (entre 0 et 80) et renvoie un tableau contenant les num\u00e9ros des 8 autres cases situ\u00e9s sur la m\u00eame colonne que la case <code>n</code>. Par exemple, si <code>n=42</code> alors la fonction renvoie le tableau <code>[6; 15; 24; 33; 51; 60; 69; 78]</code></p> </li> <li> <p>Ecrire une fonction <code>meme_bloc</code> qui prend en argument un num\u00e9ro de case <code>n</code> (entre 0 et 80) et renvoie un tableau contenant les num\u00e9ros des 8 autres cases situ\u00e9s dans le m\u00eame bloc que <code>n</code>. Par exemple, si <code>n=42</code> alors la fonction renvoie le tableau <code>[33; 34; 35; 43; 44; 51; 52; 53]</code></p> </li> <li> <p>Ecrire une fonction <code>verifie</code> qui prend un argument un num\u00e9ro de case <code>n</code> contenant un chiffre <code>c</code> et qui renvoie <code>false</code> si <code>c</code> est aussi la valeur d'une case situ\u00e9e sur la m\u00eame ligne, colonne ou bloc que la case <code>n</code>. Cette fonction permet donc de valider une solution partielle.</p> </li> <li> <p>Ecrire une fonction <code>resoud</code> qui par backtracking, permet de r\u00e9soudre un sudoku.</p> </li> <li> <p>Tester votre programme sur le sudoku donn\u00e9 en exemple</p> </li> <li> <p>Le site de kaggle propose un fichier contenant un million de grilles de sudoku (le fichier fait 71 Mb) avec la solution. Sur chaque ligne du fichier, la grille est donn\u00e9e sous la forme d'une chaine de caract\u00e8res 81 caract\u00e8res o\u00f9 <code>0</code> indique une case vide puis on trouve (s\u00e9par\u00e9 par une virgule) la solution de la grille. Un court extrait de ce fichier contenant seulement les 1000 premi\u00e8res grilles est disponible ci-dessous :</p> </li> </ol> <p>1000 grilles </p> <p>Ecrire un programme permettant de lire une grille de sudoku \u00e0 ce format. Tester votre programme sur ces 1000 grilles.</p>"},{"location":"mp2i/forcebrute/#exercice-5-le-probleme-du-cavalier","title":"Exercice 5 : Le probl\u00e8me du cavalier","text":"<p>Le probl\u00e8me du cavalier consiste \u00e0 partir d'une position de d\u00e9part donn\u00e9e \u00e0 faire parcourir toutes les cases de l'\u00e9chiquier \u00e0 un cavalier, sans jamais repasser deux fois par la m\u00eame case.</p> <p>Dans le cas \\(n=8\\), voici un exemple de solution en d\u00e9marrant du coin sup\u00e9rieure gauche (marqu\u00e9 1) puis en se d\u00e9pla\u00e7ant vers la case marqu\u00e9e 2 puis 3, puis 4, ... <pre><code> 1 12  9  6  3 14 17 20 \n10  7  2 13 18 21  4 15 \n31 28 11  8  5 16 19 22 \n64 25 32 29 36 23 48 45 \n33 30 27 24 49 46 37 58 \n26 63 52 35 40 57 44 47 \n53 34 61 50 55 42 59 38 \n62 51 54 41 60 39 56 43\n</code></pre></p> <p>R\u00e9soudre ce probl\u00e8me par backtracking en langage C.</p> <p>Aide</p> <p>En notant <code>SIZE</code> la taille de l'\u00e9chiquier, on pourra repr\u00e9senter une solution comme celle ci-dessus par le type structur\u00e9 </p> <pre><code>    struct solution\n    {\n        int lig_start;\n        int col_start;\n        int path[SIZE][SIZE];\n        int pathlen;\n    };\n    typedef struct solution solution;\n</code></pre> <p>La solution est partielle tant que <code>pathlen</code> est plus petit que <code>SIZE*SIZE</code> et on atteint une impossibilit\u00e9 lorsque toutes les destinations possibles du cavalier ont d\u00e9j\u00e0 \u00e9t\u00e9 travers\u00e9s ce qui peut-\u00eatre v\u00e9rifi\u00e9 en examinant le tableau <code>path</code> en effet, <code>path[i][j]</code> contient un entier \\(k &gt;0\\) si au \\(k\\)-i\u00e8me mouvement le cavalier a atterit sur la case de coordonn\u00e9es <code>(i,j)</code> sinon <code>path[i][j]=0</code> (la case n'a pas encore \u00e9t\u00e9 visit\u00e9).</p>"},{"location":"mp2i/forcebrute/#exercice-6-cryptarithme","title":"Exercice 6 : Cryptarithme","text":"<p>Un cryptarithme est un casse-t\u00eate math\u00e9matique dans lequel on doit attribuer un chiffre \u00e0 chaque lettre de fa\u00e7on \u00e0 rendre correcte une op\u00e9ration arithm\u00e9tique, l'un des plus connus  (Strand magazine 2024) est :</p> \\[\\begin{matrix}      &amp;   &amp; \\text{S} &amp; \\text{E} &amp; \\text{N} &amp; \\text{D} \\\\    + &amp;   &amp; \\text{M} &amp; \\text{O} &amp; \\text{R} &amp; \\text{E} \\\\  \\hline    = &amp; \\text{M} &amp; \\text{O} &amp; \\text{N} &amp; \\text{E} &amp; \\text{Y} \\\\ \\end{matrix}\\] <p>Dans cette exercice afin de simplifier, on consid\u00e8re que l'op\u00e9ration est une addition de deux termes et on donnera un cryptarithme sous la forme de trois chaines de caract\u00e8res : le premier terme, le second terme et le r\u00e9sultat. Le cryptarithme ci-dessus est donc <code>\"SEND\",\"MORE\",\"MONEY\"</code>. D'autres exemples plus compliqu\u00e9s peuvent faire intervenir plusieurs additions ou d'autres op\u00e9rations.</p> <p>Ecrire un programme permettant de r\u00e9soudre un cryptarithme par retour sur trace.</p> <p>Aide</p> <p>Comme toujours pour une r\u00e9solution par backtracking on devra commencer par \u00e9crire une fonction permettant de valider une solution partielle. c'est-\u00e0-dire une solution dans laquelle certaines lettres ont d\u00e9j\u00e0 des valeurs. On prendra garde \u00e0 traiter le cas d'une retenue \u00e9ventuelle. Ainsi pour chaque \"colonne\" de l'addition lorsque les lettres pr\u00e9sentes sur la colonne ont d\u00e9j\u00e0 une valeur en notant \\(c_1\\) le chiffre de la premi\u00e8re op\u00e9rande, \\(c_2\\) le chiffre de la seconde op\u00e9rante, \\(c_r\\) la retenue \u00e9ventuelle (initialis\u00e9e \u00e0 0) et \\(r\\) le chiffre du r\u00e9sultat on doit v\u00e9rifier que \\((c_1 + c_2 + c_r) \\mod 10 = r\\)</p>"},{"location":"mp2i/forcebrute/#exercice-7-somme-maximale-dans-une-matrice-carree","title":"Exercice 7 : Somme maximale dans une matrice carr\u00e9e","text":"<p>On consid\u00e8re une matrice carr\u00e9e de taille \\(n\\times n\\), \\(M_{i,j}\\) (\\(0 \\leqslant i \\leqslant n-1\\) et \\(0 \\leqslant j \\leqslant n-1\\)) \u00e0 coefficients entiers et on s'int\u00e9resse aux chemins depuis la premi\u00e8re valeur en haut \u00e0 gauche (\\(M_{0,0}\\)) jusqu'\u00e0 la derni\u00e8re en bas et \u00e0 droite (\\(M_{n-1,n-1}\\)) qui n'utilisent que les d\u00e9placements vers la droite (\\(\\rightarrow\\)) ou vers le bas (\\(\\downarrow\\)). Et on cherche \u00e0 d\u00e9terminer la somme obtenue si on se d\u00e9place avec  une strat\u00e9gie gloutonne. Par exemple, dans la matrice suivante :</p> <p>\\(\\left(\\begin{matrix} 1 &amp; 3 &amp; 2 &amp; 4 \\\\ 5 &amp; 6 &amp; 1 &amp; 2 \\\\ 7 &amp; 8 &amp; 9 &amp; 1 \\\\ 4 &amp; 2 &amp; 3 &amp; 5 \\end{matrix}\\right)\\)</p> <p>La strat\u00e9gie gloutonne donnera le chemin suivant en rouge et une somme de 38.</p> <p>Note</p> <p>Dans le cas o\u00f9 les deux valeurs situ\u00e9s en bas et \u00e0 droite sont \u00e9gales, on supposera dans la suite qu'on fait le choix d'aller \u00e0 droite.</p> <p>\\(\\left(\\begin{matrix} \\textcolor{red}{1} &amp; 3 &amp; 2 &amp; 4 \\\\ \\textcolor{red}{5} &amp; 6 &amp; 1 &amp; 2 \\\\ \\textcolor{red}{7} &amp; \\textcolor{red}{8} &amp; \\textcolor{red}{9} &amp; 1 \\\\ 4 &amp; 2 &amp; \\textcolor{red}{3} &amp; \\textcolor{red}{5} \\end{matrix}\\right)\\)</p> <ol> <li> <p>En donnant un exemple montrer que la strat\u00e9gie gloutonne ne donne pas toujours la somme optimale.</p> </li> <li> <p>Ecrire en OCaml, une fonction <code>glouton</code> qui renvoie la somme obtenue la strat\u00e9gie gloutonne</p> </li> <li> <p>Tester votre fonction sur l'exemple suivant et v\u00e9rifier votre r\u00e9sultat :   </p> <pre><code> exemple = [|\n    [|11; 19; 12;  2; 18; 18;  2;  9; 12; 17|];\n    [|17; 14; 12; 10;  7; 18; 12;  5; 11;  7|];\n    [| 4;  8;  2; 12;  2; 17; 16; 13;  1;  6|];\n    [|13;  8; 20; 10;  3; 12; 17; 12; 12;  9|];\n    [| 8;  3; 14; 17; 16; 10; 13; 10;  5; 20|];\n    [| 9; 13; 17;  9; 10;  1; 11; 19; 20; 19|];\n    [| 1;  6; 18; 15; 10;  2;  7;  9;  4; 20|];\n    [| 3;  8; 17; 18; 20; 19; 16;  8;  2; 14|];\n    [|19; 17; 18;  9; 20; 15;  6;  5; 16;  3|];\n    [|13; 14; 14;  9; 16;  8; 17; 15;  9; 11|];\n        |]\n</code></pre> </li> <li> <p>Un chemin valide dans une matrice de taille \\(n\\times n\\) est de longueur \\(2n-2\\) et est n\u00e9cessairement constitu\u00e9 de \\(n-1\\) directions bas et de \\(n-1\\) directions droite. Donc, choisir un chemin c'est choisir l'emplacement des directions droites, par cons\u00e9quent, \u00e9num\u00e9rer les chemins revient \u00e0 \u00e9num\u00e9rer les combinaisons possibles de \\(n-1\\) \u00e9l\u00e9ments choisis parmi les entiers de \\(0\\) \u00e0 \\(2n-3\\). Ecrire une fonction <code>combinaisons : int -&gt; int -&gt; int list list</code> qui prend en argument deux entiers <code>k</code> et <code>n</code> et renvoie les combinaisons de <code>k</code> entiers choisis parmis les entiers de <code>0</code> \u00e0 <code>n-1</code>.</p> <p>Aide</p> <ul> <li>on pourra commencer par \u00e9crire une fonction <code>entiers n</code> qui renvoie la liste des entiers de <code>0</code> \u00e0 <code>n-1</code></li> <li>pour g\u00e9n\u00e9rer les combinaisons, on pourra penser r\u00e9cursivement et consid\u00e9rer que choisir <code>k</code> \u00e9l\u00e9ments parmi <code>n</code> revient soit \u00e0 prendre <code>n</code> et donc ensuite \u00e0 en choisir <code>k-1</code> \u00e9l\u00e9ments parmi <code>n-1</code> soit \u00e0 ne pas prendre <code>n</code> et donc \u00e0 choisir <code>k</code> \u00e9l\u00e9ments parmi <code>n-1</code>.</li> </ul> </li> <li> <p>Ecrire une fonction qui prend en argument un chemin (donn\u00e9 sous la forme des indices des emplacements de l'une des deux directions) et renvoie la valeur de ce chemin</p> </li> <li> <p>R\u00e9soudre le probl\u00e8me par force brute et donner la valeur maximale de la somme dans l'exemple ci-dessus. V\u00e9rifier votre r\u00e9sultat :    .</p> </li> </ol>"},{"location":"mp2i/forcebrute/#exercice-8-choix-dactivites","title":"Exercice 8 : Choix d'activit\u00e9s","text":"<p>On consid\u00e8re \\(n\\) activit\u00e9s repr\u00e9sent\u00e9e chacune par un couple \\((d_i,f_i)_{0\\leqslant i \\leqslant n-1}\\) repr\u00e9sentant leur heure de d\u00e9but et de fin. Deux activit\u00e9s sont incompatibles lorsqu'elles se chevauchent. Par exemple si on consid\u00e8re les activit\u00e9s suivantes : \\(\\{(1, 3), (2, 5), (4, 5), (3, 7), (5, 7) \\}\\) alors \\((1,3)\\) et \\((2, 5)\\) sont incompatibles, mais pas \\((1, 3)\\) et \\((4, 5)\\). On cherche \u00e0 d\u00e9terminer un choix d'activit\u00e9s compatibles qui maximise le nombre  d'activit\u00e9s effectu\u00e9es. Dans l'exemple pr\u00e9c\u00e9dent, un tel choix serait \\(\\{(1, 3), (4, 5), (5, 7) \\}\\).</p> <p>On propose de r\u00e9soudre ce probl\u00e8me en utilisant une strat\u00e9gie gloutonne : on classe les activit\u00e9s suivant un crit\u00e8re donn\u00e9e puis on choisit les activit\u00e9s dans l'ordre o\u00f9 elles se pr\u00e9sentent du moment o\u00f9 elles sont compatibles avec choisie \u00e0 l'\u00e9tape pr\u00e9c\u00e9dente.</p> <ol> <li> <p>Mettre en oeuvre cette strat\u00e9gie en utilisant comme crit\u00e8re la dur\u00e9e de l'activit\u00e9. Montrer sur un exemple bien choisi que cette strat\u00e9gie ne donne pas toujours la solution optimale.</p> </li> <li> <p>Mettre en oeuvre cette strat\u00e9gie en utilisant comme crit\u00e8re la date de d\u00e9but de l'activit\u00e9. Cette strat\u00e9gie est-elle optimale ?</p> </li> <li> <p>Mettre en oeuvre cette strat\u00e9gie en utilisant comme crit\u00e8re la date de fin de l'activit\u00e9.</p> <p>Note</p> <p>Voici quelques \u00e9l\u00e9ments de preuve pour montrer que cette strat\u00e9gie est optimale. On suppose les activit\u00e9s tri\u00e9es par date de fin c'est \u00e0 dire qu'on renum\u00e9rote les activit\u00e9s de fa\u00e7on \u00e0 ce que  \\(f_0 \\leqslant f_1 \\leqslant \\dots \\leqslant f_{n-1}\\), alors</p> <ul> <li> <p>il existe une solution optimale qui commence par \\((d_0,f_0)\\) en effet si on consid\u00e8re un choix optimale \\(S = \\{(d_{s_0},f_{s_0}), \\dots , (d_{s_k},f_{s_k})\\}\\) avec \\((d_{s_0},f_{s_0}) \\neq (d_0,f_0)\\) alors, comme \\(f_0 \\leq f_{s_0}\\), \\(S = \\{(d_{0},f_{0}), \\dots , (d_{s_k},f_{s_k})\\}\\) est aussi une solution optimale.</p> </li> <li> <p>on suppose que les \\(m\\) premieres activit\u00e9s choisis par l'algorithme glouton font partie d'une solution optimale, et de la m\u00eame fa\u00e7on que pr\u00e9c\u00e9demment on montre que le choix glouton fait partie d'une solution optimale.</p> </li> </ul> </li> </ol>"},{"location":"mp2i/forcebrute/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/graphes/","title":"C17 Graphes","text":"<p>\"Bad programmers worry about the code. Good programmers worry about data structures and their relationships. \"L. Torvalds(lwn.net)</p>"},{"location":"mp2i/graphes/#cours","title":"Cours","text":"<p>Support de cours chapitre 17 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/graphes/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD17 </p>"},{"location":"mp2i/graphes/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"mp2i/graphes/#exercice-1-matrice-dadjacence-en-c","title":"Exercice 1 : Matrice d'adjacence en C","text":"<p>Dans cet exercice, on s'int\u00e9resse \u00e0 la repr\u00e9sentation par matrice d'adjacence en C, on rappelle la structure de donn\u00e9es vue en cours :</p> <p>D\u00e9finition de la structure de donn\u00e9es</p> <pre><code>#define NMAX 100                 // nombre maximal de sommets\ntypedef bool graphe[NMAX][NMAX]; // La matrice d'adjacence\n</code></pre> <ol> <li> <p>Ecrire une fonction d\u2019initialisation de prototype <code>void init_graphe(graphe g, int size)</code> qui initialise un graphe de taille <code>size</code> en remplissant la matrice avec des valeurs <code>false</code></p> </li> <li> <p>Ecrire une fonction de cr\u00e9ation d'un arc dans un graphe de prototype <code>void cree_arete(graphe g, int i, int j)</code> qui permet de cr\u00e9er une ar\u00eate de entre les sommets <code>i</code> et <code>j</code></p> </li> <li> <p>On donne ci-dessous une fonction permettant de visualiser un graphe :</p> Fonction de visualisation <pre><code>// Visualisation du graphe g de taille n\nvoid visualise(graphe g, int n)\n{\n    FILE *writer = fopen(\"temp.gv\", \"w\");\n    fprintf(writer, \"graph mygraph {\\n\");\n    for (int i = 0; i &lt; n; i++)\n    {\n        fprintf(writer, \"%d\\n\", i);\n        for (int j = i + 1; j &lt; n; j++)\n        {\n            if (g[i][j])\n            {\n                fprintf(writer, \"%d -- %d\\n\", i, j);\n            }\n        }\n    }\n    fprintf(writer, \"}\\n\");\n    fclose(writer);\n    system(\"xdot temp.gv &amp;\");\n}\n</code></pre> <p>Cr\u00e9er et visualiser le graphe suivant : <pre><code>graph LR\nA((\"0\"))\nB((\"1\"))\nC((\"2\"))\nD((\"3\"))\nE((\"4\"))\nF((\"5\"))\nG((\"6\"))\nA --- B\nA --- C\nB --- D\nC --- F\nC --- G\nE --- G\nA --- E\nD --- F\nG --- F\nB --- C</code></pre></p> </li> <li> <p>Ecrire une fonction qui renvoie le degr\u00e9 d'un sommet dans un graphe</p> </li> <li> <p>Ecrire une fonction qui renvoie un tableau de dimension <code>NMAX</code>, contenant les voisins d'un sommet <code>i</code> ce tableau contiendra une sentinelle <code>-1</code> indiquant la fin de la liste des sommets. Par exemple, sur le graphe repr\u00e9sent\u00e9 ci-dessus pour le sommet <code>0</code>, la fonction renvoie un tableau de taille <code>NMAX</code> dont les quatre premiers \u00e9l\u00e9ments sont <code>1,2,4</code> et <code>-1</code>.</p> </li> <li> <p>Ecrire une fonction <code>complet</code> qui prend un graphe et sa taille effective en argument et ajoute tous les arcs possibles dans ce graphe. </p> </li> <li> <p>Ecrire une fonction <code>cycle</code> qui prend un graphe et sa taille effective en argument et en fait un graphe cycle</p> </li> </ol>"},{"location":"mp2i/graphes/#exercice-2-matrice-dadjacence-en-ocaml","title":"Exercice 2 : Matrice d'adjacence en OCaml","text":"<p>Reprendre l'exercice pr\u00e9c\u00e9dent en OCaml en utilisant la structure de donn\u00e9es vue en cours et rappel\u00e9e ci-dessous :</p> <p>D\u00e9finition de la structure de donn\u00e9es</p> <pre><code>type graphe = {\n  taille : int; \n  madj : bool array array};;\n</code></pre> <p>La fonction de visualisation pour OCaml est donn\u00e9e ci-dessous :</p> Fonction de visualisation <pre><code>let visualise g =\n  let n = (g.taille - 1) in\n  let writer = open_out \"temp.gv\" in\n  output_string writer \"graph mygraph {\\n\";\n  for i=0 to n do\n    Printf.fprintf writer \"%d\\n\" i;\n    for j=i+1 to n do\n      if g.madj.(i).(j) then Printf.fprintf writer \"%d -- %d\\n\" i j;\n    done;\n  done;\n  output_string writer \"}\\n\";\n</code></pre> <p>Pour la question 5., on pourra renvoyer la liste des sommets et pas un tableau.</p>"},{"location":"mp2i/graphes/#exercice-3-matrice-dadjacence-dynamique-linearisee-en-c","title":"Exercice 3 : Matrice d'adjacence dynamique lin\u00e9aris\u00e9e en C","text":"<p>Reprendre l'exercice 1 en C en utilisant la structure de donn\u00e9es d'une matrice lin\u00e9aris\u00e9e allou\u00e9e en m\u00e9moire lorsque la taille est connue :</p> <p>D\u00e9finition de la structure de donn\u00e9es</p> <pre><code>struct graphe\n{\n    int taille; // |S|\n    bool *madj; // matrice lin\u00e9aris\u00e9e (\u00e0 allouer)\n};\ntypedef struct graphe graphe;\n</code></pre> <p>On rappelle qu'avec cette structure, il devient inutile de passer la taille du graphe en argument puisqu'on y acc\u00e8de directement via le champe <code>taille</code>.</p> <p>Aide</p> <p>Pour rappel :</p> <ul> <li>La valeur de \\(M_{ij}\\) se situe \u00e0 l'indice \\(i \\times |S| + j\\) dans la matrice lin\u00e9aris\u00e9e</li> <li>L'indice \\(k\\) dans la matrice lin\u00e9aris\u00e9e correspond \u00e0 la ligne \\(\\left\\lfloor \\dfrac{k}{|S|} \\right\\rfloor\\) et \u00e0 la colonne \\(k \\mod |S|\\) de la matrice d'adjacence</li> </ul> <p>On donne la fonction de visualisation adapt\u00e9e \u00e0 cette nouvelle structure</p> Fonction de visualisation <pre><code>// Visualisation du graphe g\nvoid visualise(graphe g)\n{\n    int n = g.taille;\n    FILE *writer = fopen(\"temp.gv\", \"w\");\n    fprintf(writer, \"graph mygraph {\\n\");\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = i + 1; j &lt; n; j++)\n        {\n            if (g.madj[i * n + j])\n            {\n                fprintf(writer, \"%d -- %d\\n\", i, j);\n            }\n        }\n    }\n    fprintf(writer, \"}\\n\");\n    fclose(writer);\n    system(\"xdot temp.gv &amp;\");\n}\n</code></pre>"},{"location":"mp2i/graphes/#exercice-4-listes-dadjacence-en-c","title":"Exercice 4 : Listes d'adjacence en C","text":"<p>On rappelle la structure de donn\u00e9es vues en cours permettant de repr\u00e9senter un graphe par ses listes d'adjacence en C :</p> <p>D\u00e9finition de la structure de donn\u00e9es</p> <pre><code>#define NMAX 100 // nombre maximal de sommets\n// graphe[i][0] contient le degr\u00e9 du sommet i\n// graphe[i][1..] est la liste d'adjacence du sommet i\ntypedef int graphe[NMAX][NMAX];\n</code></pre> <p>Attention</p> <p>On rappelle que dans cette repr\u00e9sentation la premi\u00e8re colonne est le degr\u00e9 du sommet (et pas un num\u00e9ro de sommet adjacent) A titre d'exemple, le graphe <pre><code>graph LR\nA((\"0\"))\nB((\"1\"))\nC((\"2\"))\nD((\"3\"))\nA --- B\nA --- C\nA --- D\nB --- C</code></pre> est repr\u00e9sent\u00e9 par le tableau d'entiers  \\(\\begin{pmatrix} 3 &amp; 1 &amp; 2 &amp; 3 \\\\ 2 &amp; 0 &amp; 2 &amp;  .\\\\ 2 &amp; 0 &amp; 1 &amp; . \\\\ 1 &amp; 0 &amp; . &amp; . \\\\ \\end{pmatrix}\\) o\u00f9 <code>.</code> indique une valeur non utilis\u00e9e du tableau.</p> <ol> <li> <p>Ecrire une fonction d\u2019initialisation de prototype <code>void init_graphe(graphe g, int size)</code> qui initialise un graphe de taille <code>size</code> en affectant le degr\u00e9 0 \u00e0 tous les noeuds.</p> </li> <li> <p>Ecrire une fonction de cr\u00e9ation d'un arc dans un graphe de prototype <code>void cree_arete(graphe g, int i, int j)</code> qui permet de cr\u00e9er une ar\u00eate de entre les sommets <code>i</code> et <code>j</code></p> </li> <li> <p>On donne ci-dessous une fonction permettant de visualiser un graphe :</p> Fonction de visualisation <pre><code>void visualise(graphe g, int n)\n{\n    FILE *writer = fopen(\"temp.gv\", \"w\");\n    fprintf(writer, \"graph mygraph {\\n\");\n    for (int i = 0; i &lt; n; i++)\n    {\n        fprintf(writer, \"%d\\n\", i);\n        for (int j = 1; j &lt;= g[i][0]; j++)\n        {\n            if (i &gt; g[i][j])\n            {\n                fprintf(writer, \"%d -- %d\\n\", i, g[i][j]);\n            }\n        }\n    }\n    fprintf(writer, \"}\\n\");\n    fclose(writer);\n    system(\"xdot temp.gv &amp;\");\n}\n</code></pre> <p>Cr\u00e9er et visualiser le graphe suivant : <pre><code>graph LR\nA((\"A\"))\nB((\"B\"))\nC((\"C\"))\nD((\"D\"))\nE((\"E\"))\nF((\"F\"))\nG((\"G\"))\nA --- B\nA --- C\nG --- E\nC --- D\nD --- F\nB --- E\nE --- F\nA --- G</code></pre></p> </li> <li> <p>Ecrire une fonction qui affiche la matrice d'adjacence du graphe.</p> </li> <li> <p>Ecrire une fonction qui renvoie le degr\u00e9 d'un sommet dans un graphe</p> </li> <li> <p>Ecrire une fonction <code>existe</code> de prototype <code>bool existe(graphe g, int i, int j)</code> qui renvoie <code>true</code> si il y a un arc entre les sommets <code>i</code> et <code>j</code> et <code>false</code> sinon.</p> </li> <li> <p>Ecrire une fonction qui renvoie un tableau  contenant les voisins d'un sommet <code>i</code>. </p> </li> </ol>"},{"location":"mp2i/graphes/#exercice-5-listes-dadjacence-en-ocaml","title":"Exercice 5 : Listes d'adjacence en OCaml","text":"<p>On rapelle la structure de donn\u00e9es vue en cours permettant de repr\u00e9senter un graphe par liste d'adjacence en OCaml :</p> <p>D\u00e9finition de la structure de donn\u00e9es</p> <pre><code>type graphe = {\n  taille : int;\n  ladj : int list array};;\n</code></pre> <ol> <li> <p>Ecrire une fonction d'initialisation <code>int -&gt; graphe</code> qui renvoie un graphe d'ordre <code>n</code> n'ayant aucune ar\u00eate</p> </li> <li> <p>Ecrire une fonction qui permet de cr\u00e9er une ar\u00eate dans un graphe.</p> </li> <li> <p>La fonction de visualisation pour OCaml est donn\u00e9e ci-dessous :</p> Fonction de visualisation <pre><code>    let visualise g =\n      let n = (g.taille - 1) in\n      let writer = open_out \"temp.gv\" in\n      output_string writer \"graph mygraph {\\n\";\n      let rec aux i wl =\n        match wl with\n        | [] -&gt; ()\n        | h::t -&gt; if h&gt;i then (Printf.fprintf writer \"%d -- %d\\n\" i h); aux i t\n      in\n      for i=0 to n do\n        Printf.fprintf writer \"%d\\n\" i;\n        aux i g.ladj.(i);\n      done;\n      output_string writer \"}\\n\";\n      close_out writer;\n      ignore (Sys.command \"xdot temp.gv &amp;\");;\n</code></pre> <p>Cr\u00e9er et visualiser le graphe suivant : <pre><code>graph LR\nA((\"A\"))\nB((\"B\"))\nC((\"C\"))\nD((\"D\"))\nE((\"E\"))\nF((\"F\"))\nG((\"G\"))\nA --- B\nA --- C\nG --- E\nC --- D\nD --- F\nB --- E\nE --- F\nA --- G</code></pre></p> </li> <li> <p>Ecrire une fonction qui affiche la matrice d'adjacence du graphe.</p> </li> <li> <p>Ecrire une fonction qui renvoie le degr\u00e9 d'un sommet dans un graphe</p> </li> <li> <p>Ecrire une fonction <code>existe</code> de prototype <code>bool existe(graphe g, int i, int j)</code> qui renvoie <code>true</code> si il y a un arc entre les sommets <code>i</code> et <code>j</code> et <code>false</code> sinon.</p> </li> <li> <p>Ecrire une fonction qui renvoie une liste  contenant les voisins d'un sommet <code>i</code>.</p> </li> </ol>"},{"location":"mp2i/graphes/#exercice-6-listes-chainees-dadjacence-en-c","title":"Exercice 6 : Listes chain\u00e9es d'adjacence en C","text":"<p>Comme indiqu\u00e9 en cours, on peut repr\u00e9sent\u00e9 les listes d'adjacence en C \u00e0 l'aide d'un tableau de liste chain\u00e9es. Reprendre les questions de l'exercice pr\u00e9c\u00e9dent \u00e0 l'aide de cette nouvelle repr\u00e9sentation.</p> <pre><code>struct maillon{\n    int valeur;\n    struct maillon* suivant;};\ntypedef struct maillon maillon;\ntypedef maillon* liste;\n\nstruct graphe{\n    int taille;\n    liste* ladj;};\ntypedef struct graphe graphe;\n</code></pre> <p>Pour r\u00e9viser la structure de liste chain\u00e9es, on pourra revenir si besoin sur cet exercice</p> <p>On donne aussi pour cette repr\u00e9sentation une fonction de visualisation !</p> Langagec <pre><code>void visualise(graphe g)\n{\n    FILE *writer = fopen(\"temp.gv\", \"w\");\n    fprintf(writer, \"graph mygraph {\\n\");\n    maillon * mc;\n    int n = g.taille;\n    for (int i=0; i&lt;n; i++)\n    {\n        mc = g.ladj[i];\n        while (mc!=NULL)\n        {\n            if (i&gt;mc-&gt;valeur) {fprintf(writer,\"%d -- %d\\n\",i,mc-&gt;valeur);}\n            mc=mc-&gt;suivant;\n        }\n    }\n    fprintf(writer, \"}\\n\");\n    fclose(writer);\n    system(\"xdot temp.gv &amp;\");\n}\n</code></pre>"},{"location":"mp2i/graphes/#exercice-7-graphes-orientes","title":"Exercice 7 : Graphes orient\u00e9s","text":"<p>Note</p> <p>Afin d'adapter les fonctions de visualisations  au cas des graphes orient\u00e9s, il suffit d'apporter les modifications suivantes :</p> <ul> <li>modifier la ligne \u00e9crivant l'ent\u00eate <code>graph mygraph</code> dans le fichier dot en <code>digraph mygraph</code></li> <li>modifier les arcs entre les sommets en <code>-&gt;</code> (au lieu de <code>--</code>)</li> </ul> <p>Dans le langage (C ou Ocaml) et avec la repr\u00e9sentation de votre choix (matrice ou listes d'adjacence), repr\u00e9senter un graphe orient\u00e9 et \u00e9crire sur le type <code>graphe</code>  les fonctions suivantes :</p> <ol> <li>Test d'existence d'un ar\u00eate</li> <li>Ajout d'un ar\u00eate.</li> <li>Calcul du degr\u00e9 sortant d'un sommet.</li> <li>Obtention de la liste des successeurs d'un sommet.</li> <li>Calcul du degr\u00e9 entrant d'un sommet.</li> <li>Obtention de la liste des pr\u00e9d\u00e9cesseurs d'un sommet.</li> </ol>"},{"location":"mp2i/graphes/#exercice-8-triangles-dans-un-graphe","title":"Exercice 8 : Triangles dans un graphe","text":"<p>On consid\u00e8re un graphe non orient\u00e9 \\(G=(S,A)\\) et on supposera que les sommets sont index\u00e9s par les entiers \u00e0 partir de 0. On dit que \\(\\{i,j,k \\}\\) est un triangle de \\(G\\) si \\(ij\\), \\(jk\\) et \\(kj\\) sont dans \\(A\\). Les fonctions demand\u00e9es sont \u00e0 \u00e9crire en OCaml et on supposera dans toute la suite de l'exercice, qu'on repr\u00e9sente les graphes par listes d'adjacence : <pre><code>type graphe = {\n  taille : int;\n  ladj : int list array};;\n</code></pre></p> <ol> <li> <p>Donner le nombre de triangles d'un graphe complet \u00e0 \\(n\\) sommets.</p> </li> <li> <p>Ecrire une fonction <code>complet : int -&gt; graphe</code> qui renvoie le graphe complet \u00e0 <code>n</code> sommets.</p> </li> <li> <p>En utilisant les aspects imp\u00e9ratifs du langage (boucles et r\u00e9f\u00e9rences), \u00e9crire une fonction <code>triangles : graphe -&gt; (int*int*int) list</code> qui renvoie la liste des triangles du graphe, en utilisant l'algorithme qui consiste pour chaque triplet \\((i,j,k)  \\in \\{0,\\dots,|S|-1\\}^3\\) \u00e0 tester s'il s'agit ou non d'un triangle.</p> </li> <li> <p>On souhaite maintenant \u00e9crire une version de la fonction <code>triangles</code> sans utiliser les aspects imp\u00e9ratifs du langage.</p> <ol> <li> <p>Ecrire une fonction <code>sous_liste : 'a list -&gt; int -&gt; 'a list list</code> qui prend en argument une liste <code>lst</code> et un entier <code>n</code> et renvoie toutes les sous listes de longueur <code>n</code> de <code>lst</code>. Par exemple <code>sousliste [0; 1; 2; 3] 3</code> renvoie \u00a0<code>[[0; 1; 2]; [0; 1; 3]; [0; 2; 3]; [1; 2; 3]]</code></p> <p>Aide</p> <p>On pourra proc\u00e9d\u00e9r par correspondance de motif sur <code>lst</code> et <code>n</code> et utiliser le fait qu'une sous liste de longueur <code>n</code> de <code>lst</code> est soit une sous liste de longueur <code>n</code> de la queue de <code>lst</code>, soit la t\u00eate de <code>lst</code> suivie d'une sous liste de longueur <code>n-1</code> de la queue de <code>lst</code>.</p> </li> <li> <p>En utilisant la question pr\u00e9c\u00e9dente et <code>List.filter</code> \u00e9crire une version de <code>triangles</code> qui n'utilise ni boucles ni r\u00e9f\u00e9rences.</p> </li> </ol> </li> <li> <p>Tester vos fonctions sur le graphe \u00e0 1000 sommets repr\u00e9sent\u00e9 par le fichier ci-dessous (sur chaque ligne, se trouve un arc donn\u00e9 sous la forme de ses deux ext\u00e9mit\u00e9s s\u00e9par\u00e9 par un caract\u00e8re espace.)</p> <p>graphe.txt  V\u00e9rifier votre r\u00e9ponse :   </p> </li> <li> <p>Une autre possibilit\u00e9 pour d\u00e9terminer les triangles d'un graphe et de parcourir l'ensemble \\(A\\) des ar\u00eates, pour chaque ar\u00eate \\(ij\\) on cherche alors l'intersection des listes d'adjacences de \\(i\\) et de \\(j\\). Comparer les complexit\u00e9s des deux m\u00e9thodes si on suppose que l'intersection est calcul\u00e9e en temps lin\u00e9aire du nombre de sommets.</p> </li> <li> <p>Ecrire une fonction <code>intersection int list -&gt; int list -&gt; int list</code> qui calcule en temps lin\u00e9aire l'intersection de deux listes en les supposants tri\u00e9es.</p> </li> <li> <p>Ecrire une nouvelle version de la fonction <code>triangles</code> qui utilise le parcours des ar\u00eates.</p> </li> </ol>"},{"location":"mp2i/graphes/#exercice-9-coloration-gloutonne","title":"Exercice 9 : Coloration gloutonne","text":"<p>Dans toute la suite de l'exercice, on consid\u00e8re un graphe \\(G=(S,A)\\) o\u00f9 chaque sommet est identifi\u00e9 par un entier de \\(\\{0, \\dots, |S|-1 \\}\\). Les fonctions sont \u00e0 \u00e9crire en OCaml et et on supposera ce graphe repr\u00e9sent\u00e9 par liste d'adjacence : <pre><code>type graphe = {\n  taille : int;\n  ladj : int list array};;\n</code></pre></p> <p>La coloration d'un graphe consiste \u00e0 attribuer une couleur \u00e0 chacun des sommets de ce graphe de fa\u00e7on \u00e0 ce que deux sommets adjacents soient de deux couleurs diff\u00e9rentes. On s'int\u00e9resse g\u00e9n\u00e9ralement \u00e0 une coloration utilisant un minimum de couleurs.</p> <ol> <li> <p>En donnant un exemple montrer que la coloration d'un graphe \u00e0 \\(n\\) sommets peut n\u00e9cessiter \\(n\\) couleurs.</p> </li> <li> <p>Ecrire une fonction <code>adjacent : graphe -&gt; int -&gt; int -&gt; bool</code> qui prend en argument un graphe ainsi que deux sommets et renvoie <code>true</code> si ces deux sommets sont adjacents et <code>false</code> sinon.</p> </li> <li> <p>On propose de repr\u00e9senter la coloration d'un graphe \u00e0 \\(n\\) sommets par une un tableau de longueur \\(n\\). Par exemple, si \\(n=3\\), le tableau <code>[| 1; 2; 1 |]</code> signifie que les sommets 0 et 2 sont de la couleur 1 et le sommet 1 de la couleur 2. Ecrire une fonction <code>valide : graphe -&gt; 'a array -&gt; bool</code> qui prend en argument un graphe et une liste d'entiers et renvoie <code>true</code> si cette coloration est valide.</p> </li> <li> <p>On propose un algorithme glouton pour colorier un graphe : on parcourt les sommets dans leur ordre de num\u00e9rotation et on leur attribue la plus petite couleur disponible. Ecrire la fonction <code>glouton : graphe -&gt; int array</code> qui renvoie la coloration gloutonne d'un graphe.</p> </li> <li> <p>La coloration gloutonne utilise-t-elle toujours un nombre minimal de couleurs ?</p> <p>Aide</p> <p>On pourra consid\u00e9rer un graphe cycle et tester diff\u00e9rentes  num\u00e9rotation des sommets.</p> </li> </ol>"},{"location":"mp2i/graphes/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/hash/","title":"C10 Tableau associatif, hachage","text":"<p>\"Warning a hash table is only as good as the hash function. A bad hash function will turn the table into a degenerate association list, with linear time lookup instead of constant time lookup.\"ocaml.org(Module Hashtbl)</p>"},{"location":"mp2i/hash/#cours","title":"Cours","text":"<p>Support de cours chapitre 10 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/hash/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD10 </p>"},{"location":"mp2i/hash/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"mp2i/hash/#exercice-1-quelques-fonctions-de-hachage-sur-les-chaines-de-caracteres","title":"Exercice 1 : Quelques fonctions de hachage sur les chaines de caract\u00e8res","text":"<p>On propose de tester dans cet exercice trois fonctions de hachage sur les chaines de caract\u00e8res, on pourra les coder au choix en C ou en OCaml. On testera ces fonctions sur un ensemble de 5000 chaines de caract\u00e8res toutes de longueurs 6 et qui ont \u00e9t\u00e9 g\u00e9n\u00e9r\u00e9s al\u00e9atoirement et contiennent toutes des caract\u00e8res ascii imprimables (ceux de codes 32 \u00e0 126) et t\u00e9l\u00e9chargeables ci-dessous :     Chaines al\u00e9atoires  Dans tous les cas, on utilisera une table de hachage de taille 10000.</p> <ol> <li> <p>Coder les trois fonctions suivantes :</p> <ol> <li> <p>Somme des codes des caract\u00e8res ascii Cette fonction fait simplement la somme des codes ascii des caract\u00e8res qui la compose, par exemple, le hash de <code>\"MP2I\"</code> est : <code>77 + 80 + 50 + 73 = 280</code> car les codes ascii de <code>M,P,2</code> et <code>I</code> sont respectivement <code>77, 80, 50</code> et <code>73</code>. La table de hachage ayant une taille de 10000, aucun modulo n'est n\u00e9cessaire, le plus grand hash possible \u00e9tant 6*126 = 756.</p> </li> <li> <p>Produit des codes des caract\u00e8res On calcule le produit des codes ascii des caract\u00e8res modulo 10000. Pour <code>MP2I</code> on obtient : <code>77*80*50*73 = 22484000</code> qui donne <code>4000</code> modulo 10000.</p> </li> <li> <p>Hachage polynomial On fixe une valeur arbitraire <code>x=31</code> puis on calcule la somme modulo 10000 des \\(c_ix^i\\) o\u00f9 les \\(c_i\\) sont les codes ascii des caract\u00e8res de la chaine. Par exemple, pour <code>MP2I</code> on obtient : \\(77 + 80\\times31 + 50\\times31^2 + 73\\times31^3 = 2225350\\) qui donne 5350 modulo 10000.</p> <p>Aide</p> <p>On pourra utiliser dans un premier temps le calcul de puissance puis remarquer que l'expression pr\u00e9c\u00e9dente peut aussi se calculer (plus efficacement) avec : \\(((((73 \\times 31) + 50)\\times 31) + 80)\\times31 + 77\\)</p> </li> </ol> </li> <li> <p>Sur les 5000 chaines de test donn\u00e9es ci-dessus, faire une \u00e9valuation empirique de ces fonctions de hachage, par exemple en calculant pour chacune d'elle le nombre maximal de collision et le nombre total de collision. Pour cela on pourra cr\u00e9er un tableau de 10000 cases (les 10000 valeurs possibles de hash) initialis\u00e9 \u00e0 <code>0</code> puis calculer successivement les hash des 5000 chaines et incr\u00e9menter la case correspondante du tableau.</p> </li> </ol> <p>Pour aller plus loin</p> <p>Pour des exemples de \"bonnes\" fonction de hachage (code donn\u00e9 en C) sur les chaines de caract\u00e8res, on pourra consulter cette page.</p>"},{"location":"mp2i/hash/#exercice-2-implementation-en-c-dune-table-de-hachage","title":"Exercice 2 : Impl\u00e9mentation en C d'une table de hachage","text":"<p>On reprend ici l'exemple vu en cours du calcul du nombre d'occurrence des mots dans un texte. On rappelle que les maillons des listes chain\u00e9es utilis\u00e9es sont d\u00e9finies par : <pre><code>    struct node\n    {\n        char word[26];\n        int occ;\n        struct node *next;\n    };\n    typedef struct node node;\n    typedef node *list;\n</code></pre> Et qu'une table de hachage est alors repr\u00e9sent\u00e9 par un tableau de listes chain\u00e9es. Une proposition de correction pour les fonctions de manipulations de ces listes est fournie.</p> <ol> <li> <p>Ecrire la fonction de prototype <code>bool is_in_list(list l, char w[26])</code> qui renvoie <code>true</code> ou <code>false</code> selon que la chaine de caract\u00e8re <code>w</code> figure ou non dans la liste <code>l</code>.</p> <p>Aide</p> <p>La fonction <code>strcmp</code> disponible apr\u00e8s avoir inclus <code>string.h</code> compare deux chaines de caract\u00e8res et renvoie <code>0</code> lorsqu'elles sont \u00e9gales.</p> Corrig\u00e9 <pre><code>    bool is_in_list(list l, char w[26])\n    {\n        while (l != NULL)\n        {\n            if (strcmp(l-&gt;word, w) == 0)\n                return true;\n            l = l-&gt;next;\n        }\n        return false;\n    }\n</code></pre> </li> <li> <p>Ecrire les autres fonctions n\u00e9cessaires :</p> <ol> <li> <p>Ajouter une nouvelle cl\u00e9 de prototype <code>void insert_in_list(list *l, char w[26])</code>. Lorsqu'on ajoute une nouvelle chaine, on la rencontre pour la premi\u00e8re fois, par cons\u00e9quent son nombre d'occurrence est 1.</p> Corrig\u00e9 <pre><code>    void insert_in_list(list *l, char w[26])\n    {\n        node *new_node = malloc(sizeof(node));\n        strcpy(new_node-&gt;word, w);\n        new_node-&gt;occ = 1;\n        new_node-&gt;next = *l;\n        *l = new_node;\n    }\n</code></pre> </li> <li> <p>R\u00e9cup\u00e9rer la valeur associ\u00e9e \u00e0 une cl\u00e9 : <code>int get_value_list(list l, char w[26])</code></p> Corrig\u00e9 <pre><code>    int get_value_list(list l, char w[26])\n    {\n        while (l != NULL)\n        {\n            if (strcmp(l-&gt;word, w) == 0)\n            {\n                return l-&gt;occ;\n            }\n            l = l-&gt;next;\n        }\n        return 0;\n    }\n</code></pre> </li> <li> <p>Modifier la valeur associ\u00e9e \u00e0 une cl\u00e9 pr\u00e9sente : <code>void update_list(list *l, char w[26], int v)</code></p> Corrig\u00e9 <pre><code>    void update_list(list *l, char *w, int v)\n    {\n        list current = *l;\n        while (current != NULL &amp;&amp; strcmp(current-&gt;word, w) != 0)\n        {\n            current = current-&gt;next;\n        }\n        current-&gt;occ = v;\n    }\n</code></pre> </li> </ol> </li> <li> <p>La table de hachage est alors d\u00e9finie comme un tableau de liste chain\u00e9es de taille <code>SIZE</code> (fix\u00e9e en d\u00e9but de programme). On prend comme fonction de hachage la fonction ci-dessous similaire au hachage polynomial vu dans l'exercice 1 : <pre><code>    unsigned hahsword(char word[26])\n    {\n        unsigned hash = 0;\n        char c;\n        int i = 0;\n        while ((c = word[i]) != '\\0')\n        {\n            hash = hash*33 + c;\n            i++;\n        }\n        return hash;\n    }\n</code></pre> Pour tester si une cl\u00e9 est pr\u00e9sente dans la table de hachage il suffit alors de tester si elle est pr\u00e9sente dans le seau correpondant \u00e0 son hash : <pre><code>    bool is_in_hashtable(list hashtable[SIZE], char w[26])\n    {\n        int bucket_number = hahsword(w) % SIZE;\n        return is_in_list(hashtable[bucket_number], w);\n    }\n</code></pre> Ecrire les autres fonctions n\u00e9cessaires :</p> <p>a. <code>void insert_in_hashtable(list ht[SIZE], char w[26])</code> pour ins\u00e9rer une nouvelle cl\u00e9.</p> <p>b. <code>update_hashtable(list ht[SIZE], char w[26], int n)</code> pour mettre \u00e0 jour la valeur associ\u00e9e \u00e0 une cl\u00e9.</p> <p>c. <code>int get_value_hashtable(list ht[SIZE], char w[26])</code> pour r\u00e9cup\u00e9rer la valeur associ\u00e9e \u00e0 une cl\u00e9.</p> </li> <li> <p>On donne ci-dessous une fonction permettant de lire une ligne d'un fichier sur un canal de lecture <code>FILE *</code> d\u00e9j\u00e0 ouvert: <pre><code>    char *get_word(FILE *reader)\n    {\n        char *word = malloc(sizeof(char) * MAX_SIZE);\n        if (fscanf(reader, \"%s\", word) == 1)\n        {\n            return word;\n        }\n        else\n        {\n            free(word);\n            return NULL;\n        }\n    }\n</code></pre> Utiliser cette fonction pour lire le fichier de mots extraits de l'oeuvre de J. Verne 20000 lieues sous les mers disponible ci-dessous : Mots extraits  Combien de fois le mot \"nautilus\" appara\u00eet-il dans le livre ? Tester votre r\u00e9ponse :   </p> </li> <li> <p>Calculer le nombre total de collision dans la table de hachage.</p> </li> </ol>"},{"location":"mp2i/hash/#exercice-3-implementation-en-ocaml-avec-le-type-array","title":"Exercice 3 : Impl\u00e9mentation en OCaml avec le type array","text":"<p>La table de hachage est un tableau de liste de couples  <code>string*int</code> : <pre><code>    type hashtable = (string * int) list array\n    let size = 100000\n    let ht = Array.make  size []\n</code></pre></p> <p>C'est la traduction en OCaml de l'impl\u00e9mentation en C vue dans l'exercice pr\u00e9c\u00e9dent. Reprendre les m\u00eames questions que ci-dessus.</p>"},{"location":"mp2i/hash/#exercice-4-implementation-en-ocaml-avec-le-module-hashtbl","title":"Exercice 4 : Impl\u00e9mentation en OCaml avec le module Hashtbl","text":"<p>On doit utiliser le module <code>Hashtbl</code> et cr\u00e9er la table de hachage en lui donnant un taille de d\u00e9part (elle sera automatiquement redimensionn\u00e9e si n\u00e9cessaire)  <pre><code>    open Hashtbl\n    let my_ht = Hashtbl.create 10000\n</code></pre> La fonction de hachage est <code>Hashtbl.hash</code> est fonctionne sur des donn\u00e9es de n'importe quel type. Utiliser cette nouvelle impl\u00e9mentation dans le probl\u00e8me du calcul du nombre d'occurrence des mots d'un texte.</p> <p>Aide</p> <ul> <li><code>Hashtbl.mem</code> permet de tester l'appartenance</li> <li><code>Hashtbl.add</code> permet d'ajouter un nouveau couple (cl\u00e9, valeur)</li> <li><code>Hashtbl.find</code> permet de r\u00e9cup\u00e9rer la valeur associ\u00e9e \u00e0 une cl\u00e9</li> <li><code>Hashtbl.replace</code> permet de modifier la valeur associ\u00e9e \u00e0 une cl\u00e9</li> </ul>"},{"location":"mp2i/hash/#exercice-5-somme-de-deux-elements-dun-tableau","title":"Exercice 5 : Somme de deux \u00e9l\u00e9ments d'un tableau","text":"<p>Etant donn\u00e9 un tableau d'entiers \u00a0<code>T</code> et un entier <code>s</code>, le probl\u00e8me est de d\u00e9terminer s'ils existent  deux \u00e9l\u00e9ments de ce tableau dont la somme est <code>s</code>. Par exemple, si <code>T = [5, 6, 1, -4, 3]</code> et <code>s=9</code> alors  la solution est <code>(6,3)</code>.</p> <ol> <li> <p>Ecrire une version na\u00efve de complexit\u00e9 quadratique permettant de r\u00e9soudre le probl\u00e8me \u00e0 l'aide d'une double boucle.</p> </li> <li> <p>En utilisant une table de hachage (et dans le langage de votre choix) \u00e9crire une solution plus efficace.</p> </li> <li> <p>Tester ces deux impl\u00e9mentations en mesurant leur performance sur les nombres t\u00e9l\u00e9chargeables ci-dessous en recherchant deux nombres de somme 42 Liste de nombres   Vous pouvez tester votre r\u00e9ponse : (donner le plus grand des deux nombres)   </p> </li> </ol>"},{"location":"mp2i/hash/#exercice-6-filtre-de-bloom","title":"Exercice 6 : Filtre de Bloom","text":"<p>Un Filtre de Bloom est une structure de donn\u00e9es probabilistes pour laquelle le test d'appartenance :</p> <ul> <li>renvoie toujours vraie si l'\u00e9l\u00e9ment se trouve dans la structure,</li> <li>renvoie parfois vraie si l'\u00e9l\u00e9ment ne se trouve pas dans la structure.</li> </ul> <p>Un \u00e9l\u00e9ment \\(x\\), tel que le test d'appartenance renvoie vraie alors que \\(x\\) n'est pas dans la structure s'appelle un faux positif. </p> <p>Un filtre  de Bloom de taille \\(m\\) sur \\(k\\) fonctions de hachage se compose :</p> <ul> <li>d'un tableau de bool\u00e9ens \\(B\\) de taille \\(m\\) (ce tableau est initialis\u00e9 \u00e0 false)</li> <li>de \\(k\\) fonction de hachage \\(h_0,\\dots, h_{k-1}\\) toutes \u00e0 valeurs dans \\([0;m-1]\\)</li> </ul> <p>Pour ins\u00e9rer un \u00e9l\u00e9ment \\(x\\), on calcule les \\(k\\) valeurs de hachage de x : \\((h_0(x),\\dots,h_{k-1}(x))\\) et pour tout \\(i \\in 0,\\dots k-1\\) on affecte \\(B(h_i(x))\\) \u00e0 vraie. Pour tester si un \u00e9l\u00e9ment est ou pas dans la structure on teste si tous les \\(B(h_i(x))\\) sont \u00e0 vraies (on rappelle que ce teste peut produire un faux n\u00e9gatif).</p> <p>Par exemple, supposons que le filtre soit compos\u00e9 d'un tableau de 8 bool\u00e9ens et de deux fonctions de hachage \\(h_0\\) et \\(h_1\\) sur les chaines de caract\u00e8res.</p> <ul> <li>On ins\u00e8re le mot \"chat\" et on suppose \\(h_0(\\)\"chat\"\\()=1\\) et \\(h_1(\\)\"chat\"\\()=7\\) le filtre devient \\([0,1,0,0,0,0,0,1]\\)</li> <li>On ins\u00e8re le mot \"dent\" et on suppose \\(h_0(\\)\"dent\"\\()=2\\) et \\(h_1(\\)\"dent\"\\()=7\\) le filtre devient \\([0,1,1,0,0,0,0,1]\\)</li> <li>On teste l'appartenance de \"chien\" et on suppose \\(h_0(\\)\"chien\"\\()=1\\) et \\(h_1(\\)\"dent\"\\()=3\\) alors le test renvoie faux puisque le bit 3 est \u00e0 0.</li> <li>On teste l'appartenance de \"poil\" et on suppose \\(h_0(\\)\"poil\"\\()=7\\) et \\(h_1(\\)\"poil\"\\()=2\\) le test renvoie 1 puisque ces deux bits sont \u00e0 1, c'est donc un faux positif.</li> </ul> <p>Le but de l'exercice est d'impl\u00e9menter un filtre de Bloom sur les chaines de caract\u00e8res (dans le langage de son choix), puis de le tester sur les mots du dictionnaire fran\u00e7ais et d'obtenir le taux de faux positifs en fonction de \\(m\\) (le nombre de bits) et de \\(k\\) (le nombre de fonction de hachage).</p> <ol> <li> <p>Ecrire une fonction de hachage sur les chaines de caract\u00e8res prenant en argument un entier <code>x</code> et un entier <code>m</code>et  renvoyant la somme modulo <code>m</code> des \\(c_ix^i\\) o\u00f9 les \\(c_i\\) sont les codes ascii des caract\u00e8res de la chaine. Un filtre de Bloom sera alors un ensemble de \\(k\\) valeur pour le param\u00e8tre <code>x</code> associ\u00e9 \u00e0 un tableau de bool\u00e9ens de taille <code>m</code>.</p> </li> <li> <p>Ecrire une fonction <code>ajoute</code> qui prend en argument une chaine de caract\u00e8re, ainsi qu'un filtre de bloom et modifie ce filtre afin d'y ajouter la chaine. </p> </li> <li> <p>Ecrire une fonction <code>appartient</code> qui prend en argument une chaine de caract\u00e8re, ainsi qu'un filtre de bloom et renvoie un bool\u00e9ens indiquant si cette chaine appartient au filtre.</p> </li> <li> <p>Le fichier <code>\"/usr/share/dict/french\"</code> est un dictionnaire fran\u00e7ais, contenant \\(346\\,200\\) mots (un par ligne). Ins\u00e9rer la majorit\u00e9 de ces mots dans un filtre de bloom et en garder une petite partie afin de tester le nombre de faux positifs. Par exemple, on pourra garder \\(1\\,200\\) mots en en ins\u00e9rer \\(345\\,000\\).</p> </li> <li> <p>D\u00e9terminer le pourcentage de faux positifs sur les mots non ins\u00e9r\u00e9s en faisant varier les param\u00e8tres \\(m\\) et \\(k\\).</p> <p>Note</p> <p>Vous devriez retrouver approximativement les m\u00eames r\u00e9sultats que sur cette page en indiquant pour la valeur \\(n\\) le nombre de mots pr\u00e9sents dans le dictionnaire c'est \u00e0 dire  \\(345\\,000\\) (si vous avez conserv\u00e9 \\(1\\,200\\) mots pour d\u00e9terminer le pourcentage de faux n\u00e9gatif).</p> </li> </ol>"},{"location":"mp2i/hash/#exercice-7-recherche-de-cycle-dans-un-jeu-de-la-vie-a-une-dimension","title":"Exercice 7 : Recherche de cycle dans un jeu de la vie \u00e0 une dimension","text":"<p>On consid\u00e8re une variante du jeu de la vie se d\u00e9roulant dans un tableau \u00e0 une dimension. L'\u00e9volution de la case d'indice \\(i\\) de ce tableau ne d\u00e9pend que de l'\u00e9tat de la case d'indice \\(i\\) et de ses voisins imm\u00e9diats (donc les cases d'indices \\(i-1\\) et \\(i+1\\).). On donne ci-dessous l'\u00e9volution de la case centrale en fonction de l'\u00e9tat de ces 3 cases en notant \"<code>#</code>\" une case vivante et \"<code>.</code>\" une case morte </p> <ul> <li><code>...</code> \\(\\rightarrow\\) <code>.</code> (si les 3 cases sont vides, la case centrale reste vide)</li> <li><code>..#</code> \\(\\rightarrow\\) <code>#</code></li> <li><code>.#.</code> \\(\\rightarrow\\) <code>.</code></li> <li><code>.##</code> \\(\\rightarrow\\) <code>#</code></li> <li><code>#..</code> \\(\\rightarrow\\) <code>#</code></li> <li><code>#.#</code> \\(\\rightarrow\\) <code>.</code></li> <li><code>##.</code> \\(\\rightarrow\\) <code>#</code></li> <li><code>###</code> \\(\\rightarrow\\) <code>.</code></li> </ul> <p>Note</p> <p>Ces \u00e9volutions correspondent \u00e0 la rule90</p> <p>D'autre part on consid\u00e8re ici un tableau fini de \\(N\\) cases et on consid\u00e8re que la voisine de gauche de la case d'indice 0 ainsi que la voisine de droite de la case d'indice \\(N-1\\) sont toujours des cellules mortes. On donne ci-dessous un exemple d'\u00e9volution avec \\(N=10\\)</p> \ud83d\udfd0\ud83d\udfd0 \ud83d\udfd0\ud83d\udfd0\ud83d\udfd0\ud83d\udfd0 <p>evolue en </p> \ud83d\udfd0\ud83d\udfd0\ud83d\udfd0 \ud83d\udfd0 \ud83d\udfd0 <ol> <li> <p>Ecrire une impl\u00e9mentation (dans le langage de votre choix) d'une fonction prenant en entr\u00e9e un tableau de \\(N\\) cases et renvoyant le tableau repr\u00e9sentant l'\u00e9volution du tableau apr\u00e8s une it\u00e9ration des r\u00e8gles de transformation.</p> </li> <li> <p>Pour \\(N=30\\) et pour le tableau initial repr\u00e9sent\u00e9 par \"...............#..............\" (toutes les cases sont mortes sauf la case d'indice 15) faire afficher les 100 premi\u00e8res \u00e9volutions successives.</p> <p>Aide</p> <p>Les premi\u00e8res lignes sont : <pre><code>...............#..............\n..............#.#.............\n.............#...#............\n............#.#.#.#...........\n...........#.......#..........\n..........#.#.....#.#.........\n.........#...#...#...#........\n........#.#.#.#.#.#.#.#.......\n.......#...............#......\n......#.#.............#.#.....\n.....#...#...........#...#....\n....#.#.#.#.........#.#.#.#...\n</code></pre></p> </li> <li> <p>Justifier rapidement que les \u00e9volutions successives contiennent un cycle, c'est-\u00e0-dire qu'on retombe sur un contenu de tableau d\u00e9j\u00e0 obtenu lors d'une \u00e9volution pr\u00e9c\u00e9dente.</p> </li> <li> <p>Proposer une solution utilisant une table de hachage et permettant de d\u00e9terminer le nombre d'it\u00e9rations n\u00e9cessaires avant de rencontrer un motif d\u00e9j\u00e0 parcouru. Testez votre r\u00e9ponse (pour le motif de d\u00e9part de la question 2)   </p> </li> <li> <p>L'algorithme du li\u00e8vre et de la tortue de Floyd est un algorithme de d\u00e9tection de cycle. Le principe est de parcourir la liste des \u00e9tats avec une tortue (qui avance de 1 en 1) et un li\u00e8vre (qui avance par pas de 2). Si la tortue et le li\u00e8vre se rencontrent cela signifie qu'un cycle existe. Proposer une impl\u00e9mentation de ce nouvel algorithme.</p> </li> </ol>"},{"location":"mp2i/hash/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/induction/","title":"C14 Induction","text":"<p>\"We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil.\"D. Knuth(in Structured Programming with go to statements Computing Surveys, Vol 6, No 4 1974)</p>"},{"location":"mp2i/induction/#cours","title":"Cours","text":"<p>Support de cours chapitre 14 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/induction/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD14 </p>"},{"location":"mp2i/induction/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"mp2i/induction/#exercice-1-relation-dordre","title":"Exercice 1 : Relation d'ordre","text":"<p>On consid\u00e8re une relation binaire \\(\\mathcal{R}\\) sur un ensemble fini \\(\\{x_0,\\dots,x_{n-1}\\}\\) repr\u00e9sent\u00e9e par une matrice \\(R\\) de taille \\(n \\times n\\) telle que \\(R_{ij} = 1\\) si \\(x_i \\mathcal{R} x_j\\) et 0 sinon pour tout \\(0\\leqslant i \\leqslant n-1\\) et \\(0\\leqslant j \\leqslant n-1\\). On suppose la matrice \\(R\\) repr\u00e9sent\u00e9e par un tableau de bool\u00e9enslin\u00e9aris\u00e9e en C (donc de taille \\(n^2\\)).</p> <ol> <li> <p>Ecrire la fonction <code>bool est_reflexive(bool * matr, int n)</code> qui prend en entr\u00e9e la matrice \\(R\\) et l'entier \\(n\\) et renvoie <code>true</code> si et seulement \\(\\mathcal{R}\\) est r\u00e9fl\u00e9xive.</p> </li> <li> <p>Ecrire la fonction <code>bool est_antisym\u00e9trique(bool * matr, int n)</code> qui prend en entr\u00e9e la matrice \\(R\\) et l'entier \\(n\\) et renvoie <code>true</code> si et seulement \\(\\mathcal{R}\\) est antisym\u00e9trique.</p> </li> <li> <p>Ecrire la fonction <code>bool est_transitive(bool * matr, int n)</code> qui prend en entr\u00e9e la matrice \\(R\\) et l'entier \\(n\\) et renvoie <code>true</code> si et seulement \\(\\mathcal{R}\\) est transitive.</p> </li> <li> <p>Ecrire une fonction <code>bool * cree_matrice(int n)</code> qui prend en argument un entier \\(n\\) et renvoie la matrice correspondante \u00e0 la relation divise sur l'ensemble des entiers naturels de \\(1\\) \u00e0 \\(n\\). V\u00e9rifier \u00e0 l'aide des fonctions pr\u00e9c\u00e9dentes qu'on obtient bien une relation d'ordre.</p> </li> </ol>"},{"location":"mp2i/induction/#exercice-2-definition-inductive-des-entiers-naturels","title":"Exercice 2 : D\u00e9finition inductive des entiers naturels","text":"<p>On peut d\u00e9finir les entiers naturels de fa\u00e7on inductive  (\u00e0 la fa\u00e7on de Peano):</p> <ul> <li>0 est un entier naturel (axiome)</li> <li>tout entier naturel poss\u00e8de un successeur (constructeur d'arit\u00e9 1)</li> </ul> <p>Ce qui correspond en OCaml au type: <pre><code>type peano =\n  |Z\n  |S of peano;;\n</code></pre></p> <p>o\u00f9 on a not\u00e9 <code>Z</code> l'entier 0 et <code>S</code> la r\u00e8gle de construction.</p> <ol> <li> <p>Ecrire une fonction <code>int_to_peano : int -&gt; peano</code> qui prend en entr\u00e9e un entier naturel <code>n</code> et renvoie l'entier de peano correspondant. Par exemple <code>int_to_peano 4</code> renvoie  <code>S (S (S (S Z)))</code>.</p> </li> <li> <p>Ecrire une fonction <code>peano_to_int : peano -&gt; int</code> qui prend en entr\u00e9e un entier de peano et renvoie l'entier naturel correspondant. Par exemple <code>peano_to_int S (S (S (S Z)))</code> renvoie 4.</p> </li> <li> <p>Ecrire une fonction <code>add_peano : peano -&gt; peano -&gt; peano</code> qui renvoie la somme de deux entiers de peano sous la forme d'un entier de peano. Par exemple <code>add (S (S (S Z))) (S (S (S (S Z))))</code> renvoie S (S (S (S (S (S (S Z))))));;</p> </li> </ol>"},{"location":"mp2i/induction/#exercice-3-notation-polonaise-inverse","title":"Exercice 3 : Notation polonaise inverse","text":"<p>La notation polonaise inverse  est une m\u00e9thode d'\u00e9criture des expressions math\u00e9matiques qui n'utilise pas de parenth\u00e8ses et qui de plus se calcule sans r\u00e8gles de priorit\u00e9. Prenons un exemple, l'expression \\((3+7)\\times5\\), s'\u00e9crit en notation polonaise invers\u00e9e : \\(3\\ 7 + 5\\ \\times\\). C'est \u00e0 dire qu'on donne d'abord les deux op\u00e9randes puis l'op\u00e9ration. Le but de l'exercice est d'\u00e9crire une fonction en OCaml permettant d'\u00e9valuer une expression arithm\u00e9tique en notation polonaise inverse sur les entiers et ne contenant que les op\u00e9rations \\(+\\) (<code>Add</code>), \\(-\\) (<code>Sub</code>) et \\(\\times\\) (<code>Mul</code>). De telles expressions peuvent \u00eatre repr\u00e9sent\u00e9es par le type <code>elt list</code> de Ocaml o\u00f9 <code>elt</code> est d\u00e9fini par <code>type elt = V of int | Add | Sub | Mul</code>.</p> <ol> <li> <p>Ecrire une fonction <code>string_to_npi: str -&gt; elt list</code> qui prend en argument une chaine de caract\u00e8re et renvoie la liste la repr\u00e9sentant. Par exemple <code>string_to_npi \"3 7 + 5 *\"</code> renvoie <code>[V 3; V 7; Add; V 5; Mul]</code></p> <p>Aide</p> <p>Utiliser <code>String.split_on_char</code> afin de r\u00e9cup\u00e9rer les diff\u00e9rentes composantes de l'expression</p> </li> <li> <p>Afin d'\u00e9valuer une expression en npi, on peut utiliser une pile : on parcourt l'expression et si on rencontre une op\u00e9rande on l'empile, si on rencontre une op\u00e9ration on l'effectue entre les deux derniers \u00e9l\u00e9ments empil\u00e9s et on empile le r\u00e9sultat. Mettre en oeuvre cette strat\u00e9gie afin d'\u00e9valuer une expression en npi en \u00e9crivant une fonction <code>evalue_npi : elt list -&gt; int</code> qui prend en argument une liste repr\u00e9sentant une expression en npi et renvoie le r\u00e9sultat de con \u00e9valuation. Par exemple <code>evalue_npi [V 3; V 7; Add; V 5; Mul]</code> renvoie <code>50</code>.</p> </li> <li> <p>Evaluer l'expression suivante : <code>5 13 + 7 2 - * 14 6 + 8 19 - * 11 2 + * + 19 *</code> et v\u00e9rifier votre r\u00e9sultat :   </p> </li> </ol>"},{"location":"mp2i/induction/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/introC/","title":"C1 Premiers pas en langage C","text":"<p>\"The only way to learn a new programming language is by writing programs in it\"B. Kernighan &amp; D. Ritchie(in the C programming language 1978)</p>"},{"location":"mp2i/introC/#cours","title":"Cours","text":"<p>Support de cours chapitre 1 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/introC/#exemples-du-cours","title":"Exemples du cours","text":"<ul> <li> Hello world <pre><code>#include &lt;stdio.h&gt;\n\nint n = 42;\n\nvoid incremente(int n)\n{ \n    n = n + 1;\n    printf(\"Valeur de n dans la fonction = %d\\n\",n)\n}\n\nint main()\n{\n    incremente(n);\n    printf(\" Valeur de n = %d\\n\",n);\n}\n</code></pre> </li> <li> Somme des entiers de 1 \u00e0 100 <pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    int somme = 0;\n    const int nmax = 100;\n    for (int i = 1; i &lt;= nmax; i = i + 1)\n    {\n        somme = somme + i;\n    }\n    printf(\"1+2+...+100 = %d\\n\", somme);\n    return 0;\n}\n</code></pre> </li> <li> Fonction Syracuse <pre><code>#include &lt;stdio.h&gt;\n// S(n) = n/2 si n est pair et 3*n+1 sinon\nint syracuse(int n)\n{\n    if (n % 2 == 0) //(% est l'op\u00e9rateur modulo, == le test d'\u00e9galit\u00e9)\n    {\n        return n / 2;\n    }\n    else\n    {\n        return 3 * n + 1;\n    }\n}\nint main()\n{\n    int n = 42;\n    printf(\"Syracuse(%d) = %d \\n\",n, syracuse(n));\n}\n</code></pre> </li> </ul>"},{"location":"mp2i/introC/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD1 </p>"},{"location":"mp2i/introC/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"mp2i/introC/#exercice-1-premieres-compilations","title":"Exercice 1 : Premi\u00e8res compilations","text":"<ol> <li> <p>Lancer VS Code et dans le menu <code>Fichier &gt;  Ouvrir le dossier</code> (raccourci Ctrl\uff0bK, Ctrl\uff0bO) ouvrir un r\u00e9pertoire de travail pour ce premier TP (par exemple <code>~/LangageC/TP1</code>). </p> <p>Note</p> <p>Une bonne habitude de Travail avec VS Code est d'ouvrir directement un r\u00e9pertoire de travail (celui \u00e0 partir duquel les compilations seront faites).</p> </li> <li> <p>Dans l'onglet extension (accessible via le raccourci clavier Ctrl\uff0bShift\uff0bX), chercher \"C\" et installer \"C/C++ IntelliSense, debugging, and code browsing.\". Cette extension permet de b\u00e9n\u00e9ficier de la coloration syntaxique et de la d\u00e9tection des erreurs dans VS Code.</p> </li> <li> <p>Pour chacun des trois programmes vus en cours et disponibles ci-dessus</p> <ol> <li>Le copier dans VS code et l'enregistrer (la coloration syntaxique devrait \u00eatre visible)</li> <li> <p>Dans le terminal de VS Code le compiler avec <code>gcc</code></p> <p>Attention</p> <p>On rappelle qu'il est tr\u00e8s fortement recommand\u00e9 de toujours compiler avec les options <code>-Wall</code> et <code>-Wextra</code> et que l'option <code>-o</code> permet de sp\u00e9cifier un nom pour l'ex\u00e9cutable produit lors de la compilation</p> </li> <li> <p>Lancer l'ex\u00e9cution</p> <p>Aide</p> <p>Il faut sp\u00e9cifier le chemin vers l'ex\u00e9cutable, ici <code>./</code></p> </li> </ol> </li> </ol>"},{"location":"mp2i/introC/#exercice-2-premiers-programmes","title":"Exercice 2 : Premiers programmes","text":"<ol> <li> <p>Ecrire un programme qui affiche \u00e0 l'\u00e9cran <code>\"Mon tout premier programme en C\"</code></p> </li> <li> <p>Ajouter dans votre programme les d\u00e9claration des variables  enti\u00e8res <code>a</code> valant 2024 et  <code>b</code> valant 42. </p> </li> <li> <p>Faire afficher \u00e0 l'\u00e9cran la valeur de \\(2024 \\times 42\\).</p> </li> <li> <p>Ecrire une instruction conditionnelle qui affiche dans le terminal <code>divisible</code> si 2024 est divisible par 42 et <code>non divisible</code> sinon.</p> </li> <li> <p>D\u00e9clarer une variable enti\u00e8re <code>s</code> valant 0. Ecrire une boucle qui permet de calculer la somme des entiers divisibles par 7 et par 13 de 1 \u00e0 2024. V\u00e9rifier votre r\u00e9ponse :   </p> </li> </ol>"},{"location":"mp2i/introC/#exercice-3-quelques-fonctions-pour-demarrer","title":"Exercice 3 : Quelques fonctions pour d\u00e9marrer","text":"<p>Note</p> <p>Pour chaque question, \u00e9crire  le code de la fonction puis la tester dans le <code>main</code> en saisissant \u00e9ventuellement les arguments au clavier \u00e0 l'aide de <code>scanf</code>.</p> <ol> <li> <p>Ecrire une fonction <code>aire_disque</code> qui prend en argument un flottant <code>r</code> et renvoie l'aire du disque de rayon <code>r</code>, on d\u00e9finira une constante flottante <code>pi</code> de valeur <code>3.14159</code> qui sera utilis\u00e9 dans le calcul.</p> </li> <li> <p>Ecrire une fonction <code>valeur_absolue</code> qui prend en argument un flottant <code>x</code> et renvoie sa valeur absolue.</p> <p>Aide</p> <p>On rappelle que : \\(|x| = \\left\\{ \\begin{array}{rl} -x &amp; \\mathrm{\\ si\\ } x&lt;0 \\\\ x &amp; \\mathrm{\\ sinon} \\end{array}\\right.\\)</p> </li> <li> <p>Ecrire une fonction <code>est_triangle</code> qui prend en argument trois entiers <code>a</code>,<code>b</code> et <code>c</code> et qui renvoie <code>true</code> si ces trois entiers peuvent \u00eatre les longueurs des trois c\u00f4t\u00e9s d'un triangle. </p> <p>Aide</p> <p>Cela revient \u00e0 v\u00e9rifier que les trois entiers v\u00e9rifient l'in\u00e9galit\u00e9 triangulaire ou encore que le plus grand des trois est inf\u00e9rieur \u00e0 la somme des deux autres.</p> </li> <li> <p>On consid\u00e8re le programme de calcul suivant :</p> <ul> <li>choisir un nombre entier</li> <li>ajouter 3 \u00e0 ce nombre</li> <li>multiplier par le nombre choisi au d\u00e9part</li> <li>soustraire 9</li> </ul> <p>Ecrire une fonction <code>calcul</code> qui prend en entr\u00e9e le nombre choisi au d\u00e9part et renvoie le r\u00e9sultat du programme de calcul.</p> </li> <li> <p>On appelle factorielle d'un entier \\(n\\) et on note \\(n!\\) le produit de cet entier par tous ceux qui le pr\u00e9c\u00e8dent \u00e0 l'exception de z\u00e9ro. Et on convient d'autre part que \\(0!=1\\). Par exemple \\(5! = 5 \\times 4 \\times \\times 3 \\times 2 \\times 1 = 120\\). Ecrire une fonction <code>factorielle</code> qui prend en argument un entier <code>n</code> et renvoie sa factorielle.</p> </li> <li> <p>Ecrire une fonction <code>bissextile</code> qui prend en argument un entier <code>annee</code> et renvoie <code>true</code> si cette ann\u00e9e est bissextile et <code>false</code> sinon.</p> <p>Aide</p> <p>Une ann\u00e9e est bissextile si elle est divisible par 4 mais pas par 100 ou s'il est divisible par 400.</p> </li> <li> <p>Ecrire une fonction <code>maxint</code> qui prend en argument deux entiers <code>a</code> et <code>b</code> et renvoie le maximum de ces deux entiers.</p> </li> <li> <p>Ecrire une fonction <code>xor</code> qui prend en argument deux bool\u00e9ens <code>x</code> et <code>y</code> et renvoie vraie si <code>x</code> ou <code>y</code> vaut vraie mais pas les deux \u00e0 la fois.</p> </li> <li> <p>Ecrire une fonction qui prend en argument un entier et renvoie <code>true</code> si cet entier est divisible par 7 et qu'il se termine par 9.</p> </li> </ol>"},{"location":"mp2i/introC/#exercice-4-ecrire-quelques-boucles","title":"Exercice 4 : Ecrire quelques boucles","text":"<ol> <li>Ecrire une fonction prenant en entr\u00e9e un entier <code>n</code> et qui affiche la table de multiplication de cet entier.</li> <li>La coupe du monde de football se d\u00e9roule tout les quatre ans et sa premi\u00e8re \u00e9dition date de 1930. D'autre part, \u00e0 cause de la seconde guerre mondiale, la comp\u00e9tition n'a pas eu lieu en 1942 et en 1946. Ecrire un programme  qui liste toutes les ann\u00e9es o\u00f9 la coupe du monde s'est d\u00e9roul\u00e9e de 1930 \u00e0 nos jours. Compl\u00e9ter ce programme de fa\u00e7on \u00e0 afficher le num\u00e9ro de l'\u00e9dition pour chaque ann\u00e9e.</li> <li>Ecrire une fonction prenant en entr\u00e9e un entier \\(n\\) et renvoyant le plus petit entier \\(k\\) tel que \\(2^k \\geq n\\).</li> <li>Ecrire un programme permettant de calculer la somme suivante : \\(\\displaystyle{\\sum_{k=1}^{100} k^2}\\).</li> </ol>"},{"location":"mp2i/introC/#exercice-5-un-peu-de-dessin","title":"Exercice 5 : Un peu de dessin","text":"<ol> <li> <p>Ecrire une fonction <code>carre_plein</code> prenant comme param\u00e8tre un entier <code>cote</code> et un caract\u00e8re <code>car</code> et permettant d'afficher un carr\u00e9 de c\u00f4t\u00e9 <code>cote</code> rempli de caract\u00e8res <code>car</code>. Par exemple, <code>carre(5,'C')</code> produit l'affichage suivant : <pre><code>CCCCC\nCCCCC\nCCCCC\nCCCCC\nCCCCC\n</code></pre></p> </li> <li> <p>Ecrire une fonction <code>rectangle_creux</code>  prenant trois param\u00e8tres : deux entiers <code>largeur</code> et <code>longueur</code> et un caract\u00e8re <code>car</code> permettant d'afficher un rectangle creux de dimensions <code>largeur</code> sur <code>longueur</code> dont la bordure est constitu\u00e9 de caract\u00e8res <code>car</code>. Par exemple <code>rectangle_creux(3,7,'~')</code> devrait produire l'affichage suivant : <pre><code>~~~~~~~\n~     ~\n~~~~~~~\n</code></pre></p> </li> <li> <p>De la m\u00eame fa\u00e7on \u00e9crire une fonction <code>triangle</code> prenant comme param\u00e8tre un entier <code>hauteur</code> et un caract\u00e8re <code>car</code> telle que <code>triangle(6,'*')</code> produise l'affichage suivant : <pre><code>     *\n    ***\n   *****\n  *******\n *********\n***********\n</code></pre></p> </li> </ol>"},{"location":"mp2i/introC/#exercice-6-puissance","title":"Exercice 6 : Puissance","text":"<ol> <li>En supposant <code>n</code> entier et positif, \u00e9crire, une fonction <code>puissance_positif</code> qui prend en entr\u00e9e un nombre <code>x</code> et <code>n</code>  et renvoie \\(x^n\\).</li> <li> <p>Ecrire une nouvelle fonction <code>puissance</code> qui prend en argument un nombre <code>x</code> et un entier <code>n</code> et renvoie \\(x^n\\).</p> <p>Aide</p> <p>Attention \u00e0 bien traiter tous les cas possibles.</p> </li> </ol>"},{"location":"mp2i/introC/#exercice-7-nombres-premiers","title":"Exercice 7 : Nombres premiers","text":"<ol> <li> <p>Ecrire une fonction <code>racine</code> qui prend en entr\u00e9e un entier <code>n</code> positif et renvoie le plus grand entier <code>k</code> tel que <code>k * k &lt;= n</code>.     Par exemple, <code>racine(9)</code> renvoie 3 et <code>racine(18)</code> renvoie 4.</p> </li> <li> <p>Ecrire une fonction qui prend en argument un nombre et renvoie <code>true</code> lorsque ce nombre est premier et <code>false</code> sinon.</p> <p>Aide</p> <p>On rappelle qu'un nombre est premier s'il poss\u00e8de exactement deux diviseurs : 1 et lui-m\u00eame. On peut donc se contenter de tester si les entiers \\(k\\) compris entre 2 et la partie enti\u00e8re de \\(\\sqrt{n}\\) inclus divisent \\(n\\) et utiliser la question 1.</p> </li> <li> <p>Ecrire une fonction <code>somme_premiers</code> qui prend en entr\u00e9e un entier <code>n</code> et calcule la somme des nombres premiers inf\u00e9rieurs ou \u00e9gaux \u00e0 <code>n</code>. Par exemple <code>somme_premiers(10)</code> vaut <code>2 + 3 + 5 + 7 = 17</code></p> </li> <li> <p>Tester votre fonction en calculant <code>somme_premiers(10000)</code> : </p> </li> </ol>"},{"location":"mp2i/introC/#exercice-8-conjecture-de-syracuse","title":"Exercice 8 : Conjecture de syracuse","text":"<p>La conjecture de syracuse est l'hypoth\u00e8se selon laquelle la suite d\u00e9finie \\((u_n)_{n \\in \\mathbb{N}}\\) d\u00e9finie par son premier terme \\(u_0\\) et la relation de r\u00e9currence : \\(u_{n+1} = \\left\\{ \\begin{array}{ll} \\dfrac{u_n}{2} &amp; \\mathrm{\\ si\\ } u_n \\mathrm{\\ est \\ paire} \\\\ 3u_n+1 &amp; \\mathrm{\\ sinon} \\\\ \\end{array} \\right.\\) atteint 1. Dans la suite de cette exercice on supposera cette conjecture v\u00e9rifi\u00e9e (bien qu'elle n'ait pas \u00e9t\u00e9 math\u00e9matiquement prouv\u00e9e, la conjecture a \u00e9t\u00e9 v\u00e9rifi\u00e9e num\u00e9riquement pour tous les entiers jusqu'\u00e0 \\(2^{58}\\)).</p> <ol> <li>Ecrire la fonction <code>terme_suivant</code> qui prend en argument un entier \\(n\\) et renvoie \\(\\dfrac{n}{2}\\) si \\(n\\) est paire et \\(3n+1\\) sinon.</li> <li> <p>Ecrire une fonction <code>duree_vol</code> qui prend en argument un entier \\(u_0\\) et renvoie le plus petit entier \\(n\\) appel\u00e9 dur\u00e9e de vol tel que \\(u_n=1\\). Par exemple <code>duree_vol(7)</code> doit renvoyer 16, en effet les termes successif de la suite sont <code>7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4 ,2, 1</code>. Tester votre fonction en calculant la dur\u00e9e de vol de 123456789 :  V\u00e9rifier votre r\u00e9ponse :   </p> </li> <li> <p>Quelle est la plus grande dur\u00e9e de vol lorsque \\(1 \\leq u_0 \\leq 10000\\) ? V\u00e9rifier votre r\u00e9ponse :   </p> </li> <li> <p>V\u00e9rifier que cette dur\u00e9e de vol maximale est atteinte pour une seule valeur de \\(u_0\\), quelle est cette valeur ? V\u00e9rifier votre r\u00e9ponse :   </p> </li> <li> <p>L'altitude maximale est la valeur maximale atteinte par la suite de Syracuse. Ecrire une fonction prenant \\(u_0\\) et renvoyant l'altitude maximale atteinte. Par exemple l'altitude maximal de \\(u_0 = 7\\) est \\(52\\) (voir les termes de cette suite \u00e0 la question 2.).</p> </li> <li> <p>Quelle est l'altitude maximale de \\(9331\\) ? V\u00e9rifier votre r\u00e9ponse :   </p> </li> </ol>"},{"location":"mp2i/introC/#exercice-9-simulation-dun-lancer-de-de","title":"Exercice 9 : Simulation d'un lancer de d\u00e9","text":"<p>Au jeu des \"petits chevaux\", le joueur doit lancer un d\u00e9 \u00e0 six faces  et obtenir 6 pour \"sortir un de ses chevaux de l'\u00e9curie\". On se demande, en moyenne combien de coups  il faut pour obtenir un 6 sur un lancer de d\u00e9.</p> <ol> <li> <p>Ecrire une fonction <code>lancer_de</code> qui ne prend aucun argument et renvoie un nombre choisi au hasard entre 1 et 6.</p> <p>Aide</p> <ul> <li>La fonction <code>rand()</code> du langage C renvoie un entier al\u00e9atoire, entre 0 et le plus grand entier repr\u00e9sentable. On peut ensuite utiliser un modulo pour se ramener dans un intervalle de longueur 6.</li> <li>Une m\u00e9thode possible d'initialisation du g\u00e9n\u00e9rateur al\u00e9atoire de nombre est d'utiliser le temps : <code>srand(time(NULL));</code> disponible apr\u00e8s <code>#include &lt;time.h&gt;</code></li> </ul> </li> <li> <p>Ecrire une fonction, <code>obtenir6</code> qui ne prend aucun argument et qui renvoie le nombre lancer effectu\u00e9 pour obtenir une premi\u00e8re fois 6.</p> </li> <li> <p>Calculer la moyenne du nombre de coups n\u00e9cessaire pour obtenir un six pour un grand nombre de parties (par exemple 10000). Pouvez-vous retrouver ce r\u00e9sultat en utilisant vos connaissances en probabilit\u00e9s ?</p> </li> </ol>"},{"location":"mp2i/introC/#exercice-10-somme-des-elements-dun-tableau","title":"Exercice 10 : Somme des \u00e9l\u00e9ments d'un tableau","text":"<ol> <li> <p>Ecrire une fonction <code>somme</code> qui prend en argument un tableau ainsi que sa taille et renvoie la somme des \u00e9l\u00e9ments de ce tableau.</p> </li> <li> <p>Cr\u00e9er un tableau de  <code>carres</code> de taille 100 et gr\u00e2ce \u00e0 une boucle l'initialiser de fa\u00e7on \u00e0 ce que <code>carres[i]=i*i</code>.</p> </li> <li> <p>Calculer la somme des carres des entiers de 1 \u00e0 100.</p> </li> </ol>"},{"location":"mp2i/introC/#exercice-11-appartient-a-un-tableau","title":"Exercice 11 : Appartient \u00e0 un tableau","text":"<ol> <li> <p>Ecrire une fonction <code>appartient</code> qui prend en argument un tableau <code>tab</code> (et sa taille <code>t</code>) ainsi qu'un entier <code>n</code> et qui renvoie <code>true</code> si <code>n</code> est dans le tableau <code>tab</code> et <code>false</code> sinon.</p> </li> <li> <p>En utilisant cette fonction et le tableau <code>carres</code> de la fonction pr\u00e9c\u00e9dente, v\u00e9rifier que 5041 est un carr\u00e9 parfait mais pas  6726.</p> </li> </ol>"},{"location":"mp2i/introC/#exercice-12-longueur-dune-chaine-de-caracteres","title":"Exercice 12 : Longueur d'une chaine de caract\u00e8res","text":"<p>Ecrire une fonction <code>my_strlen</code> qui prend en argument une chaine de caract\u00e8res et renvoie sa longueur</p> <p>Aide</p> <p>On rapelle qu'une chaine de caract\u00e8res en C se termine par le caract\u00e8re nul <code>'\\0'</code></p>"},{"location":"mp2i/introC/#exercice-13-manipulation-des-chaines-de-caracteres","title":"Exercice 13 : Manipulation des chaines de caract\u00e8res","text":"<ol> <li> <p>Ecrire une fonction <code>retourne</code> qui prend en argument une chaine de caract\u00e8res et affiche cette chaine \u00e9crite \u00e0 l'envers. Par exemple <code>retourne(\"Bonjour\")</code> affiche <code>\"ruojnoB\"</code>.</p> </li> <li> <p>Ecrire une fonction <code>palindrome</code> qui prend en argument une chaine de caract\u00e8res et renvoie <code>true</code> si cette chaine est un palindrome (c'est-\u00e0-dire qu'elle se lit indiff\u00e9remment de gauche \u00e0 droite ou de droite \u00e0 gauche) et <code>false</code> sinon. Par exemple <code>palindrome(\"radar\")</code> renvoie <code>true</code>.</p> </li> </ol>"},{"location":"mp2i/introC/#exercice-14-nombre-parfait","title":"Exercice 14 : Nombre parfait","text":"<p>Un nombre parfait est un entier positif \u00e9gal \u00e0 la  la somme de ses diviseurs stricts (c'est-\u00e0-dire autres que lui-m\u00eame). Par exemple, 6 est un nombre parfait car \\(6 = 3 + 2 + 1\\). </p> <ol> <li>\u00c9crire une fonction <code>parfait</code> qui renvoie <code>true</code> si l'entier positif donn\u00e9 en argument est parfait et <code>false</code> sinon.</li> <li>Utiliser cette fonction pour v\u00e9rifier que \\(8128\\) est un nombre parfait mais pas \\(2023\\).</li> </ol>"},{"location":"mp2i/introC/#exercice-15-triangle-de-pascal","title":"Exercice 15 : Triangle de Pascal","text":"<p>Ecrire un programme qui prend en argument un entier \\(1 \\leq n \\leq 10\\) et affiche les \\(n\\) premi\u00e8res lignes du triangle de Pascal. Par exemple <code>pascal(4)</code> affiche : <pre><code>1\n1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1\n</code></pre></p> <p>Aide</p> <ul> <li>On rappelle que le coefficient situ\u00e9 ligne \\(n\\) et colonne \\(k\\) not\u00e9 \\(\\displaystyle{\\binom{n}{k}}\\) se d\u00e9duit de ceux de la ligne pr\u00e9c\u00e9dente gr\u00e2ce \u00e0 la formule de Pascal : \\(\\displaystyle{\\binom{n}{k} = \\binom{n-1}{k-1} + \\binom{n-1}{k}}\\)</li> <li>On pourra utiliser deux tableaux, l'un repr\u00e9sentant la ligne pr\u00e9c\u00e9dente et un second la ligne en cours de construction.</li> </ul>"},{"location":"mp2i/introC/#exercice-16-tableau-trie","title":"Exercice 16 : Tableau tri\u00e9","text":"<p>Ecrire une fonction <code>est_trie</code> qui prend en argument un tableau d'entiers (et sa taille) et renvoie <code>true</code> si ce tableau est tri\u00e9 (dans l'ordre croissant ou d\u00e9croissant) et <code>false</code> sinon. </p> <p>Aide</p> <p>On pourra dans un premier temps s'aider de deux fonctions <code>est_trie_croissant</code> et <code>est_trie_decroissant</code>.</p>"},{"location":"mp2i/introC/#exercice-17-nombre-doccurences","title":"Exercice 17 : Nombre d'occurences","text":"<ol> <li> <p>Ecrire une fonction <code>nb_occurrences</code> qui prend en argument un tableau d'entiers <code>tab</code> (et sa taille) ainsi qu'un entier <code>n</code> et renvoie le nombre d'apparitions de <code>n</code> dans le tableau <code>tab</code>. Par exemple si <code>tab</code> est le tableau <code>{2, 18, 7, 2, 11, 7, 4, 7, -1, 3}</code> (de taille <code>10</code>) alors <code>nb_occurrences(tab,10,7)</code> renvoie 3 et  <code>nb_occurrences(tab,10,13)</code> renvoie 0.</p> </li> <li> <p>Ecrire une fonction similaire <code>compte_caractere</code> qui prend en argument une chaine de caract\u00e8res <code>chaine</code> et un caract\u00e8re <code>car</code> et compte le nombre d'apparitions de <code>car</code> dans <code>chaine</code>. A-t-on besoin cette fois de passer en argument la taille de la chaine ? Pourquoi ?</p> </li> </ol>"},{"location":"mp2i/introC/#exercice-18-affichage-en-zigzag","title":"Exercice 18 : Affichage en zigzag","text":"<p>Ecrire en C une fonction de signature \u00a0<code>void zigzag(char s[], int n)</code> qui prend en argument une chaine de caract\u00e8res <code>s</code> et un entier <code>n</code> et affiche en zigzag et sur n lignes la chaine de caract\u00e8res <code>s</code> par exemple l'affichage de la <code>BONNE RENTREE AUX MP2I !\"</code> sur 4 lignes doit produire l'affichage suivant dans le terminal : <pre><code>B     R     E     M     \n O     E   E       P   !\n  N E   N R   A X   2   \n   N     T     U     I \n</code></pre></p> <p>Aide</p> <p>On pourra d\u00e9finir dans la fonction une matrice de caract\u00e8res qu'on remplira correctement avec les lettres de la chaine de caract\u00e8res avant de l'afficher.</p>"},{"location":"mp2i/introC/#exercice-19-tri-par-insertion","title":"Exercice 19 : Tri par insertion","text":"<p>L'algorithme du tri par insertion permet de trier en place un tableau de taille \\(n\\). Le principe est de consid\u00e9rer qu'\u00e0 l'\u00e9tape \\(i\\),  la partie du tableau situ\u00e9e avant l'indice \\(i\\) est d\u00e9j\u00e0 tri\u00e9e et on ins\u00e8re l'\u00e9l\u00e9ment situ\u00e9 \u00e0 la position d'indice \\(i\\) \u00e0 la bonne position dans cette partie. Pour r\u00e9aliser cette insertion, on \u00e9change l'\u00e9l\u00e9ment d'indice \\(i\\) avec son voisin de gauche tant qu'il lui est sup\u00e9rieur et que le d\u00e9but de liste n'est pas atteint. Par exemple sur la tableau \\(\\{12, 10, 18, 11, 14\\}\\) et en d\u00e9limitant la partie tri\u00e9e par le symbole \\(\\color{red}{|}\\):</p> <ul> <li>Etape 0 : la partie situ\u00e9 avant l'indice 0 est vide (donc d\u00e9j\u00e0 tri\u00e9e), on y ins\u00e8re le 12 : \\(\\{\\textcolor{green}{12}, \\textcolor{red}{|} 10, 18, 11, 14\\}\\) </li> <li>Etape 1 : on ins\u00e8re l'\u00e9l\u00e9ment d'indice 1 dans la partie tri\u00e9, pour cela on l'\u00e9change avec son voisin tant qu'il lui est inf\u00e9rieur (et que le d\u00e9but de la liste n'est pas atteint) :<ul> <li>\\(\\{12,  \\textcolor{green}{10} \\textcolor{red}{|} , 18, 11, 14\\}\\) \u00e9change car \\(10&lt;12\\)</li> <li>\\(\\{\\textcolor{green}{10},  12 \\textcolor{red}{|} , 18, 11, 14\\}\\) on s'arr\u00eate car le d\u00e9but de liste est atteint</li> </ul> </li> <li>Etape 2 : on r\u00e9p\u00e8te le processus avec l'\u00e9l\u00e9ment d'indice 2 :<ul> <li>\\(\\{10,  12  , \\textcolor{green}{18} \\textcolor{red}{|}, 11, 14\\}\\) aucun \u00e9change \u00e0 r\u00e9aliser car \\(12&lt;18\\)</li> </ul> </li> <li>Etape 3 : on r\u00e9p\u00e8te le processus avec l'\u00e9l\u00e9ment d'indice 3 :<ul> <li>\\(\\{10,  12  , 18,  \\textcolor{green}{11}\\textcolor{red}{|}, 14\\}\\)  \u00e9change  car \\(11&lt;18\\)</li> <li>\\(\\{10,  12  , \\textcolor{green}{11}, 18  \\textcolor{red}{|}, 14\\}\\)  \u00e9change  car \\(11&lt;12\\)</li> <li>\\(\\{10,  \\textcolor{green}{11}, 12  ,  18  \\textcolor{red}{|}, 14\\}\\)  arr\u00eat   car \\(11&gt;10\\)</li> </ul> </li> <li>Etape 4 : on r\u00e9p\u00e8te le processus avec l'\u00e9l\u00e9ment d'indice 4 :<ul> <li>\\(\\{10,  11, 12  ,  18  , \\textcolor{green}{14}\\textcolor{red}{|}\\}\\)  echange   car \\(14&lt;18\\)</li> <li>\\(\\{10,  11, 12  ,  \\textcolor{green}{14}, 18   \\textcolor{red}{|}\\}\\)  arr\u00eat   car \\(14&gt;12\\)</li> </ul> </li> </ul> <p>Le but de l'exercice est de programmer cet algorithme de tri en C.</p> <ol> <li> <p>Ecrire une fonction <code>echange</code> qui prend en argument un tableau <code>tab</code>, deux entiers <code>i</code> et <code>j</code> et qui \u00e9change les \u00e9l\u00e9ments d'indice <code>i</code> et <code>j</code> de ce tableau. On pourra dans un second temps passer aussi en argument la taille du tableau et v\u00e9rifier que <code>i</code> et <code>j</code> sont bien inf\u00e9rieurs \u00e0 cette taille avant de proc\u00e9der \u00e0 l'\u00e9change.</p> </li> <li> <p>Ecrire une fonction <code>insere</code> qui prend en argument un tableau <code>tab</code> et un indice <code>i</code> et qui ins\u00e8re l'\u00e9l\u00e9ment d'indice <code>i</code> \u00e0 la bonne place dans la partie du tableau situ\u00e9 avant l'indice <code>i</code> en suposant que cette partie est tri\u00e9e. On rappelle que cette insertion s'effectue en echangeant l'\u00e9l\u00e9ment avec son voisin de gauche tant qu'il lui est inf\u00e9rieur et que le d\u00e9but du tableau n'est pas atteint. Par exemple si <code>tab={5,7,11,6,19,7}</code> alors apr\u00e8s <code>insere(tab,3)</code> <code>tab{5,6,7,11,19,7}</code>.</p> </li> <li> <p>Ecrire une fonction <code>tri_insertion</code> qui prend en argument un tableau et sa taille et le trie \u00e0 l'aide de l'algorithme du tri par insertion.</p> </li> </ol>"},{"location":"mp2i/introC/#exercice-20-crible-derastothene","title":"Exercice 20 : Crible d'Erastoth\u00e8ne","text":"<p>On rappelle qu'un nombre premier est un entier naturel ayant exactement deux diviseurs 1 et lui-m\u00eame, ainsi 13 est premier mais pas 15. Le crible d'Erastoth\u00e8ne est un algorithme permettant de trouver tous les nombres premiers inf\u00e9rieurs ou \u00e9gaux \u00e0 un entier <code>n</code> donn\u00e9. </p> <p>Algorithme</p> <ul> <li>on cr\u00e9e un tableau de bool\u00e9ens <code>premiers</code> de taille <code>n+1</code></li> <li>on initialise le tableau \u00e0 <code>true</code> sauf <code>premiers[0]</code> et <code>premiers[1]</code> qui sont \u00e0 <code>false</code> puisque  \\(0\\) et 1 ne sont pas premiers.</li> <li>on parcourt ce tableau si <code>premiers[i]</code> est \u00e0 <code>true</code> alors on met tous ses multiples (sauf lui-m\u00eame) \u00e0 <code>false</code></li> <li>le parcours s'arr\u00eate d\u00e8s que l'entier <code>i</code> est sup\u00e9rieur \u00e0 \\(\\sqrt{n}\\).  </li> </ul> <ol> <li> <p>Ecrire en C une fonction <code>crible</code> qui prend en param\u00e8tre un entier <code>n</code> et impl\u00e9mente cet algorithme. L'utiliser pour afficher les nombres premiers inf\u00e9rieurs \u00e0 100.</p> <p>Aide</p> <p>Vous devriez obtenir : <code>2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97</code></p> </li> <li> <p>Ecrire en C une fonction <code>somme_premiers</code> qui prend en argument un entier <code>seuil</code> et renvoie la somme de tous les nombres premiers inf\u00e9rieurs ou \u00e9gaux \u00e0 <code>seuil</code>. Par exemple <code>somme_premiers(100)</code> renvoie <code>1060</code></p> </li> </ol> Pour aller plus loin <p>Les \u00e9l\u00e8ves ayant fait la sp\u00e9cialit\u00e9 nsi ou connaissant un minimum le langage Python peuvent coder ce m\u00eame algorithme en Python et comparer les temps de calcul dans les deux langages sur par exemple <code>somme_premiers(5000000)</code>. </p>"},{"location":"mp2i/introC/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/introOCaml/","title":"C6 OCaml : aspects fonctionnels","text":"<p>\"An industrial-strength functional programming language with an emphasis on expressiveness and safety\"ocaml.org(Site officiel d'OCaml)</p>"},{"location":"mp2i/introOCaml/#cours","title":"Cours","text":"<p>Support de cours chapitre 6 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/introOCaml/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD6 </p>"},{"location":"mp2i/introOCaml/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"mp2i/introOCaml/#exercice-1-un-notebook-pour-demarrer","title":"Exercice 1 : Un notebook pour d\u00e9marrer","text":"<p>A propos des notebooks</p> <p>Dans cette activit\u00e9, on utilise pour la premi\u00e8re fois les jupyter notebook, c'est-\u00e0-dire des documents contenant \u00e0 la fois :</p> <ul> <li>des zones de texte explicatives, </li> <li>des zones de code Ocaml, executables directement \u00e0 la fa\u00e7on de ce qui se passe lorsqu'on utilise l'environnement <code>utop</code> de OCaml.</li> </ul> <p>A chaque fois, que nous utilisons cet outil, deux choix s'offrent \u00e0 vous :</p> <ol> <li> <p>l'utiliser localement sur votre ordinateur \u00e0 condition d'y avoir install\u00e9 jupyter notebook (c'est le cas sur les ordinateurs de la salle). Pour cela, cr\u00e9er un dossier nomm\u00e9 par exemple <code>Notebook</code> et depuis un terminal lancer jupyter dans ce dossier en \u00e9crivant simplement : <pre><code>jupyter notebook\n</code></pre> L'application se lance dans votre navigateur, t\u00e9l\u00e9charger le notebook et utiliser le bouton T\u00e9l\u00e9verser en haut \u00e0 droit pour le t\u00e9l\u00e9charger dans votre dossier et l'ouvrir.</p> </li> <li> <p>Utiliser l'application Capytale de votre environnement num\u00e9rique de travail metice. Dans ce cas, utiliser le lien de partage fourni dans l'activit\u00e9. Cette option vous permet notamment de travailler depuis la maison car aucune installation (ni de OCaml, ni de Jupyter) n'est n\u00e9cessaire.</p> </li> </ol> <p>Les activit\u00e9s utilisant un notebook proposerons donc toujours les deux options d\u00e9crites ci-dessus.</p> <ul> <li>T\u00e9l\u00e9charger le notebook pour l'utiliser en local (installation de jupyter n\u00e9cessaire)Notebook : Premiers pas en OCaml </li> <li>Utiliser l'application Capytale (aucune installation n\u00e9cessaire)</li> </ul>"},{"location":"mp2i/introOCaml/#exercice-2-quelques-evaluations","title":"Exercice 2 : Quelques \u00e9valuations","text":"<ol> <li> <p>Pr\u00e9dire le type et la valeur des expressions suivantes, v\u00e9rifier en les \u00e9valuant dans <code>utop</code> :</p> <ul> <li><code>(7.-5.)  *. 3.</code></li> <li><code>14 mod 3</code></li> <li><code>(6+6)/2</code></li> <li><code>5/2</code></li> <li><code>'a'</code></li> <li><code>\"Ocaml\"</code></li> <li><code>\"Hello\" ^ \" World\"</code></li> <li><code>3.0 ** 2</code></li> <li><code>9 &lt; 8</code></li> <li><code>7 &lt;&gt; 5</code></li> <li><code>\"Incroyable\".[5]</code></li> </ul> </li> <li> <p>Effectuer les calcul suivants \u00e0 l'aide d'Ocaml :</p> <ul> <li>Reste dans la division euclidienne de 2023 par 312</li> <li>Quotient dans la division euclidienne de 7777 par 42</li> <li>\\(7^4\\)</li> <li>\\(\\dfrac{14 + 9}{25-3\\times7}\\)</li> </ul> </li> </ol>"},{"location":"mp2i/introOCaml/#exercice-3-quelques-erreurs","title":"Exercice 3 : Quelques erreurs ...","text":"<ol> <li> <p>Pr\u00e9dire l'\u00e9valuation de chacune des expressions ci-dessous</p> <ul> <li><code>let a = 5. + 2</code></li> <li><code>if true then 1 else 2.0</code></li> <li><code>let b = -3.14</code></li> <li><code>'z' = \"z\"</code></li> <li><code>let s = \"Python\" in s.[0] = 'C'</code></li> <li><code>abs(-2.718)</code></li> <li><code>let z = 2.0**5</code></li> <li><code>let s = \"OCaml\" in if s.[1]=\"C\" then true else false</code></li> </ul> </li> <li> <p>V\u00e9rifier en testant dans <code>utop</code> (et expliquer)</p> </li> </ol> <p>Note</p> <p>Pour les exercices suivants, on pourra au choix continuer \u00e0 travailler dans <code>utop</code> soit faire les premi\u00e8res compilations.</p>"},{"location":"mp2i/introOCaml/#exercice-4-ou-exclusif","title":"Exercice 4 : Ou exclusif","text":"<ol> <li> <p>Ecrire une fonction <code>xor</code> en OCaml qui prend en argument deux bool\u00e9ens <code>a</code> et <code>b</code> et renvoie <code>true</code> lorsque l'un des deux est vrai et <code>false</code> sinon</p> </li> <li> <p>Donner une \u00e9criture de cette fonction en utilisant un filtrage par motif</p> </li> </ol>"},{"location":"mp2i/introOCaml/#exercice-5-quelques-fonctions-elementaires","title":"Exercice 5 : Quelques fonctions \u00e9l\u00e9mentaires","text":"<ol> <li> <p>Ecrire une fonction <code>perimetre_cercle : float -&gt; float</code> qui prend en argument un flottant <code>r</code> et renvoie le perim\u00e8tre du cercle de rayon <code>r</code>, on utilisera une valeur de <code>pi</code> de <code>3.14</code> d\u00e9finie dans un environnement local.</p> </li> <li> <p>Ecrire une fonction <code>discriminant : float -&gt; float -&gt; float -&gt; float</code> qui prend en argument trois flottants \\(a, b\\) et \\(c\\) et renvoie \\(b^2 - 4ac\\).</p> </li> <li> <p>Ecrire une fonction <code>est_pair : int -&gt; bool</code> qui renvoie <code>true</code> lorsque l'entier donn\u00e9 en argument est pair.</p> </li> <li> <p>Ecrire une fonction <code>mention : float -&gt; string</code> qui renvoie la mention au bac associ\u00e9e \u00e0 la moyenne donn\u00e9e en argument par exemple <code>mention 12.8</code> donne \"Assez-bien\".</p> </li> <li> <p>Ecrire une fonction <code>fact : int -&gt; int</code> qui renvoie la factorielle de l'entier donn\u00e9 en argument.</p> </li> </ol>"},{"location":"mp2i/introOCaml/#exercice-6-termes-dune-suite","title":"Exercice 6 : Termes d'une suite","text":"<p>Ecrire une fonctions <code>suite</code> qui prend en argument un entier <code>n</code> et renvoie le \u00a0<code>n</code>-i\u00e8me terme de la suite \\(u\\) d\u00e9finie par \\(u_0=1\\) et \\(u_{n+1} = 2 u_n + 3\\)</p>"},{"location":"mp2i/introOCaml/#exercice-7-dessiner-sans-boucles","title":"Exercice 7 : Dessiner (sans boucles)","text":"<ol> <li> <p>Ecrire une fonction <code>repete</code> qui prend en argument un caract\u00e8re <code>car</code> et un entier <code>n</code> et affiche <code>n</code> fois ce caract\u00e8re \u00e0 l'\u00e9cran puis passe \u00e0 la ligne</p> </li> <li> <p>En utilisant la fonction pr\u00e9c\u00e9dente \u00e9crire la fonction <code>triangle</code> qui prend en argument un caract\u00e8re <code>car</code> et un entier <code>n</code> et dessine un triangle de ce caract\u00e8re. Par exemple : <pre><code>utop # triangle '*' 5;;\n*****\n****\n***\n**\n*\n</code></pre></p> </li> <li> <p>M\u00eame question mais en affichant le triangle \"pointe vers le haut\" : <pre><code>utop # triangle2 '*' 5;;\n*\n**\n***\n****\n*****\n</code></pre></p> </li> </ol>"},{"location":"mp2i/introOCaml/#exercice-8-type-figure","title":"Exercice 8 : Type figure","text":"<p>On consid\u00e8re le type union suivant permet de repr\u00e9senter des figures g\u00e9o\u00e9mtriques :</p> <pre><code>type figure = \n| Cercle of float \n| Carre of float \n| Rectangle of float*float;;\n</code></pre> <ol> <li> <p>En utilisant une correspondance de motif, \u00e9crire une fonction <code>perimetre</code> qui renvoie le perimetre d'une <code>figure</code></p> </li> <li> <p>D\u00e9finir la variable <code>rect</code> repr\u00e9sentant un rectangle de dimension \\(3\\times9\\)  et calculer son aire \u00e0 l'aide de la fonction pr\u00e9c\u00e9dente.</p> </li> <li> <p>Reprendre les questions pr\u00e9c\u00e9dentes pour l'aire.</p> </li> </ol>"},{"location":"mp2i/introOCaml/#exercice-9-type-nombre","title":"Exercice 9 : Type nombre","text":"<ol> <li>Cr\u00e9er le type union <code>nombre</code> pouvant \u00eatre un entier ou un flottant</li> <li>A l'aide d'un filtrage par motif, \u00e9crire une fonction <code>addition</code> qui prend en argument deux variables de type <code>nombre</code> et renvoie leur somme.</li> </ol>"},{"location":"mp2i/introOCaml/#exercice-10-type-couleur","title":"Exercice 10 : Type couleur","text":"<ol> <li>Cr\u00e9er le type produit <code>couleur</code> sous la forme d'un triplet de trois entiers.</li> <li>Le n\u00e9gatif d'une couleur \\((x,y,z)\\) est la couleur \\((255-x, 255-y, 255-z)\\). Ecrire une fonction prenant une couleur comme param\u00e8tre et renvoyant son n\u00e9gatif.</li> <li> <p>A l'aide d'un filtrage par motif \u00e9crire une fonction qui affiche :</p> <ul> <li><code>Rouge pur</code> si la composante rouge est strictement positive et les  deux autres composantes sont nulles,</li> <li><code>Vert pur</code> si la composante verte est strictement positive et les  deux autres composantes sont nulles,</li> <li><code>Bleu pur</code> si la composante bleue est strictement positive et les  deux autres composantes sont nulles,</li> <li><code>M\u00e9lange</code> dans les autres cas.</li> </ul> </li> </ol>"},{"location":"mp2i/introOCaml/#exercice-11-chaines-de-caracteres","title":"Exercice 11 : Chaines de caract\u00e8res","text":"<p>Aide</p> <ul> <li>On rappelle que le caract\u00e8re d'indice <code>i</code> de la chaine <code>chaine</code> s'obtient avec la notation <code>chaine.[i]</code></li> <li>La fonction <code>String.sub</code> prend en argument une chaine et deux indices et renvoie la sous chaine entre ces deux indices. Par exemple <code>String.sub \"OCaml\" 1 3</code> renvoir \u00a0<code>\"Cam\"</code>.</li> </ul> <ol> <li>Ecrire une fonction  <code>est_dans</code> qui prend en argument une chaine de caract\u00e8res <code>chaine</code> et un caract\u00e8re <code>car</code> et renvoie <code>true</code> si <code>car</code> se trouve dans <code>chaine</code> et <code>false</code> sinon</li> <li>Ecrire une fonction <code>compte_occurence</code> qui prend en argument une chaine de caract\u00e8res <code>chaine</code> et un caract\u00e8re <code>car</code> et renvoie le nombre d'apparition de <code>car</code> dans <code>chaine</code></li> </ol>"},{"location":"mp2i/introOCaml/#exercice-12-creation-de-liste","title":"Exercice 12 : Cr\u00e9ation de liste","text":"<ol> <li>Ecrire une fonction <code>cree_liste</code> qui prend en argument un \u00e9l\u00e9ment <code>elt</code> et un entier <code>rep</code> et qui cr\u00e9e la liste constitu\u00e9e de <code>rep</code> fois l'\u00e9l\u00e9ment <code>elt</code>. Par exemple <code>cree_liste  42 3</code> renvoie la liste <code>[42; 42; 42]</code></li> <li>Ecrire la fonction <code>entiers</code> qui prend en argument un entier <code>n</code> et renvoie la liste des entiers <code>[1,2,..,n]</code>. Par exemple <code>entiers 5</code> renvoie <code>[1; 2; 3; 4; 5]</code>.</li> <li>Ecrire une fonction <code>double</code> qui prend en argument une liste et renvoie la liste dans laquelle chaque \u00e9l\u00e9ment de <code>l</code> a \u00e9t\u00e9 dupliqu\u00e9. Par exemple <code>double [3; 6; 7]</code> renvoie la liste <code>[3; 3; 6; 6; 7; 7;]</code>.</li> <li>Ecrire la fonction <code>mult_liste</code> qui prend en argument une liste et un entier <code>rep</code> et qui cr\u00e9e la liste constitu\u00e9e de <code>rep</code> r\u00e9p\u00e9titions de la liste. Par exemple <code>mult_liste [1; 4; 2] 3</code> renvoie la liste <code>[1; 4; 2; 1; 4; 2; 1; 4; 2]</code></li> </ol>"},{"location":"mp2i/introOCaml/#exercice-13-somme-moyenne-maximum-minimum","title":"Exercice 13 : Somme, moyenne, maximum, minimum","text":"<ol> <li> <p>Ecrire une fonction <code>somme_int</code> qui prend en argument une liste d'entiers et renvoie la somme de ces entiers.</p> </li> <li> <p>Ecrire une fonction <code>moyenne_float</code> qui prend en argument une liste non vide de flottants et renvoie leur moyenne.</p> </li> <li> <p>Ecrire une fonction <code>minimum</code> qui renvoie le minimum de la liste non vide de nombres donn\u00e9e en argument.</p> </li> <li> <p>Ecrire une fonction <code>indice_max</code> qui renvoie la liste des indices des occurrences du maximum des \u00e9l\u00e9ments de la liste (non vide) donn\u00e9e en argument.</p> </li> </ol>"},{"location":"mp2i/introOCaml/#exercice-14-indice-dun-element","title":"Exercice 14 : Indice d'un element","text":"<p>Ecrire une fonction <code>indice</code> qui prend en argument un entier <code>n</code> et une liste d'entiers <code>l</code> et qui renvoie l'indice de la premi\u00e8re occurrence de <code>n</code> dans <code>l</code>. On renvoie <code>-1</code> si <code>n</code> n'appartient pas \u00e0 <code>l</code>. Par exemples :</p> <ul> <li><code>indice 3 [1; 6; 7; 2; 3; 0]</code> renvoie <code>4</code></li> <li><code>indice 1 [1; 6; 7; 2; 3; 0]</code> renvoie <code>0</code></li> <li><code>indice 5 [1; 6; 7; 2; 3; 0]</code> renvoie <code>-1</code></li> </ul>"},{"location":"mp2i/introOCaml/#exercice-15-suppression-dun-element","title":"Exercice 15 : Suppression d'un \u00e9l\u00e9ment","text":"<ol> <li>Ecrire une fonction <code>supprime</code> qui prend en argument une liste <code>l</code> et une valeur <code>v</code> et supprime toutes les occurrences de <code>v</code> dans <code>l</code>.</li> <li>M\u00eame question en supprimant seulement la premi\u00e8re occurrence</li> <li>M\u00eame question en supprimant seulement la derni\u00e8re occurrence</li> </ol>"},{"location":"mp2i/introOCaml/#exercice-16-retourner-une-liste","title":"Exercice 16 : Retourner une liste","text":"<p>Ecrire une fonction <code>retourne</code> qui prend en argument une liste et renvoie la liste retourn\u00e9e (c'est-\u00e0-dire avec les \u00e9l\u00e9ments dans l'ordre inverse). Par exemple <code>retourne [2; 4; 5; 1]</code> renvoie la liste <code>[1; 5; 4; 2]</code> </p> <p>Remarque</p> <p>Cette fonction existe d\u00e9j\u00e0, c'est <code>List.rev</code></p>"},{"location":"mp2i/introOCaml/#exercice-17-doublons-dans-une-liste","title":"Exercice 17 : Doublons dans une liste","text":"<ol> <li> <p>Ecrire une fonction <code>sans_doublons_triee</code> qui prend en argument une liste d'entiers tri\u00e9e et renvoie <code>true</code> si cette liste ne contient pas de doublons. Par exemple <code>sans_doublons_triee [2; 5; 5; 8; 10]</code> doit renvoyer \u00a0<code>false</code>.</p> </li> <li> <p>Ecrire une fonction <code>elimine_doublons_triee</code> qui prend en argument une liste d'entiers tri\u00e9e et renvoie cette liste en supprimant tous les doublons \u00e9ventuels qui s'y trouvent. Par exemple <code>elimine_doublons_triee [2; 5; 5; 8; 10]</code> doit renvoyer <code>[2; 5; 8; 10]</code></p> </li> <li> <p>Ecrire une fonction <code>compare</code> qui prend en argument deux entiers <code>a</code> et <code>b</code> et renvoie <code>-1</code> si <code>a&lt;b</code>, <code>0</code> si <code>a=b</code> et <code>1</code> si <code>a&gt;b</code></p> </li> <li> <p>Une fonction de tri de liste existe d\u00e9j\u00e0 en OCaml, c'est <code>List.sort</code> qui prend en argument une fonction de comparaison (telle que celle d\u00e9finie \u00e0 la question pr\u00e9c\u00e9dente) et une liste et renvoie la liste tri\u00e9e en utilisant la fonction de comparaison. Tester cette fonction.</p> </li> <li> <p>Ecrire les fonctions des questions 1 et 2 pour des listes quelconques (non forc\u00e9ment tri\u00e9es) en utilisant <code>List.sort</code></p> </li> <li> <p>M\u00eame question sans utiliser <code>List.sort</code></p> </li> </ol>"},{"location":"mp2i/introOCaml/#exercice-18-liste-monotone","title":"Exercice 18 : Liste monotone","text":"<p>Ecrire une fonction <code>monotone</code> qui prend en argument une liste et renvoie un bool\u00e9en indiquant si la liste donn\u00e9e en argument est monotone ou non.</p> <p>Aide</p> <p>On pourra dans un premier temps \u00e9crire deux fonctions <code>croissante</code> et <code>d\u00e9croissante</code> avant de trouver une solution plus concise.</p>"},{"location":"mp2i/introOCaml/#exercice-19-partition-suivant-un-predicat","title":"Exercice 19 : Partition suivant un pr\u00e9dicat","text":"<ol> <li> <p>Ecrire une fonction <code>separe</code> qui prend en argument une liste et renvoie deux listes : celles des \u00e9l\u00e9ments positifs ou nuls et celle des \u00e9l\u00e9ments n\u00e9gatifs. Par exemple <code>separe [2; -3; -2; -1; 7; -4]</code> renvoie les liste <code>[2; 7]</code> et <code>[-3; -2; -4]</code>.</p> </li> <li> <p>En s'inspirant de l'exemple pr\u00e9c\u00e9dent \u00e9crire une fonction <code>separe_bis</code> qui prend de plus en argument une fonction qui renvoie un bool\u00e9en (et s'applique aux \u00e9l\u00e9ments de la liste) et renvoie deux listes : celles pour laquelle l'application de la fonction renvoie <code>true</code> et celle pour laquelle l'application de la fonction renvoie <code>false</code>. </p> </li> </ol>"},{"location":"mp2i/introOCaml/#exercice-20-exercices-en-ligne","title":"Exercice 20 : Exercices en ligne","text":"<p>Le site officiel de la fondation Ocaml, propose des exercices progressifs \u00e0 faire en ligne directement dans le navigateur.</p>"},{"location":"mp2i/introOCaml/#humour-dinformaticien","title":"Humour d'informaticien","text":"<p>  Credit : Hmm-la-bd cc by-nc</p>"},{"location":"mp2i/introbd/","title":"C11 Introduction aux bases de donn\u00e9es","text":"<p>\" A SQL query walks into a bar and sees two tables. He walks up to them and says \u2018Can I join you?\"Anonyme</p>"},{"location":"mp2i/introbd/#cours","title":"Cours","text":"<p>Support de cours chapitre 11 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/introbd/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD11 </p>"},{"location":"mp2i/introbd/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"mp2i/introbd/#exercice-1-dette-et-croissance","title":"Exercice 1 : Dette et croissance","text":"<ol> <li>T\u00e9l\u00e9charger les donn\u00e9es pr\u00e9sent\u00e9es dans la vid\u00e9o pr\u00e9c\u00e9dente sous la forme d'une base de donn\u00e9es :     Dette et Croissance  et l'ouvrir \u00e0 l'aide de <code>sqlitebrowser</code>. Cette base est compos\u00e9e d'une seule table :       RR  <code>Id</code><code>INTEGER</code> <code>Country</code><code>TEXT</code> <code>Year</code><code>INTEGER</code> <code>DebtToGDP</code><code>REAL</code> <code>Growth</code><code>REAL</code> <code>DebtCategory</code><code>INTEGER</code>      On pr\u00e9cise la signification des champs suivants :  <code>DebtToGDP</code> : la dette en pourcentage du pib. <code>Growth</code> : la croissance.</li> <li>Quelques requ\u00eates pour s'\u00e9chauffer<ol> <li>V\u00e9rifier comme indiqu\u00e9 dans la vid\u00e9o que les donn\u00e9es contiennent bien 20 pays. Les lister.</li> <li>V\u00e9rifier aussi que les ann\u00e9es vont de 1946 \u00e0 2009 comme indiqu\u00e9 dans la vid\u00e9o.</li> <li>Lister par ordre croissant les dix ann\u00e9es o\u00f9 la croissance a \u00e9t\u00e9 la plus faible en France.</li> <li>Lister les pays o\u00f9 la croissance a d\u00e9pass\u00e9 15 %</li> </ol> </li> <li> <p>Des op\u00e9rations sur les colonnes</p> <ol> <li> <p>Ecrire une requ\u00eate sql permettant d'obtenir le pays et l'ann\u00e9e o\u00f9 la dette a \u00e9t\u00e9 la plus importante en utilisant la fonction d'agr\u00e9gation max</p> <p>Note</p> <p>On pourrait aussi \u00e9crire une requ\u00eate de classe par ordre d\u00e9croissant associ\u00e9e \u00e0 une clause <code>LIMIT</code></p> </li> </ol> </li> <li> <p>Retrouver \u00e0 l'aide de sql les vraies valeurs de croissance moyenne en fonction de la cat\u00e9gorie de dette dans laquelle se trouve le pays et qu'on rappelle ci-dessous :</p> Cat\u00e9gorie Croissance moyenne 1 4,2 % 2 3,1 % 3 3,2 % 4 2,2 % </li> <li> <p>Les op\u00e9rations sur les colonnes sont particuli\u00e8rement utiles en lien avec la clause <code>GROUP BY</code>. Par exemple, si on souhaite obtenir la somme de la croissance pour chacun des 20 pays depuis 1970 : </p> <pre><code>    SELECT country, SUM(Growth) from RR WHERE Year&gt;=1970 GROUP BY Country\n</code></pre> <p>On peut m\u00eame renommer la  colonne <code>SUM(Growth)</code> des r\u00e9sultats gr\u00e2ce \u00e0 <code>AS</code> et donc l'utiliser comme crit\u00e8re de classement: </p> <p><code>sql         SELECT country, SUM(Growth) AS moy70 from RR WHERE Year&gt;=1970 GROUP BY Country ORDER BY moy70 DESC</code></p> <p>Ecrire une seule requ\u00eate permettant d'obtenir les taux de croissance moyenne pour chacune des cat\u00e9gories de dette.</p> </li> </ol>"},{"location":"mp2i/introbd/#exercice-2-prix-nobel","title":"Exercice 2 : Prix Nobel","text":"<ol> <li>T\u00e9l\u00e9charger ci-dessous une base de donn\u00e9es des Prix Nobel : Prix Nobel </li> <li>Ouvrir cette base avec <code>sqlitebrowser</code></li> <li>Dans Parcourir les donn\u00e9es prendre note du noms des colonnes et de leur signification. </li> <li>Ecrire les requ\u00eates sql permettant :<ol> <li>d'obtenir les cat\u00e9gories dans lesquelles sont attribu\u00e9es les prix Nobel,</li> <li>de lister par ordre alphab\u00e9tique les laur\u00e9ats du prix Nobel n\u00e9s en France ou travaillant pour une organisation Fran\u00e7aise,</li> <li>de lister les ann\u00e9es o\u00f9 le \"Comit\u00e9 international de la Croix Rouge\" a obtenu le prix Nobel,</li> <li>de conna\u00eetre le nombre de femmes ayant obtenu un prix Nobel,</li> <li>de lister par \u00e2ge d\u00e9croissant les laur\u00e9ats du prix Nobel qui sont toujours en vie,</li> <li>de rechercher les laur\u00e9ats dont le nom contient \"Curie\".</li> </ol> </li> </ol>"},{"location":"mp2i/introbd/#exercice-3-tremblements-de-terre","title":"Exercice 3 : Tremblements de terre","text":"<ol> <li>T\u00e9l\u00e9charger ci-dessous une base de donn\u00e9es des tremblements de terre : Tremblements de terre </li> <li>Ouvrir cette base avec <code>sqlitebrowser</code></li> <li>Dans Parcourir les donn\u00e9es prendre note du noms des colonnes et de leur signification. </li> <li> <p>Ecrire les requ\u00eates sql permettant :</p> <ol> <li>de lister  tremblements de terre qui se sont produits au Japon,</li> <li> <p>de lister les tremblements de terre qui se sont produits en l'an 2000 class\u00e9s par magnitude,</p> <p>Aide</p> <p>Remarquer que le champ <code>occured_on</code> qui indique la date est au format texte.</p> </li> </ol> </li> <li> <p>Utiliser cette base pour r\u00e9pondre aux questions suivantes :</p> <ol> <li> <p>les tremblements de terre sont-ils plus fr\u00e9quents dans l'h\u00e9misph\u00e8re nord ou l'h\u00e9misph\u00e8re sud ?</p> <p>Aide</p> <p>On rappelle que l'h\u00e9misph\u00e8re nord correspond \u00e0 une latitude positive et le sud \u00e0 une latitude n\u00e9gative.</p> </li> <li> <p>O\u00f9 \u00e9taient effectu\u00e9es les essais nucl\u00e9aires fran\u00e7ais ?</p> </li> <li> <p>L'un des s\u00e9isme de cette base de donn\u00e9es s'est-il produit \u00e0 proximit\u00e9 de l'\u00eele de la R\u00e9union ?</p> <p>Aide</p> <p>Rechercher la latitude et la longitude de l'\u00eele de R\u00e9union et consid\u00e9rer que \"\u00e0 proximit\u00e9\" signifie qu'on s'\u00e9carte de moins de 10 degr\u00e9s de latitude ou de longitude</p> </li> </ol> </li> </ol>"},{"location":"mp2i/introbd/#exercice-4-exercices-en-ligne-une-seule-table","title":"Exercice 4 : Exercices en ligne (une seule table)","text":"<ol> <li> <p>Des exercices en lignes de requ\u00eates sur une seule table cr\u00e9es par N. Reveret. Ces exercices peuvent \u00eatre faits \u00e0 la maison (aucune installation n\u00e9cessaire) et les r\u00e9ponses sont fournis.</p> <ol> <li>Les pr\u00e9noms en France au XX-\u00e8me si\u00e8cle</li> <li>Ramens</li> </ol> </li> <li> <p>M\u00eame principe sur ce site de Q. Fortier :</p> <ol> <li>M\u00e9tro parisien</li> <li>Pays</li> </ol> </li> <li> <p>Enfin, un site (en anglais) qui vous permettra de r\u00e9viser l'ensemble de ce chapitre en faisant les tutoriels de 1 \u00e0 5:</p> <ol> <li>Tutoriel 1 : introduction</li> <li>Tutoriel 2 : requ\u00eates avec conditions partie 1</li> <li>Tutoriel 3 : requ\u00eates avec conditions partie 2</li> <li>Tutoriel 4 : filtrage et tri des r\u00e9sultats</li> <li>Tutoriel 5 : exercice de synth\u00e8se</li> </ol> </li> </ol>"},{"location":"mp2i/introbd/#exercice-5-une-enquete-policiere-avec-sql","title":"Exercice 5 : Une enqu\u00eate polici\u00e8re avec SQL","text":"<p>Le but de cette activit\u00e9, propos\u00e9 sur le site de l'universit\u00e9 am\u00e9ricaine  Northwerstern University est de r\u00e9soudre un crime en utilisant des requ\u00eates SQL dans une base de donn\u00e9es dont voici le sch\u00e9ma relationnel : </p> <p>Toutes les requ\u00eates peuvent \u00eatre ex\u00e9cut\u00e9es directement sur le site, cependant vous pouvez t\u00e9l\u00e9charger ci-dessous la base afin d'ex\u00e9cuter vos requ\u00eates en local : SQL Murder Mystery </p> <p>Cliquer sur l'image ci-dessous pour acc\u00e9der \u00e0 l'enqu\u00eate et trouver le coupable. </p>"},{"location":"mp2i/introbd/#exercice-6-exercices-en-ligne-de-sql-plusieurs-tables","title":"Exercice 6 : Exercices en ligne de SQL (plusieurs tables)","text":"<ol> <li> <p>Des exercices en lignes de requ\u00eates sur plusieurs tables cr\u00e9es par N. Reveret. Ces exercices peuvent \u00eatre faits \u00e0 la maison (aucune installation n\u00e9cessaire) et les r\u00e9ponses sont fournies.</p> <ol> <li>Autour des films</li> <li>Voitures</li> <li>World</li> <li>Netflix</li> </ol> </li> <li> <p>M\u00eame principe sur ce site de Q. Fortier avec  bases de donn\u00e9es sur :</p> <ol> <li>Les concours</li> <li>Les Pok\u00e9mon</li> </ol> </li> </ol>"},{"location":"mp2i/introbd/#exercice-7-sql-island-un-jeu-de-role-en-sql","title":"Exercice 7 : SQL Island : un jeu de r\u00f4le en SQL","text":"<p>Un jeu de r\u00f4le en SQL o\u00f9 vous vous retrouvez seul sur une \u00eele apr\u00e8s un  crash d'avion (site d'une universit\u00e9 allemande)</p> <p>Aide</p> <p>Pour changer la langue (initialement en allemand), cliquer sur le menu (en haut et \u00e0 gauche de la page du jeu) puis s\u00e9lectionner le 4eme item.</p>"},{"location":"mp2i/introbd/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/logique/","title":"C16 Logique","text":"<p>\"Contrariwise, if it was so, it might be; and if it were so, it would be; but as it isn't, it ain't. That's logic.\"L. Carroll(in Through the looking glass, 1871)</p>"},{"location":"mp2i/logique/#cours","title":"Cours","text":"<p>Support de cours chapitre 16 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/logique/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD16 </p>"},{"location":"mp2i/logique/#travaux-pratiques","title":"Travaux pratiques","text":"<p>Note</p> <p>Tous les exercices sont \u00e0 faire en OCaml en utilisant le type vu en cours permettant de repr\u00e9senter une formule logique : <pre><code>type fl =\n| Top | Bot \n| Var of int (*les variables propositionnelles*)\n| Non of fl \n| Ou of fl*fl\n| Et of fl*fl\n| Imp of fl*fl\n| Equ of fl*fl\n</code></pre> On rappelle qu'un premier exemple de fonction <code>fl -&gt; int</code> calculant la taille d'une formule logique a \u00e9t\u00e9 aussi donn\u00e9 en cours : <pre><code>let rec taille fl =\n  match fl with\n  | Top | Bot | Var _ -&gt; 1\n  | Non sf -&gt; 1 + taille sf\n  | Ou (sf1, sf2) -&gt; 1 + taille sf1 + taille sf2\n  | Et (sf1, sf2) -&gt; 1 + taille sf1 + taille sf2\n  | Imp (sf1, sf2) -&gt; 1 + taille sf1 + taille sf2\n  | Equ (sf1, sf2) -&gt; 1 + taille sf1 + taille sf2;;\n</code></pre> Toujours \u00e0 titre d'exemple, la variable en Ocaml permettant de repr\u00e9senter la formule logique \\((p \\wedge \\neg q) \\to r\\) est : <pre><code>let ex = Imp (Et ((Var 1),(Non (Var 2))), (Var 3)) ;;\n</code></pre></p>"},{"location":"mp2i/logique/#exercice-1-hauteur-dune-formule-logique","title":"Exercice 1 : Hauteur d'une formule logique","text":"<p>Ecrire une fonction <code>hauteur fl -&gt; int</code> qui renvoie la hauteur d'une formule logique.</p>"},{"location":"mp2i/logique/#exercice-2-affichage-dune-formule-logique","title":"Exercice 2 : Affichage d'une formule logique","text":"<ol> <li> <p>Ecrire une fonction <code>print_formule fl -&gt; ()</code> qui affiche \u00e0 l'\u00e9cran une formule logique, Par exemple :</p> <p><pre><code>    let ex = Imp (Et ((Var 1),(Non (Var 2))), (Var 3)) in\n    print_formule ex;;\n</code></pre> Affiche \u00e0 l'\u00e9cran : <code>((p1 \u2227 \u00acp2) \u2192 p3)</code></p> <p>Aide</p> <p>On pourra utiliser les symboles unicodes des formules logiques qu'on peut obtenir dans VS Code en maintenant enfonc\u00e9 les touches Ctrl et Shift puis en tapant <code>u</code> suivi du caract\u00e8re unicode.</p> <ul> <li>pour \\(\\top\\) : <code>22A4</code></li> <li>pour \\(\\bot\\) : <code>22A5</code></li> <li>pour \\(\\neg\\) : <code>00AC</code></li> <li>pour \\(\\wedge\\) : <code>2227</code></li> <li>pour \\(\\vee\\) : <code>2228</code></li> <li>pour \\(\\to\\) : <code>2192</code></li> <li>pour \\(\\leftrightarrow\\) : <code>2194</code></li> </ul> </li> <li> <p>Modifier la fonction pr\u00e9c\u00e9dente afin qu'elle affiche les variables propositionnelles <code>p</code>, <code>q</code>, <code>r</code>, ... au lieu de <code>p1</code>, <code>p2</code>, <code>p3</code>, .... L'affiche de la formule donn\u00e9e en exemple donnera alors \u00a0<code>((p \u2227 \u00acq) \u2192 r)</code>.</p> </li> </ol>"},{"location":"mp2i/logique/#exercice-3-valeur-de-verite-dune-formule-logique","title":"Exercice 3 : Valeur de v\u00e9rit\u00e9 d'une formule logique","text":"<p>On d\u00e9finit les valeurs de v\u00e9rit\u00e9 avec le type <code>bool</code> de OCaml, <code>true</code> correspond \u00e0 \\(\\mathbb{1}\\) et <code>false</code> \u00e0 \\(\\mathbb{0}\\).</p> <ol> <li> <p>Ecrire les fonctions <code>fnon</code> <code>bool -&gt; bool</code>, <code>fet</code>, <code>fou</code>, <code>fimp</code>, <code>fequ</code> toute de signature <code>bool -&gt; bool -&gt; bool</code> qui correspondent \u00e0 la s\u00e9mantique des connecteurs de la logique propositionnelle.</p> </li> <li> <p>On repr\u00e9sente une valuation par un tableau de bool\u00e9ens, par exemple le tableau <code>[| true; true; false |]</code> correspond \u00e0 la valuation \\(\\varphi(p_1)=\\mathbb{1}\\), \\(\\varphi(p_2)=\\mathbb{1}\\) et \\(\\varphi(p_3)=\\mathbb{0}\\). Ecrire une fonction <code>eval : array bool -&gt; fl -&gt; bool</code> donnant la valeur de v\u00e9rit\u00e9 d'une formule dans le contexte de la valuation donn\u00e9e par le tableau de bool\u00e9en.</p> </li> </ol>"},{"location":"mp2i/logique/#exercice-4-enumeration-des-valuations","title":"Exercice 4 : Enum\u00e9ration des valuations","text":"<p>Le but de l'exercice est d'\u00e9num\u00e9rer de diff\u00e9rentes fa\u00e7on les \\(2^n\\) valuations possibles de \\(n\\) variables propositionnelles</p> <ol> <li> <p>Utilisation d'un compteur binaire : \u00e9crire une fonction <code>incremente : bool array -&gt; bool</code> qui ajoute 1 \u00e0 la valuation donn\u00e9e en argument et renvoie <code>true</code> s'il n'y a pas eu de d\u00e9passement de capacit\u00e9. Dans le cas contraire, la valuation n'est pas modifi\u00e9e et la fonction renvoie <code>false</code>. Par exemple si <code>v</code> est le tableau <code>[| true; false; true |]</code> alors <code>incremente v</code> renvoie <code>true</code> et modifie v en <code>[| true; true; false |]</code>.</p> </li> <li> <p>Conversion en base deux : \u00e9crire une fonction <code>dec_to_bin : int -&gt; int -&gt; bool array</code> qui prend en entr\u00e9e un entier positif <code>n</code> et un nombre de bits <code>b</code> et renvoie l'\u00e9criture binaire sur <code>b</code> bits de <code>n</code> sous la forme d'un tableau de <code>b</code> bool\u00e9ens.</p> </li> <li> <p>Utilisation des codes de Gray, l'avantage de ces derniers est qu'on \u00e9num\u00e8re les possibilit\u00e9s en changeant un unique caract\u00e8re \u00e0 chaque it\u00e9ration. L'algorithme d'\u00e9num\u00e9ration est le suivant :  </p> <ul> <li>On commence par le code ne contenant que des 0</li> <li>S'il y a un nombre pair de 1, on inverse le dernier chiffre</li> <li>Sinon on inverse le chiffre situ\u00e9 \u00e0 gauche du 1 le plus \u00e0 droite</li> </ul> <p>On doit conserver pour chaque valuation la parit\u00e9 du nombre de 1 qu'il contient, pour cela on d\u00e9finit le type : <pre><code>type valuation = {\nt : bool array; (* le tableau de bool\u00e9en *)\nmutable parite : bool (* la parit\u00e9 du nombre de 1*)}\n</code></pre></p> <ol> <li> <p>Ecrire une fonction <code>switch : valuation -&gt; int -&gt; unit</code> qui inverse l'un des bits d'un code de Gray.</p> </li> <li> <p>Ecrire une fonction <code>first : int -&gt; valuation</code> qui renvoie le premier code de Gray (c'est-\u00e0-dire celle correspondante \u00e0 toutes les variables ayant pour valeur \\(F\\))</p> </li> <li> <p>Ecrire une fonction <code>next : valuation -&gt; unit</code> qui met \u00e0 jour la valuation en passant \u00e0 la valeur suivante dans l'\u00e9num\u00e9ration de Gray.</p> <p>Aide</p> <p>Pour g\u00e9rer le cas o\u00f9 on demande le code qui vient apr\u00e8s le dernier code (c'est-\u00e0-dire qu'il n'y a pas de chiffre \u00e0 gauche du 1 situ\u00e9 le plus \u00e0 droite), on pourra au choix lever une exception (par exemple <code>Exit</code> est pr\u00e9d\u00e9finie dans le langage) ou alors renvoyer un bool\u00e9en qui indique si le code a pu \u00eatre incr\u00e9ment\u00e9 ou non (la signature est dans ce cas <code>next : valuation -&gt; bool</code>)</p> </li> </ol> </li> </ol>"},{"location":"mp2i/logique/#exercice-5-construction-de-la-table-de-verite-dune-formule","title":"Exercice 5 : Construction de la table de v\u00e9rit\u00e9 d'une formule","text":"<p>Dans cet exercice, on veut \u00e9crire une fonction permettant d'afficher \u00e0 l'\u00e9cran la table de v\u00e9rit\u00e9 d'une formule sur l'exemple de la formule <code>((p \u2227 \u00acq) \u2192 r)</code> on veut obtenir \u00e0 l'\u00e9cran : <pre><code>\u2502p\u2502q\u2502r\u2502F\u2502\n\u251c\u2500\u253c\u2500\u253c\u2500\u253c\u2500\u2524\n\u25020\u25020\u25020\u25021\u2502\n\u25020\u25020\u25021\u25020\u2502\n\u25020\u25021\u25020\u25021\u2502\n\u25020\u25021\u25021\u25020\u2502\n\u25021\u25020\u25020\u25020\u2502\n\u25021\u25020\u25021\u25021\u2502\n\u25021\u25021\u25020\u25021\u2502\n\u25021\u25021\u25021\u25020\u2502\n</code></pre></p> <p>On donne ci-dessous une fonction <code>entete</code> permettant d'afficher l'ent\u00eate d'une table de v\u00e9rit\u00e9 dont la liste des variables est donn\u00e9e est argument : <pre><code>    let print_var x =\n      print_char (char_of_int ((int_of_char 'o')+x));;\n\n    let entete vars =\n      List.iter (fun x -&gt; print_string \"\u2502\";  print_var x) vars;\n      print_endline \"\u2502F\u2502\";\n      print_string \"\u251c\";\n      for i=0 to (List.length vars - 1) do\n        print_string \"\u2500\u253c\";\n      done;\n      print_endline \"\u2500\u2524\";;\n</code></pre></p> <ol> <li> <p>Ecrire une fonction <code>liste_var : fl -&gt; int list</code> qui renvoie la liste des variables logiques utilis\u00e9e dans une formule, par exemple <code>liste_var Imp (Et ((Var 1),(Non (Var 2))), (Var 3))</code> renvoie la liste <code>[1; 2; 3]</code>.</p> </li> <li> <p>Ecrire une fonction <code>table_verite : formule -&gt; unit</code> qui affiche \u00e0 l'\u00e9cran la table de v\u00e9rit\u00e9 d'une formule.</p> </li> <li> <p>Tester votre programme sur des formules connues ou sur celles vues en cours ou en TD.</p> </li> </ol>"},{"location":"mp2i/logique/#exercice-6-satisfiabilite-dune-formule","title":"Exercice 6 : Satisfiabilit\u00e9 d'une formule","text":"<p>On consid\u00e8re qu'une valuation est donn\u00e9e sous la forme d'une tableau de bool\u00e9ens <code>bool array</code>. Par exemple  <code>[| false; true; false |]</code> correspond \u00e0 la valuation \\(\\varphi(p_1)=\\mathbb{0}\\), \\(\\varphi(p_2)=\\mathbb{1}\\) et \\(\\varphi(p_3)=\\mathbb{0}\\).</p> <ol> <li>Ecrire une fonction <code>sat_solve : fl -&gt; bool * bool array</code> qui utilise la table de v\u00e9rit\u00e9 afin de tester si une formule est satisfiable et renvoie <code>true</code> et la valuation correspondante si la formule est satisfiable et <code>false</code> accompagn\u00e9 de la valuation fausse pour toutes les variables dans le cas contraire. Par exemple, pour la formule <code>p \u2228 q</code> le fonction renvoie <code>true</code> et (par exemple) la valuation <code>[|false; true|]</code>.</li> </ol>"},{"location":"mp2i/logique/#exercice-7-equivalence-de-deux-formules-logiques","title":"Exercice 7 : Equivalence de deux formules logiques","text":"<p>Ecrire une fonction <code>sont_equiv fl -&gt; fl -&gt; bool</code> qui teste l'\u00e9quivalence de deux formules logiques.</p>"},{"location":"mp2i/logique/#exercice-8-mise-sous-forme-normale","title":"Exercice 8 : Mise sous forme normale","text":"<ol> <li>Ecrire une fonction <code>convertit: bool array -&gt; fl</code> qui prend en argument un tableau de bool\u00e9ens repr\u00e9sentant une valuation et la convertit en clause normale conjonctive sur ces variables par exemple <code>convertit [|true; false; false |]</code> renvoie <code>Et (Et (p, Non q), Non r)</code> (c'est \u00e0 dire \\(p \u2227 \u00acq \u2227 \u00acr\\)).</li> <li>Ecrire une fonction <code>fnd: fl -&gt; fl</code> qui renvoie la formule logique donn\u00e9e en argument sous forme normale disjonctive en utilisant la m\u00e9thode \"de la table de v\u00e9rit\u00e9\"</li> </ol>"},{"location":"mp2i/logique/#exercice-9-implementation-de-lalgorithme-de-quine","title":"Exercice 9 : Impl\u00e9mentation de l'algorithme de quine","text":"<p>Dans cet exercice, on impl\u00e9mente l'algorithme de Quine en supposant que les formules sont donn\u00e9es sous forme normale conjonctive (fnc). Par exemple avec 3 variables logique \\(p, q\\) et \\(r\\), \\(P = (\\neg p \\vee q \\vee r) \\wedge (p \\vee q) \\wedge (p \\vee q \\vee \\neg r)\\) est sous fnc.</p> <p>On rappelle que chaque \u00e9l\u00e9ment de la conjonction s'appelle une clause, par exemple \\((\\neg p \\vee q \\vee r)\\) est une clause de P. Chaque clause est compos\u00e9 de litt\u00e9raux, c'est-\u00e0-dire d'une variable logique ou de sa n\u00e9gation, on est donc amen\u00e9 \u00e0 d\u00e9finir les types suivants en OCaml afin de repr\u00e9senter un fnc :</p> <pre><code>type litteral =\n  | Var of int (* une variable logique *)\n  | NVar of int (* la n\u00e9gation d'une variable logique*)\ntype clause = litteral list\ntype fnc = clause list\n</code></pre> <ol> <li> <p>Cr\u00e9er la variable repr\u00e9sentant la fnc \\((p_1 \\vee p2) \\wedge (\\neg p_2 \\vee \\neg p_3) \\wedge (\\neg p_1 \\vee p_3) \\wedge (p_1 \\vee p_3)\\)</p> </li> <li> <p>On donne ci-dessous une fonction permettant d'afficher une clause, en utilisant cette fonction, \u00e9crire <code>print_fnc -&gt; fnc -&gt; unit</code> qui affiche dans le terminal une fnc <pre><code>let rec print_clause c = \n  match c with\n  | [] -&gt;  Printf.printf \" () \";\n  | Var(n)::[] -&gt; Printf.printf \"p%d\" n \n  | Var(n)::t -&gt; Printf.printf \"p%d \u2228 \" n; print_clause t \n  | NVar(n)::[] -&gt; Printf.printf \"\u00acp%d\" n  \n  | NVar(n)::t -&gt; Printf.printf \"\u00acp%d \u2228 \" n; print_clause t \n</code></pre></p> </li> <li> <p>Ecrire la fonction <code>extrait_var : fnc -&gt; int</code> qui renvoie lorsqu'elle existe, la premi\u00e8re variable de la premi\u00e8re clause de de la fnc donn\u00e9e en argument. </p> </li> <li> <p>Ecrire la fonction <code>substitue_fnc fnc -&gt; int -&gt; bool -&gt; fnc</code> qui renvoie la fnc obtenue en rempla\u00e7ant une variable logique par \\(\\top\\) ou \\(\\bot\\) dans toutes les clauses que contient cette fnc.</p> <p>Aide</p> <p>On distinguera les cas suivants :</p> <ul> <li>Si le remplacement conduit \u00e0 avoir un litt\u00e9ral vrai dans une clause alors cette clause est vraie et on la supprime enti\u00e8rement de la \u00a0fnc</li> <li>Si le remplacement conduit \u00e0 avoir un litt\u00e9ral faux dans une clause alors ce litt\u00e9ral est supprim\u00e9 enti\u00e8rement de la clause</li> </ul> </li> <li> <p>Ecrire une impl\u00e9mentation de l'algorithme de Quine qui renvoie un bool\u00e9en indiquant si la fnc donn\u00e9e en argument est satisfiable ou non.</p> </li> <li> <p>Modifier la fonction pr\u00e9c\u00e9dente de fa\u00e7on \u00e0 obtenir aussi la valuation rendant la formule satisfiable dans le cas o\u00f9 elle l'est.</p> </li> </ol>"},{"location":"mp2i/logique/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/mea/","title":"C18 Mod\u00e8le entit\u00e9-association","text":"<p>\"The entity-relationship model adopts the more natural view that the real world consists of entities and relationships \"P. Chen(The Entity-Relationship Model)</p>"},{"location":"mp2i/mea/#cours","title":"Cours","text":"<p>Support de cours chapitre 18 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/mea/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD18 </p>"},{"location":"mp2i/mea/#travaux-pratiques","title":"Travaux pratiques","text":"<p>Important</p> <p>On pourra commencer par (re)faire les exercices de TP du chapitre sur l'introduction aux bases de donn\u00e9es afin de r\u00e9activer les connaissances en sql</p>"},{"location":"mp2i/mea/#exercice-1-revoir-le-sql","title":"Exercice 1 : Revoir le SQL","text":"<p>Pour revoir les bases de sql, utiliser les tutoriels du site SQL Zoo :</p> <ol> <li> <p>Avec une seule table :</p> <ul> <li>Sur une base de donn\u00e9es des pays du monde</li> <li>Sur une base de donn\u00e9es des prix Nobel</li> </ul> </li> <li> <p>Avec plusieurs tables (pour ma\u00eetriser le join) :</p> <ul> <li>Sur une base de donn\u00e9es sur le football</li> <li>Sur une base de donn\u00e9es de films films</li> <li>Sur une base de donn\u00e9es de bus</li> </ul> </li> <li> <p>Pour reviser les fonctions d'agr\u00e9gations</p> <ul> <li>Sur une base de donn\u00e9es d'\u00e9tudiants</li> </ul> </li> </ol>"},{"location":"mp2i/mea/#exercice-2-sql-noir","title":"Exercice 2 : SQL Noir","text":"<p>Le site SQL Noir propose de s'entrainer au SQL \u00e0 travers la r\u00e9solution d'enqu\u00eates polici\u00e8res.</p>"},{"location":"mp2i/mea/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/pointeurs/","title":"C3 Pointeurs et types structur\u00e9s","text":"<p>\"Pointers have been lumped with the <code>goto</code>  statement as a marvelous way to create impossible-to-understand programs. This is certainly true when they are used carelessly, and it is easy to create pointers that point somewhere unexpected. With discipline, however, pointers can also be used to achieve clarity and simplicity\"B. Kernighan &amp; D. Ritchie(in the C programming language 1978)</p>"},{"location":"mp2i/pointeurs/#cours","title":"Cours","text":"<p>Support de cours chapitre 3 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/pointeurs/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD3 </p>"},{"location":"mp2i/pointeurs/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"mp2i/pointeurs/#exercice-1-visualisation-avec-python-tutor","title":"Exercice 1 : Visualisation avec Python Tutor","text":"<p>Le site Python Tutor, permet de visualiser l'execution de programmes C. </p> <ol> <li>Aller sur Python Tutor, recopier et visualiser l'ex\u00e9cution du programme suivant :</li> </ol> <pre><code>#include &lt;stdlib.h&gt;\n\nint main() {\n  int n_local;\n  int *p_local = &amp;n_local;\n  int *p_tas = malloc(sizeof(int));\n  return 0;\n}\n</code></pre> <ol> <li> <p>En citant le cours, justifier bri\u00e8vement que <code>p_local</code> pointe sur la pile alors que <code>p_tas</code> pointe sur le tas.</p> </li> <li> <p>Compl\u00e9ter ce programme en d\u00e9finissant une variable globale <code>n_globale</code> de type <code>int</code> non initialis\u00e9e. Que remarquez-vous ?</p> </li> <li> <p>En utilisant le pointeur <code>p_local</code>, donner la valeur 42 \u00e0 <code>n_local</code></p> </li> <li> <p>Quelle instruction, pourtant tr\u00e8s importante, est manquante dans ce programme ? La rajouter et indiquer quelle option de compilation permettrait de faire appara\u00eetre le probl\u00e8me.</p> </li> </ol>"},{"location":"mp2i/pointeurs/#exercice-2-pour-demarrer-en-douceur","title":"Exercice 2 : Pour d\u00e9marrer en douceur","text":"<ol> <li> <p>Ecrire en C un programme qui d\u00e9finit (dans <code>main</code>) une variable locale <code>n_local</code> de type <code>int</code> et affiche son adresse m\u00e9moire.</p> <p>Aide</p> <ul> <li>L'op\u00e9rateur <code>&amp;</code> permet de r\u00e9cup\u00e9rer l'adresse d'une variable</li> <li>Le sp\u00e9cificateur de format pour les pointeurs dans <code>printf</code> est <code>%p</code></li> </ul> </li> <li> <p>Ecrire en C un programme qui alloue dans le tas une variable de type <code>int</code> et affiche son adresse m\u00e9moire.</p> </li> <li> <p>Les r\u00e9sultats sont-ils conformes au mod\u00e8le m\u00e9moire du C vu en cours ? Justifier.</p> </li> </ol>"},{"location":"mp2i/pointeurs/#exercice-3-manipulation-de-pointeurs","title":"Exercice 3 : Manipulation de pointeurs","text":"<p>Ecrire un programme effectuant les op\u00e9rations suivantes :</p> <ol> <li>D\u00e9clarer un entier <code>n</code> initialis\u00e9 \u00e0 \\(42\\).</li> <li>D\u00e9clarer un pointeur sur un entier <code>p</code> initialis\u00e9 \u00e0 <code>NULL</code></li> <li>Faire pointer <code>p</code> sur <code>n</code>.</li> <li>Modifier la valeur de <code>n</code> de deux fa\u00e7on diff\u00e9rentes : en utilisant <code>n</code> et en utilisant <code>p</code>.</li> <li>Apr\u00e8s chacune des modification, afficher la valeur de <code>n</code> pour v\u00e9rifier qu'elle a chang\u00e9.</li> <li>Afficher l'adresse de <code>n</code>.</li> </ol>"},{"location":"mp2i/pointeurs/#exercice-4-warning","title":"Exercice 4 : Warning","text":"<p>On souhaite \u00e9crire en C, un programme qui affiche l'adresse et le contenu d'une variable locale \u00e0 une fonction. </p> <ol> <li> <p>Recopier, compiler (en ignorant le warning) et ex\u00e9cuter la proposition de solution suivante qui effectue un affichage depuis le <code>main</code> :</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint* get_adr_local()\n{\n    int n_local = 15;\n    return &amp;n_local;\n}\n\nint main()\n{\n    int *p = get_adr_local();\n    printf(\"Adresse de la variable locale = %p\",p);\n    printf(\"Contenu = %d\",*p);\n}\n</code></pre> </li> <li> <p>Expliquer le r\u00e9sultat obtenu </p> <p>Aide</p> <p>Le warning obtenu \u00e0 la compilation devrait vous mettre sur la voie</p> </li> <li> <p>Est-il possible d'afficher l'adresse d'une variable locale \u00e0 une fonction depuis le <code>main</code> ? Et depuis la fonction ?</p> </li> <li> <p>Effectuer une allocation sur le tas \u00e0 la ligne 6 (et changer le nom de la variable en <code>n_tas</code>). Expliquer pourquoi le programme fonctionne maintenant sans erreur</p> </li> </ol>"},{"location":"mp2i/pointeurs/#exercice-5-renvoyer-un-tableau","title":"Exercice 5 : Renvoyer un tableau","text":"<p>Note</p> <p>On utilise, l'abus de langage \"renvoyer un tableau\", on gardera cependant \u00e0 l'esprit qu'en C, on renvoie en fait un pointeur vers une zone m\u00e9moire de taille \\(n \\times t\\) o\u00f9 \\(n\\) est la taille du tableau et \\(t\\) la taille en m\u00e9moire de l'un de ses \u00e9l\u00e9ments. L'acc\u00e8s \u00e0 cette zone m\u00e9moire se fait comme pour un tableau (c'est-\u00e0-dire avec la notation <code>tab[i]</code>). </p> <ol> <li> <p>Recopier et compl\u00e9ter la fonction <code>get_tab</code> suivante qui prend en argument un entier <code>size</code> et une valeur  enti\u00e8re <code>val</code> et renvoie un \"tableau\" de taille <code>size</code> dont toutes les cases sont initialis\u00e9es \u00e0 <code>val</code> :</p> <pre><code>int* get_tab(int size, int val)\n{\n    // Allouer sur le tas la place pour size entiers\n    int* tab = .........;\n    for (int i=0;.....;.....) \n    {\n        tab[i] = ....;\n    }\n    return tab;\n}\n</code></pre> </li> <li> <p>Ecrire un programme permettant de tester cette fonction</p> </li> <li> <p>La m\u00e9moire allou\u00e9e  dans la fonction, n'a pas \u00e9t\u00e9 lib\u00e9r\u00e9, est-ce une erreur ?</p> </li> <li> <p>En vous inspirant de cette fonction \u00e9crire :</p> <ul> <li> <p>une fonction renvoyant un tableau contenant les entiers de 1 \u00e0 <code>size</code></p> </li> <li> <p>une fonction  renvoyant un tableau contenant <code>size</code> entiers al\u00e9atoires tous compris entre deux valeurs <code>vmin</code> et <code>vmax</code></p> <p>Aide</p> <ul> <li>Pour g\u00e9n\u00e9rer un entier al\u00e9atoire entre <code>vmin</code> et <code>vmax</code> on utilisera la fonction <code>rand()</code> qui renvoie un entier entre 0 et une constante <code>RAND_MAX</code> puis on utilisera un modulo. </li> <li>Pour initialiser le g\u00e9n\u00e9rateur de nombre al\u00e9atoires on utilise usuellement la fonction <code>srand</code> en lui donnant en argument une dur\u00e9e en seconde obtenue \u00e0 l'aide de <code>time(NULL)</code> (importer <code>time.h</code>).</li> </ul> </li> </ul> </li> </ol>"},{"location":"mp2i/pointeurs/#exercice-6-suite-de-fibonnaci","title":"Exercice 6 : Suite de Fibonnaci","text":"<p>La suite de Fibonnaci est d\u00e9finie par : \\(\\left\\{ \\begin{array}{lll}                         f_0   &amp; = &amp; 0,                                                  \\\\                         f_1   &amp; = &amp; 1,                                                  \\\\                         f_{n} &amp; = &amp; f_{n-1}+f_{n-2} \\mathrm{\\ \\ pour\\ tout\\ \\ } n\\geq2.\\end{array} \\right.\\)</p> <ol> <li> <p>Ecrire une fonction <code>termes_fibo(n)</code> qui renvoie un tableau contenant les termes de la suite de Fibonnaci jusqu'au rang <code>n</code>(exclus). Par exemple <code>fibo(5)</code> doit renvoyer le tableau <code>{0,1,1,2,3}</code>.</p> </li> <li> <p>Ecrire une fonction <code>somme_pair</code> qui prend en argument un tableau (et donc sa taille) et renvoie la somme des termes pairs de ce tableau. Par exemple si <code>tab = {0,1,1,2,3}</code> alors <code>somme_pair(tab,5)</code> doit renvoyer <code>2</code>.</p> </li> <li> <p>A l'aide des deux fonctions pr\u00e9c\u00e9dentes, calculer la somme des termes pairs de la suite de Fibonnaci pour \\(n&lt;42\\). Vous pouvez tester le r\u00e9sultat de votre programme dans le formulaire ci-dessous :  </p> </li> </ol> <p> </p>"},{"location":"mp2i/pointeurs/#exercice-7-minimum-et-maximum","title":"Exercice 7 : Minimum et maximum","text":"<p>On souhaite \u00e9crire une fonction <code>min_max</code> qui prend en argument un tableau contenant au moins un entier et permet d'obtenir le minimum et le maximum de ce tableau. </p> <ol> <li> <p>Une premi\u00e8re solution consiste \u00e0 passer en param\u00e8tre deux pointeurs et \u00e0 les faire pointer vers le minimum et le maximum du tableau. Dans ce cas la signature de la fonction sera donc :     <pre><code>void min_max(int tab[], int size, int *min, int *max)\n</code></pre> Ecrire et tester cette fonction.</p> </li> <li> <p>Une seconde solution consiste \u00e0 d\u00e9finir un type structur\u00e9 <code>couple</code> contenant deux champs de type <code>int</code> et de d'\u00e9crire une fonction renvoyant un <code>couple</code> dont le premier champ sera le minimum et le second le maximum. Dans ce cas, la signature de la fonction sera donc :     <pre><code>couple min_max(int tab[], int size)\n</code></pre> Ecrire et tester cette fonction</p> <p>Aide</p> <p>La d\u00e9finition du type structur\u00e9 couple s'\u00e9crit (en nommant les champs <code>first</code> et <code>second</code>): <pre><code>struct couple {\n    int first;\n    int second;\n};\ntypedef struct couple couple;\n</code></pre></p> </li> </ol>"},{"location":"mp2i/pointeurs/#exercice-8-sur-les-caracteres","title":"Exercice 8 : Sur les caract\u00e8res","text":"<p>On souhaite \u00e9crire une fonction <code>inverse_casse</code> en C qui ne renvoie rien et change la casse de la lettre pass\u00e9e en argument (si c'est une majuscule alors elle devient minuscule et inversement). Si l'argument n'est pas une lettre, la fonction ne fait rien. </p> <p>Aide</p> <ul> <li>Les caract\u00e8res ascii des majuscules vont de 65 (pour le <code>A</code>) \u00e0 90 (pour le <code>Z</code>)</li> <li>Les caract\u00e8res ascii des minuscules vont de 92 (pour le <code>a</code>) \u00e0 122 (pour le <code>z</code>)</li> </ul> <ol> <li> <p>La proposition de solution ci-dessous ne compile pas, corriger les erreurs qui s'y trouvent puis ex\u00e9cuter le programme (les lignes probl\u00e9matiques sont surlign\u00e9es).</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid inverse_casse(char lettre)\n{\n    if (65&lt;=lettre &amp; lettre&lt;=90)\n    {lettre = lettre + 32;}\n    if (92&lt;=lettre &amp; lettre&lt;=122)\n    {lettre = lettre - 32;}\n}\n\nint main \n{\n    lettre = 'c';\n    inverse_casse(lettre);\n    print(\"R\u00e9sultat : %c\",lettre)\n    return 0;\n}\n</code></pre> </li> <li> <p>Expliquer pourquoi le programme affiche <code>c</code> (et que donc la fonction est inop\u00e9rante)</p> </li> <li> <p>Quelle devrait \u00eatre la signature de cette fonction ?</p> </li> <li> <p>Corriger la proposition ci-dessus</p> </li> <li> <p>Compl\u00e9ter le programme en ajoutant une fonction <code>inverse_casse_chaine</code> qui ne renvoie rien et inverse la casse de toutes les lettres pr\u00e9sentes dans la chaine donn\u00e9e en param\u00e8tre    .</p> </li> </ol>"},{"location":"mp2i/pointeurs/#exercice-9-tri-par-selection","title":"Exercice 9 : Tri par s\u00e9lection","text":"<p>Algorithme</p> <p>Pour trier les \u00e9l\u00e9ments d'un tableau par ordre croissant, l'algorithme du tri par s\u00e9lection consiste \u00e0 :  </p> <ul> <li>rechercher le plus petit \u00e9lement du tableau \u00e0 partir de l'indice 0</li> <li>\u00e9changer cet \u00e9l\u00e9ment avec celui situ\u00e9 \u00e0 l'indice 0</li> <li>rechercher le plus petit \u00e9lement du tableau \u00e0 partir de l'indice 1</li> <li>\u00e9changer cet \u00e9l\u00e9ment avec celui situ\u00e9 \u00e0 l'indice 1</li> <li>et ainsi de suite jusqu'\u00e0 atteindre la fin du tableau</li> </ul> <ol> <li>Ecrire une fonction <code>echange</code> qui prend en argument un tableau et deux indices \\(i\\) et \\(j\\) et \u00e9change les \u00e9l\u00e9ments d'indice \\(i\\) et \\(j\\) de ce tableau.</li> <li>Ecrire une fonction <code>indice_min_depuis</code> qui prend en argument une liste et un indice \\(i\\) et renvoie l'indice du minimum des \u00e9l\u00e9ments de ce tableau depuis l'indice \\(i\\).</li> <li>Programmer et tester l'algorithme du tri par s\u00e9lection.</li> </ol>"},{"location":"mp2i/pointeurs/#exercice-10-somme-des-entiers-dans-un-fichier","title":"Exercice 10 : Somme des entiers dans un fichier","text":"<p>Le fichier <code>entiers.txt</code> t\u00e9l\u00e9chargeable ci-dessous contient sur chaque ligne un entier. Ecrire un programme  qui lit ce fichier et calcule la somme de ces entiers. entiers.txt  Vous pouvez v\u00e9rifier le r\u00e9sultat de votre programme dans le formulaire ci-dessous</p> <p> </p>"},{"location":"mp2i/pointeurs/#exercice-11-type-structure-point","title":"Exercice 11 : Type structur\u00e9 point","text":"<p>On donne le code suivant permettant de d\u00e9finir le type structur\u00e9 <code>Point</code> : <pre><code>struct Point_struct \n{\n    char nom;\n    float abs;\n    float abs;\n};\ntypedef struct Point_struct Point;\n</code></pre></p> <ol> <li>Cr\u00e9er les points \\(A(3;-2)\\) et \\(B(-1;6)\\).</li> <li>Ecrire une fonction <code>affiche</code> qui prend en argument un objet <code>Point</code> et l'\u00e9crit dans le terminal.</li> <li> <p>Ecrire une fonction <code>milieu</code> qui prend en argument deux objets de type <code>Point</code> et un caract\u00e8re et renvoie un objet de type <code>Point</code> ayant pour nom ce caract\u00e8re et pour coordonn\u00e9es celles du milieu du segment form\u00e9 par les deux points.</p> <p>Aide</p> <p>On rappelle que pour deux points \\(A(x_A,y_A)\\) et \\(B(x_B,y_B)\\)  les coordonnes \\(x_I\\) et \\(y_I\\) du milieu \\(I\\) du segment \\([AB]\\) sont : \\(x_I = \\dfrac{x_A+x_B}{2}\\) et \\(y_I = \\dfrac{y_A+y_B}{2}\\)</p> </li> <li> <p>Cr\u00e9er le point \\(I\\), milieu de \\(A\\) et de \\(B\\) et l'afficher.</p> </li> <li>Cr\u00e9er la fonction <code>renomme</code> qui prend en argument un objet de type <code>Point</code> et un caract\u00e8re <code>C</code> et change le nom du point en <code>C</code>.</li> </ol>"},{"location":"mp2i/pointeurs/#exercice-12-modelisation-dun-compte-en-banque","title":"Exercice 12 : Mod\u00e9lisation d'un compte en banque","text":"<p>En C, On mod\u00e9lise un compte bancaire par un objet de type <code>struct</code> poss\u00e9dant les champs suivants :</p> <ul> <li>un num\u00e9ro de compte de type <code>uint32_t</code></li> <li>un nom de titulaire de type <code>char[50]</code></li> <li>un solde de type <code>float</code></li> </ul> <p>On r\u00e9pondra aux questions suivantes en \u00e9crivant au fur et \u00e0 mesure le programme correspondant</p> <ol> <li>Cr\u00e9er le type <code>CompteBancaire</code></li> <li>Dans le <code>main</code>, cr\u00e9er la variable <code>untel</code> repr\u00e9sentant le compte de M. Untel de num\u00e9ro 421 ayant un solde de \\(-318,53\\) \u20ac </li> <li>Ecrire et tester la fonction \u00a0<code>affiche</code> qui ne renvoie rien, prend en argument un objet de type <code>CompteBancaire</code> et affiche les informations de ce compte. Par exemple sur la variable <code>untel</code>, la fonction <code>affiche</code> doit \u00e9crire dans le terminale  : <code>N\u00b0421 - M. Untel : -318,53 euros</code></li> <li>Ecrire et tester les  m\u00e9thodes <code>depot</code> et <code>retrait</code> permettant respectivement d'ajouter ou de retirer une somme d'argent d'une variable de type CompteBancaire en modifiant le champ <code>solde</code>.</li> </ol>"},{"location":"mp2i/pointeurs/#exercice-13-date","title":"Exercice 13 : Date","text":"<ol> <li>Cr\u00e9er un type structur\u00e9 permettant de repr\u00e9senter une date au format <code>JJ/MM/AAAA</code></li> <li>Ecrire une fonction prenant en argument une date et permettant de l'afficher au format <code>JJ/MM/AAAA</code></li> <li>Ecrire une fonction <code>lendemain</code> qui prend en argument une date et renvoie un objet de type <code>date</code> correspondant au lendemain de cette date.</li> </ol>"},{"location":"mp2i/pointeurs/#exercice-14-boite-de-plus-grand-volume","title":"Exercice 14 : Bo\u00eete de plus grand volume","text":"<p>Le fichier <code>boites.txt</code> t\u00e9l\u00e9chargeable ci-dessous fait 1000 lignes, chaque ligne contient la r\u00e9f\u00e9rence d'un mod\u00e8le de bo\u00eete sous la forme d'un code \u00e0 4 lettres suivi de trois entiers repr\u00e9sentant les dimensions de la bo\u00eete. A titre d'exemple, les trois premi\u00e8res lignes du fichier sont : <pre><code>NWLR 283 75 46 \nQBHC 117 70 79 \nZOWK 262 66 31\n</code></pre> Donc, la boite de r\u00e9f\u00e9rence <code>NWLR</code> a comme dimension <code>283x75x46</code>. boites.txt </p> <p>Le but de l'exercice est d'\u00e9crire un programme en C permettant de trouver la r\u00e9f\u00e9rence de la bo\u00eete de plus grand volume.</p> <ol> <li> <p>D\u00e9finir le type structur\u00e9 <code>boite</code> ayant un champ <code>reference</code> de type chaine de caract\u00e8res de longueur 4, et 3 champs entiers <code>longueur</code>, <code>largeur</code>, <code>hauteur</code>.</p> </li> <li> <p>Ecrire une fonction <code>volume</code> qui prend en argument un objet de type <code>boite</code> et renvoie le volume de cette bo\u00eete.</p> </li> <li> <p>Dans votre programme principal, d\u00e9clarer  un tableau de 1000 \u00e9lements de type <code>boite</code>, lire le fichier <code>boites.txt</code> en stockant chaque ligne lue dans le tableau <code>boite</code>.</p> </li> <li> <p>Trouver la r\u00e9f\u00e9rence de la boite de plus grand volume, et v\u00e9rifier votre r\u00e9sultat dans le formulaire suivant :  </p> </li> </ol>"},{"location":"mp2i/pointeurs/#exercice-15-fractions","title":"Exercice 15 : Fractions","text":"<ol> <li>Cr\u00e9er un type structur\u00e9 permettant de repr\u00e9senter une fraction, ce type aura deux champs de type <code>int</code>, qu'on appelera <code>numerateur</code> et <code>denominateur</code></li> <li>Ecrire une fonction permettant d'afficher \"proprement\" une fraction dans le terminal (on pourra par exemple envisager les cas o\u00f9 le d\u00e9nominateur vaut 1 ou celui ou le num\u00e9rateur vaut 0).</li> <li> <p>Cr\u00e9er une fonction <code>simplifie</code> qui modifie la fraction pass\u00e9e en param\u00e8tre pour la rendre irreductible.</p> <p>Aide</p> <p>On rappelle que le pgcd de deux entiers peut se calculer avec l'algorithme d'Euclide :</p> <ul> <li>Si \\(b=0\\) alors l'algorithme se termine et le pgcd est \\(a\\)</li> <li>Sinon faire la division euclidienne de \\(a\\) par \\(b\\), et en notant \\(r\\) le reste, revenir \u00e0 l'\u00e9tape pr\u00e9c\u00e9dente en rempla\u00e7ant \\(a\\) par \\(b\\) et \\(b\\) par \\(a\\).</li> </ul> </li> <li> <p>Ecrire la fonction <code>addition</code> qui prend en argument deux fractions et renvoie leur somme.</p> </li> <li>Faire de m\u00eame pour les autres op\u00e9rations de base.</li> </ol>"},{"location":"mp2i/pointeurs/#exercice-16-compilation-separee","title":"Exercice 16 : Compilation s\u00e9par\u00e9e","text":"<p>On trouvera sur cette page, les fichiers <code>turtle.c</code> et <code>turtle.h</code> qui d\u00e9finissent une impl\u00e9mentation simple du dessin \u00e0 l'aide d'une tortue graphique comme dans le langage logo. c'est-\u00e0-dire qu'on peut dessiner en bougeant \u00e0 l'aide d'une \"tortue\" qui se d\u00e9place, avance, tourne, ... </p> <p>Attention</p> <p>Le module <code>turtle</code> utilise le module <code>&lt;math.h&gt;</code>, avec gcc il faudra donc utiliser l'option <code>-lm</code> pour lier le module math lors de la compilation finale.</p> <ol> <li> <p>En utilisant la m\u00e9thode de compilation s\u00e9par\u00e9e vue en cours, compiler le programme suivant qui utilise la librairie <code>turtle.h</code>. Puis visualiser l'image produite (<code>carre.bmp</code>) pour v\u00e9rifier que tout s'est bien pass\u00e9.</p> <p>Dessin avec turtle</p> <pre><code>#include \"turtle.h\"\n\nint main()\n{\n    /* cr\u00e9e une image de taille 300x300\n      le centre de l'image est le point (0,0)\n      la tortue y est positionn\u00e9e */\n    turtle_init(300, 300);          \n    /* dessin d'un carr\u00e9 de cot\u00e9 100\n     on avance de 100 et on tourne de 90\u00b0\n     \u00e0 4 reprises\n    */\n    for (int i=0;i&lt;4;i++)\n    {\n    turtle_forward(100);\n    turtle_turn_left(90);\n    }\n    // Sauve l'image pour la visualiser\n    turtle_save_bmp(\"carre.bmp\");\n    return 0;\n}\n</code></pre> </li> <li> <p>En vous inspirant de l'exemple pr\u00e9c\u00e9dent, r\u00e9aliser le dessin ci-dessous, sachant que  l'image est de dimension 500x500 et que les carr\u00e9s sont tous de c\u00f4t\u00e9 150 et qu'il sont trac\u00e9s depuis l'origine en inclinant de multiples de 10\u00b0 par rapport \u00e0 l'horizontale.</p> </li> </ol> <p></p>"},{"location":"mp2i/pointeurs/#exercice-17-module-complexe","title":"Exercice 17 : Module complexe","text":"<ol> <li> <p>Ecrire le fichier d'ent\u00eate d'un module <code>complexe</code> dans lequel on d\u00e9finit ;</p> <ul> <li>le type <code>struct complexe</code> qui repr\u00e9sente un complexe sous forme alg\u00e9brique compos\u00e9 de deux champs de type double (<code>reel</code> et <code>imaginaire</code>)</li> <li>les op\u00e9rations usuelles addition, soustraction, multiplication et division sur ce type</li> <li>la fonction <code>module</code> qui renvoie le module d'un complexe sous la forme d'un <code>double</code></li> </ul> </li> <li> <p>Ecrire l'impl\u00e9mentation de ces fonctions dans le module <code>complexe.c</code> et compiler sous la forme d'un fichier objet.</p> </li> <li> <p>Dans un fichier <code>test_complexe.c</code>, inclure le fichier d'en-t\u00eate et tester votre module.</p> </li> </ol>"},{"location":"mp2i/pointeurs/#humour-dinformaticien","title":"Humour d'informaticien","text":"<p>\"1972 - Dennis Ritchie invents a powerful gun that shoots both forward and backward simultaneously. Not satisfied with the number of deaths and permanent maimings from that invention he invents C and Unix.\"James Iry(blog)</p>"},{"location":"mp2i/progression/","title":"Liste des chapitres","text":""},{"location":"mp2i/progression/#semestre-1","title":"Semestre 1","text":"Th\u00e8me Titre C0- Syst\u00e8mes C1- Premiers pas en langage C C2- Discipline de programmation C3- Pointeurs et types structur\u00e9s C4- Arithm\u00e9tique des ordinateurs C5- R\u00e9cursivit\u00e9 C6- OCaml : aspects fonctionnels C7- Terminaison, correction, complexit\u00e9 C8- Structures de donn\u00e9es s\u00e9quentielles C9- Ocaml : aspects imp\u00e9ratifs"},{"location":"mp2i/progression/#semestre-2","title":"Semestre 2","text":"Th\u00e8me Titre C10- Tableau associatif, hachage C11- Introduction aux bases de donn\u00e9es C12- Arbres binaires C13- Force brute, retour sur trace C14- Induction C15- D\u00e9composition en sous probl\u00e8mes C16- Logique C17- Graphes C18- Mod\u00e8le entit\u00e9-association C19- Algorithmes des textes C20- Algorithmes des graphes C21- Complement sur les arbres"},{"location":"mp2i/recursivite/","title":"C5 R\u00e9cursivit\u00e9","text":"<p>\"In order to understand recursion, one must first understand recursion. \"Anonyme</p>"},{"location":"mp2i/recursivite/#cours","title":"Cours","text":"<p>Support de cours chapitre 5 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/recursivite/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD5 </p>"},{"location":"mp2i/recursivite/#travaux-pratiques","title":"Travaux pratiques","text":"<p>Note</p> <p>Pour les exercices qui suivent, lorsque cela est possible (donc lorsqu'on ne traite pas de tableaux), on pourra proposer une impl\u00e9mentation en OCaml en s'inspirant des exemples vus en cours.</p>"},{"location":"mp2i/recursivite/#exercice-1-somme-des-elements-dun-tableau","title":"Exercice 1 : Somme des \u00e9l\u00e9ments d'un tableau","text":"<ol> <li> <p>Ecrire une fonction it\u00e9rative <code>somme_iter</code> qui prend en argument un tableau d'entiers et sa taille  entier \\(n\\) et renvoie la somme des \u00e9lements de ce tableau.</p> </li> <li> <p>On note \\(S(n)\\) la somme des \u00e9l\u00e9ments du tableau jusqu'\u00e0 l'indice \\(n\\). Ecrire une relation de r\u00e9currence entre \\(S(n)\\) et \\(S(n-1)\\).</p> </li> <li> <p>Donner une version r\u00e9cursive de la fonction <code>somme</code>.</p> </li> <li> <p>Ecrire une fonction r\u00e9cursive terminale.</p> </li> </ol> <p>Aide</p> <p>Pour cet exercice, on pourra s'inspirer de la fonction <code>factorielle</code> vue en cours et dont on donne les diff\u00e9rentes versions ci-dessous :     <pre><code> int fact_iter( int n){\n     int res = 1;\n    for ( int i=1;i&lt;=n;i++){\n        res = res * i;}\n    return res;}\n\n int fact_rec( int n){\n    if (n==0)\n        {return 1;}\n    return n*fact_rec(n-1);}\n\n int fact_acc( int n,  int acc){\n    if (n==0)\n        {return acc;}\n    return fact_acc(n-1,n*acc);}\n</code></pre></p>"},{"location":"mp2i/recursivite/#exercice-2-chateau-de-cartes","title":"Exercice 2 : Chateau de cartes","text":"<p>Un ch\u00e2teau de cartes est un \u00e9chafaudage de cartes \u00e0 jouer. On a repr\u00e9sent\u00e9 ci-dessous des chateaux de cartes \u00e0 1, 2 et 3 \u00e9tages (cr\u00e9dit : DREAMaths):</p> <p></p> <ol> <li> <p>On note \\(c_n\\) le nombre de cartes n\u00e9cessaires pour construire un chateau de cartes \u00e0 \\(n\\) \u00e9tages. Etablir une relation de r\u00e9currence entre \\(c_n\\) et \\(c_{n-1}\\).</p> </li> <li> <p>Ecrire (dans le lange de votre choix) une fonction r\u00e9currente qui renvoie \\(c_n\\) pour la valeur \\(n\\) fournie en argument .</p> </li> <li> <p>Calculer \\(c_{100}\\) \u00e0 l'aide de votre programme. Vous pouvez v\u00e9rifier le r\u00e9sultat fourni par votre programme ci-dessous : </p> </li> <li> <p>Retrouver ce r\u00e9sultat par le calcul</p> </li> </ol>"},{"location":"mp2i/recursivite/#exercice-3-additions-et-soustractions","title":"Exercice 3 : Additions et soustractions","text":"<p>On suppose qu'on ne dispose que de deux op\u00e9rations : ajouter 1 ou retrancher 1.</p> <ol> <li>\u00c9crire \u00e0 l'aide de ces deux op\u00e9rations, une version it\u00e9rative de l'addition de deux entiers.</li> <li>M\u00eame question avec une version r\u00e9cursive.</li> </ol>"},{"location":"mp2i/recursivite/#exercice-4-maximum-recursif","title":"Exercice 4 : Maximum r\u00e9cursif","text":"<ol> <li> <p>Ecrire une fonction <code>max2</code> qui prend en argument deux entiers et renvoie le maximum de ces deux entiers.</p> </li> <li> <p>Ecrire une fonction r\u00e9cursive \u00a0<code>maximum</code> qui prend en argument un tableau d'entiers (et sa taille) et renvoie le maximum des \u00e9l\u00e9ments de ce tableau. </p> </li> </ol>"},{"location":"mp2i/recursivite/#exercice-5-retourner-une-chaine-de-caracteres","title":"Exercice 5 : Retourner une chaine de caract\u00e8res","text":"<ol> <li> <p>Ecrire une fonction <code>retourne</code> qui prend en argument une chaine de caract\u00e8re <code>s</code> et renvoie une chaine de caract\u00e8res contenant <code>s</code> \u00e9crite \u00e0 l'envers. Par exemple si <code>char test[]=\"Bonjour\"</code>, alors <code>retourne(s)</code> renvoie la chaine <code>ruojnoB</code>.</p> </li> <li> <p>On d\u00e9compose une <code>chaine</code> en <code>chaine = debut + dernier caract\u00e8re</code>, compl\u00e9ter la d\u00e9finition r\u00e9cursive suivante :     <code>envers(chaine) = .......... + envers(.......)</code></p> </li> <li> <p>En d\u00e9duire une version r\u00e9cursive de la fonction <code>envers</code></p> <p>Aide</p> <p>On pourra \u00e9crire au pr\u00e9alable une fonction <code>debut(chaine)</code> qui renvoie la chaine priv\u00e9e de son dernier caract\u00e8re. </p> </li> </ol>"},{"location":"mp2i/recursivite/#exercice-6-algorithme-deuclide-de-calcul-du-pgcd","title":"Exercice 6 : Algorithme d'Euclide de calcul du pgcd","text":"<ol> <li>Revoir si besoin l'algorithme d'Euclide permettant de calculer le pgcd de deux entiers.</li> <li>Donner une impl\u00e9mentation it\u00e9rative de cet algorithme</li> <li>Donner une impl\u00e9mentation r\u00e9cursive de cet algorithme</li> </ol>"},{"location":"mp2i/recursivite/#exercice-7-recherche-dichotomique-dans-un-tableau-trie","title":"Exercice 7 : Recherche dichotomique dans un tableau tri\u00e9","text":"<p>L'algorithme de recherche dichotomique, s'applique lorsque le tableau est tri\u00e9, il consiste \u00e0 comparer l'\u00e9l\u00e9ment cherch\u00e9 avec celui situ\u00e9 au milieu du tableau. Si la comparaison est infructueuse, on relance la recherche dans la moiti\u00e9 de tableau pertinente, ainsi \u00e0 chaque \u00e9tape, la taille de la zone de recherche est divis\u00e9e par deux. </p> <p>Par exemple, si on recherche \\(\\textcolor{red}{28}\\) dans \\([14, 15, 17, 22, 23, 25, 29, 34, 38]\\), le tableau ci-dessous repr\u00e9sente les \u00e9tapes de la m\u00e9thode :</p> Etape Zone de recherche Milieu Comparaison \\(\\underbrace{[\\overset{\\textcolor{red}{_\\wedge^{0}}}{14}, 15, 17, 22,}_{ } \\underset{_4^\\uparrow}{\\textcolor{darkblue}{23}} , \\overbrace{25, 29, 34, \\underset{\\textcolor{red}{_8^{\\vee}}}{38}]}_{ }\\) \\((0+8)/2 = 4\\) \\(\\textcolor{darkblue}{23} &lt;\\textcolor{red}{28}\\) \\([\\colorbox{lightgray}{14, 15, 17, 22,23} , \\underbrace{\\overset{\\textcolor{red}{_\\wedge^{5}}}{25}} \\underset{_6^\\uparrow}{\\textcolor{darkblue}{29}}, \\overbrace{34, \\underset{\\textcolor{red}{_8^{\\vee}}}{38}]}_{ }\\) \\((5+8)/2=6\\) \\(\\textcolor{darkblue}{29} \\geq \\textcolor{red}{28}\\). \\([\\colorbox{lightgray}{14, 15, 17, 22,23} , \\underset{_5^\\uparrow}{\\overset{\\textcolor{red}{_\\wedge^{5}}}{25}}, \\underset{\\textcolor{red}{_6^{\\vee}}}{29} \\colorbox{lightgray}{34,38}]\\) \\((5+6)/2=5\\) \\(\\textcolor{darkblue}{25} &lt; \\textcolor{red}{28}\\). \\([\\colorbox{lightgray}{14, 15, 17, 22,23,25} \\underset{\\textcolor{red}{_6^{\\vee}}}{\\overset{\\textcolor{red}{_\\wedge^6}}{29}} \\colorbox{lightgray}{34,38}]\\) - - <p>Arr\u00eat de l'algorithme, \\(28\\) n'est pas dans la liste.</p> <ol> <li> <p>Ecrire en langage C une impl\u00e9mentation r\u00e9cursive de cet algorithme sous la forme d'une fonction de signature <code>int dichotomie(int tab[], int v, int debut, int fin)</code> qui recherche dans le tableau <code>tab</code>, la valeur <code>v</code> en se limitant \u00e0 la zone de recherche comprise entre <code>debut</code> et <code>fin</code> (inclus). Initialement, on a donc <code>debut=0</code> et <code>fin</code> \u00e9gale \u00e0 la taille du tableau -1. Cette fonction renvoie <code>-1</code> si l'\u00e9l\u00e9ment ne se trouve pas dans le tableau et sinon un indice <code>i</code> tel que <code>tab[i]</code> soit la valeur cherch\u00e9e.</p> </li> <li> <p>Proposer un jeu de tests pour votre fonction sous la forme d'instructions <code>assert</code>.</p> </li> <li> <p>Ecrire une version it\u00e9rative de la recherche dichotomique.</p> </li> </ol>"},{"location":"mp2i/recursivite/#exercice-8-pair-et-impair","title":"Exercice 8 : Pair et impair","text":"<p>On d\u00e9finit les fonctions <code>pair</code> et <code>impair</code> de fa\u00e7on mutuellement r\u00e9cursive de la fa\u00e7on suivante :</p> <ul> <li>l'appel <code>pair(0)</code> renvoie <code>true</code> et l'appel <code>pair(n)</code> renvoie <code>impair(n-1)</code> pour <code>n &gt; 0</code></li> <li> <p>l'appel <code>impair(0)</code> renvoie <code>false</code> et l'appel <code>impair(n)</code> renvoie <code>pair(n-1)</code> pour <code>n&gt;0</code></p> </li> <li> <p>Donner une impl\u00e9mentation en C de ces deux fonctions.</p> </li> <li> <p>Donner une impl\u00e9mentation en OCaml de ces deux fonctions.</p> </li> </ul>"},{"location":"mp2i/recursivite/#exercice-9-chiffres-romains","title":"Exercice 9 : Chiffres romains","text":"<p>En num\u00e9ration romaine, les nombres s'\u00e9crivent avec les symboles suivants :</p> <ul> <li>I valant 1</li> <li>V valant 5</li> <li>X valant 10</li> <li>L valant 50</li> <li>C valant 100</li> <li>D valant 500</li> <li>M valant 1000</li> </ul> <p>On lit un nombre de la gauche vers la droite, si la valeur d'un symbole est inf\u00e9rieure \u00e0 celle du suivant alors on retranche sa valeur du total, sinon on l'ajoute. Par exemple, <code>XIV</code> vaut <code>14</code> car la valeur du <code>I</code> doit \u00eatre retranch\u00e9e (car inf\u00e9rieure \u00e0 celle de <code>V</code>).</p> <ol> <li> <p>Ecrire une fonction de signature <code>int valeur_symbole(char s)</code> qui renvoie la valeur du symbole donn\u00e9 en argument.</p> <p>Note</p> <p>On peut utiliser une suite de <code>if</code> imbriqu\u00e9s ou alors un <code>switch</code> (mais qui n'est pas au programme de MP2I).</p> </li> <li> <p>Ecrire une fonction r\u00e9cursive de signature <code>int valeur(char s[])</code> qui renvoie la valeur du nombre romains <code>s</code> donn\u00e9 sous la forme d'une suite de caract\u00e8res.</p> </li> </ol>"},{"location":"mp2i/recursivite/#exercice-10-melange-de-fisher-yates","title":"Exercice 10 : M\u00e9lange de Fisher-Yates","text":"<p>Le m\u00e9lange de Fisher-Yates est un algorithme permettant de g\u00e9n\u00e9rer une permutation al\u00e9atoire d'un tableau \u00e0 \\(n\\) \u00e9l\u00e9ments. Il consiste \u00e0 parcourir le tableau de la fin vers le d\u00e9but, en \u00e9changeant l'\u00e9l\u00e9ment al\u00e9atoirement avec un de ceux qui le pr\u00e9c\u00e8de. c'est-\u00e0-dire que pour l'indice \\(i\\) variant de \\(n-1\\) \u00e0 1 on \u00e9change <code>tab[i]</code> avec <code>tab[j]</code> o\u00f9 \\(j\\) est choisi al\u00e9atoirement entre \\(0\\) et \\(i\\).</p> <ol> <li> <p>Proposer une version it\u00e9rative de cet algorithme</p> </li> <li> <p>Proposer une version r\u00e9cursive de cet algorithme</p> <p>Aide</p> <p>On pourra passer en argument en plus du tableau l'indice \\(i\\).</p> </li> </ol>"},{"location":"mp2i/recursivite/#exercice-11-dessin-recursif","title":"Exercice 11 : Dessin r\u00e9cursif","text":"<p>Attention</p> <p>L'exercice suivant utilise le module <code>turtle</code> d\u00e9j\u00e0 rencontr\u00e9 dans cet exercice du chapitre pointeurs et type structur\u00e9.</p> <ol> <li> <p>Dessiner une suite de carr\u00e9s imbriqu\u00e9s tel que repr\u00e9sent\u00e9 ci-dessous (l'image est de dimension 400x400, le carr\u00e9 initial mesure 300 pixels de c\u00f4t\u00e9 et la taille diminue ensuite de 30 pixels \u00e0 chaque carr\u00e9) </p> </li> <li> <p>Si vous aviez donn\u00e9 une version it\u00e9rative de ce dessin, en faire une version r\u00e9cursive et inversement.</p> </li> </ol>"},{"location":"mp2i/recursivite/#exercice-12-comparaison-de-deux-chaines-de-caracteres","title":"Exercice 12 : Comparaison de deux chaines de caract\u00e8res","text":"<ol> <li> <p>Ecrire de fa\u00e7on it\u00e9rative, une fonction <code>compare(chaine1,chaine2)</code> qui renvoie le nombre de fois o\u00f9 <code>chaine1</code>  et <code>chaine2</code> ont le m\u00eame caract\u00e8re au m\u00eame emplacement. A titre d'exemples : </p> <ul> <li><code>compare(\"recursif\",\"iteratif\")</code> renvoie 2, </li> <li><code>compare(\"Python\",\"Javascript\")</code> renvoie 0. </li> </ul> </li> <li> <p>\u00c9crire cette m\u00eame fonction de fa\u00e7on r\u00e9cursive.</p> </li> </ol>"},{"location":"mp2i/recursivite/#exercice-13-retour-sur-lexponentiation-rapide","title":"Exercice 13 : Retour sur l'exponentiation rapide","text":"<ol> <li> <p>Rappeler l'algorithme d'exponentiation rapide vue en cours</p> </li> <li> <p>En proposer une impl\u00e9mentation (r\u00e9cursive) dans le langage de votre choix</p> </li> <li> <p>On s'int\u00e9resse maintenant \u00e0 une impl\u00e9mentation it\u00e9rative de cet algorithme</p> <ol> <li> <p>Soit \\(n \\in \\mathbb{n}\\), on note \\(\\overline{a_p\\dots a_1a_0}^{2}\\) son \u00e9criture en base 2. Pour tout r\u00e9el \\(x\\), donner l'expression de \\(x^n\\) en fonction des \\((a_k)_{0 \\leq k \\leq p}\\)</p> </li> <li> <p>D\u00e9duire de l'\u00e9criture pr\u00e9c\u00e9dente une impl\u00e9mentation it\u00e9rative de l'exponentiation rapide.</p> </li> </ol> </li> </ol>"},{"location":"mp2i/recursivite/#exercice-14-dessin-du-flocon-de-von-koch","title":"Exercice 14 : Dessin du flocon de Von Koch","text":"<p>Attention</p> <p>L'exercice suivant utilise le module <code>turtle</code> d\u00e9j\u00e0 rencontr\u00e9 dans cet exercice du chapitre pointeurs et type structur\u00e9.</p> <p>La courbe de Koch est une figure qui se construit de mani\u00e8re r\u00e9cursive. Le cas de base d'ordre 0 et de longueur \\(l\\) s'obtient en tra\u00e7ant un segment de longueur \\(l\\) . Le cas r\u00e9cursif d'ordre \\(n&gt;0\\) s'obtient en tra\u00e7ant successivement quatre courbes d'ordre \\(n-1\\) et de longueur \\(l/3\\) de la fa\u00e7on suivante :</p> <p></p> <ol> <li> <p>A l'aide du module <code>turtle</code>, produire une image tel que ci-dessous qui repr\u00e9sente la courbe de Koch d'ordre 5. Le r\u00e9sultat produit ci-dessus a \u00e9t\u00e9 obtenu gr\u00e2ce \u00e0 l'appel <code>koch(600,5)</code> (la largeur de l'image est de 500px et sa hauteur 300) </p> </li> <li> <p>En utilisant cette fonction construire le flocon de Koch, c'est-\u00e0-dire la figure obtenu en construisant les courbe de Koch sur les trois c\u00f4t\u00e9s d'un triangle \u00e9quilat\u00e9ral.</p> </li> </ol>"},{"location":"mp2i/recursivite/#exercice-15-tours-de-hanoi","title":"Exercice 15 : Tours de Hanoi","text":"<p>Invent\u00e9 par le math\u00e9maticien fran\u00e7ais Edouard Lucas,  les tours de Hano\u00ef sont un jeu de r\u00e9flexion dans lequel on doit d\u00e9placer des disques de tailles croissantes d'une tour de d\u00e9part \u00e0 une tour d'arriv\u00e9e en respectant les contraintes suivantes : </p> <ul> <li>on ne peut d\u00e9placer qu'un disque \u00e0 la fois, celui situ\u00e9 en haut de la tour</li> <li>on ne peut jamais d\u00e9placer un disque sur un disque plus petit.</li> </ul> <p>Le but de l'exercice est de r\u00e9soudre par r\u00e9cursivit\u00e9 le probl\u00e8me des d\u00e9placements des \\(n\\) disques de la tour de d\u00e9part \u00e0 la tour d'arriv\u00e9e.</p> <ol> <li> <p>Faire quelques parties en ligne \u00e0 cette adresse pour comprendre le jeu.</p> </li> <li> <p>R\u00e9solution automatique par r\u00e9cursivit\u00e9</p> <ol> <li>Compl\u00e9ter la description de chacune des \u00e9tapes de la r\u00e9solution du probl\u00e8me pour 6 disques illustr\u00e9es ci-dessous :</li> </ol> Etape Illustration Descriptions 6 disques empil\u00e9s sur la tour 1 D\u00e9placement de ... disques de la tour 1 vers la tour .... D\u00e9placement du disque de la tour ... vers la tour ... D\u00e9placement de ... disques de la tour 1 vers la tour .... <ol> <li>Exprimer les \u00e9tapes  et  sous la forme de la r\u00e9solution d'un probl\u00e8me de tours de Hanoi dont on pr\u00e9cisera la tour d'arriv\u00e9e, la tour de d\u00e9part ainsi que le nombre de disque.</li> <li> <p>Compl\u00e9ter :</p> <p>Pour r\u00e9soudre <code>hanoi</code> \u00e0 6 disques :  R\u00e9soudre hanoi \u00e0 ... disques   D\u00e9placer le disque de taille 6  R\u00e9soudre hanoi \u00e0 ... disques </p> </li> <li> <p>En d\u00e9duire un algorithme r\u00e9cursif pour r\u00e9soudre le probl\u00e8me des tours de Hano\u00ef.</p> </li> <li>Coder et faire fonctionner cet algorithme, on affichera les d\u00e9placements sous la forme de <code>printf</code> dans le terminal en pr\u00e9cisant les tours d'arriv\u00e9e et de d\u00e9part.</li> </ol> </li> </ol>"},{"location":"mp2i/recursivite/#exercice-16-tri-fusion","title":"Exercice 16 : Tri fusion","text":"<p>L'algorithme du tri fusion consiste \u00e0 :  </p> <ul> <li>partager le tableau \u00e0 trier en deux moiti\u00e9s (\u00e0 une unit\u00e9 pr\u00e8s), </li> <li>trier chacune des deux moiti\u00e9s, </li> <li>les fusionner pour obtenir la liste tri\u00e9e. </li> </ul> <p>On a sch\u00e9matis\u00e9 le tri du tableau <code>{10,6,3,9,7,5}</code> suivant ce principe ci-dessous : <pre><code>    graph TD\n    subgraph Partager en deux\n    S[\"{10,6,3,9,7,5}\"] --&gt; S1[\"{10,6,3}\"]\n    S --&gt; S2[\"{9,7,5}\"]\n    end\n    subgraph Fusionner\n    S1 -.Trier.-&gt; T1[\"{3,6,10}\"]\n    S2 -.Trier.-&gt; T2[\"{5,7,9}\"]\n    T1 --&gt; T[\"{3,5,6,7,9,10}\"]\n    T2 --&gt; T\n    end</code></pre></p> <p>Le tri des deux moiti\u00e9s est lui-m\u00eame effectu\u00e9 par tri fusion, cet algorithme est donc r\u00e9cursif. Le but de l'exercice est d'impl\u00e9menter cet algorithme en C en g\u00e9n\u00e9rant explicitement \u00e0 chaque \u00e9tape les deux moiti\u00e9s de tableau.</p> <ol> <li> <p>Ecrire une affiche <code>affiche</code> qui prend en argument un tableau d'entiers et sa taille, ne renvoie rien et affiche les \u00e9l\u00e9ments de ce tableau dans le terminal.</p> </li> <li> <p>Ecrire une fonction <code>fusion</code> qui prend en argument deux tableaux suppos\u00e9s tri\u00e9s (et leur taille) et renvoie le tableau tri\u00e9 issu de leur fusion. Par exemple si <code>tab1 ={3,6,10}</code> et <code>tab2={5,7,9}</code> alors <code>fusion(tab1,3,tab2,3)</code> renvoie le tableau <code>{3,5,6,7,9,10}</code>.</p> <p>Aide</p> <p>On privil\u00e9gie une solution it\u00e9rative en utilisant trois indices :</p> <ul> <li><code>i1</code> parcourt le premier tableau,</li> <li><code>i2</code> parcourt le second tableau,</li> <li><code>i</code> parcourt la fusion de deux.</li> </ul> <p>A chaque \u00e9tape, soit <code>i1</code> est incr\u00e9ment\u00e9 (quand on prend un \u00e9l\u00e9ment du tableau 1), soit c'est <code>i2</code> (quand on prend un \u00e9l\u00e9ment du tableau 2).</p> </li> <li> <p>Ecrire une fonction <code>partage</code> qui prend en argument un tableau d'entiers <code>tab</code>, deux entiers <code>size1</code> et <code>size2</code>, et deux tableaux d'entiers <code>moitie1</code>, <code>moitie2</code> et qui modifie <code>moitie1</code> et <code>moitie2</code> afin que <code>moitie1</code> contienne les \u00e9l\u00e9ments de <code>tab</code> d'indice <code>0..size1-1</code> et <code>moitie2</code> ceux d'indice <code>size1...size1+size2-1</code>. Par exemple si <code>tab</code> contient <code>{10,6,3,9,7,5}</code> alors apr\u00e8s l'appel <code>partage(tab,moitie1,3,moitie2,3)</code>, <code>moitie1</code> contiendra <code>{10,6,3}</code> et <code>moitie2</code> contiendra <code>{9,7,5}</code>.</p> </li> <li> <p>Programmer l'algorithme du tri fusion.</p> <p>Attention</p> <p>Penser \u00e0 v\u00e9rifier l'absence de fuites m\u00e9moires.</p> </li> </ol>"},{"location":"mp2i/recursivite/#exercice-17-suite-look-and-say","title":"Exercice 17 : Suite look and say","text":"<p>La suite look and say a pour premiers termes : <code>1, 11, 21, 1211, 111221, 312211, ...</code> en effet chaque terme s'obtient en regardant puis en disant le terme pr\u00e9c\u00e9dent. Le premier terme <code>1</code> se lit \"un un\" et donc le second terme est <code>11</code> qui se lit <code>deux un</code> et donc le troisi\u00e8me terme est <code>21</code> qui se lit <code>un deux un un</code> et donc le quatri\u00e8me terme est <code>1211</code> et ainsi de suite. Le but de l'exercice est de g\u00e9n\u00e9rer les termes de cette  suite de fa\u00e7on imp\u00e9rative en C puis de fa\u00e7on r\u00e9cursive en OCaml.</p> <ol> <li> <p>Ecrire une fonction <code>int chiffre(char c)</code> qui prend en entr\u00e9e un caract\u00e8re <code>c</code> appartenant \u00e0 <code>'0', '1', '2', ..., '9'</code> et renvoie le chiffre correspondant. Par exemple <code>chiffre('7')</code> renvoie l'entier <code>7</code>. </p> </li> <li> <p>Ecrire en C une fonction <code>char* suivant(char *terme)</code> qui prend en argument une chaine de caract\u00e8res <code>terme</code> repr\u00e9sentant un terme de la suite et renvoie le terme suivant. Afin d'allouer l'espace m\u00e9moire pour le terme suivant on pourra utiliser un majorant de sa longueur en fonction de celle de <code>terme</code>.</p> <p>Aide</p> <p>On pourra proc\u00e9der en parcourant la chaine <code>s</code> tout en mettant \u00e0 jour deux variables :</p> <ul> <li>l'une contenant le caract\u00e8re courant</li> <li>l'autre son nombre d'apparition</li> </ul> <p>Lorsque le caract\u00e8re suivant n'est pas le caract\u00e8re courant on remet \u00e0 1 nombre d'apparition. On fera bien attention qu'\u00e0 la fin du parcours, il restera \u00e0 ajouter le terme en cours de construction.</p> <p>Tester votre fonction en calculant le 15e terme de la suite :   </p> </li> <li> <p>Faire une conjecture sur les chiffres pouvant apparaitre dans les termes de cette suite. Puis prouver cette conjecture (on pourra raisonner par r\u00e9currence).</p> </li> <li> <p>On souhaite maintenant utiliser le fait que les seuls chiffres apparaissant dans la suite look and say sont 1, 2 et 3 afin d'\u00e9crire une version r\u00e9cursive du calcul du terme suivant. Pour cela, le cas r\u00e9cursif consiste \u00e0 consid\u00e9rer les trois premiers chiffres du terme pr\u00e9c\u00e9dent et le cas de base est celui d'un terme contenant moins de 3 chiffres. Ecrire cette version r\u00e9cursive en OCaml sous la forme d'une fonction <code>suivant : string -&gt; string</code> qui prend un terme sous la forme d'une chaine de caract\u00e8res et renvoie ce terme (toujours sous la forme d'une chaine de caract\u00e8res).</p> </li> <li> <p>En utilisant un programme en OCaml, retrouver la valeur du 15e terme de la suite.</p> </li> </ol>"},{"location":"mp2i/recursivite/#humour-dinformaticien","title":"Humour d'informaticien","text":"<p>Le moteur de recherche Google est connu pour abriter de nombreux easter eggs. Si vous taper comme recherche le mot recursion, on vous enverra vers la recherche de recursion ...</p> <p></p>"},{"location":"mp2i/sl/","title":"C8 Structures de donn\u00e9es s\u00e9quentielles","text":"<p>\"Smart data structures and dumb code works a lot better than the other way around.\"Eric Raymond(in The Cathedral and the Bazaar, 1999)</p>"},{"location":"mp2i/sl/#cours","title":"Cours","text":"<p>Support de cours chapitre 8 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/sl/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD8 </p>"},{"location":"mp2i/sl/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"mp2i/sl/#exercice-1-listes-chainees-en-c","title":"Exercice 1 : Listes chain\u00e9es en C","text":"<p>On reprend l'impl\u00e9mentation vue en cours pour les listes simplement cha\u00een\u00e9es en C : <pre><code>        struct maillon_s\n        {\n            int valeur;\n            struct maillon_s * suivant;\n        };\n        typedef struct maillon_s maillon;\n        typedef maillon* liste;\n</code></pre> On d\u00e9finit donc ici une liste comme un pointeur vers le maillon de t\u00eate, ainsi une liste vide correspond au pointeur <code>NULL</code>.</p> <ol> <li> <p>Ecrire les fonctions suivante :</p> <ol> <li><code>cree_liste</code> de signature <code>liste cree_liste()</code> qui renvoie la liste vide.</li> <li><code>affiche</code> de signature <code>affiche(liste l)</code> qui affiche les \u00e9l\u00e9ments de la liste <code>l</code>.</li> <li> <p><code>ajoute</code> de signature <code>void ajoute(liste *l, int val)</code> qui ajoute en t\u00eate de liste la valeur <code>val</code>.</p> <p>Aide</p> <ul> <li>On notera bien que cela modifie la liste pass\u00e9e en param\u00e8tre et que donc on utilise un pointeur vers cette liste.</li> <li>Comme souvent, lorsqu'on programme en utilisant les listes chain\u00e9es, le crayon et le papier sont ici des alli\u00e9s de poids. On recommande vivement de sch\u00e9matiser rapidement les op\u00e9rations effectu\u00e9es par <code>ajoute</code> (voir cours).</li> </ul> </li> <li> <p><code>supprime</code> de signature <code>supprime(list *l)</code> qui supprime l'\u00e9l\u00e9ment situ\u00e9 en t\u00eate de la liste.</p> </li> <li><code>detruit</code> qui lib\u00e8re enti\u00e8rement l'espace m\u00e9moire allou\u00e9 aux maillons d'une liste.</li> </ol> </li> <li> <p>Tester vos fonctions en cr\u00e9ant puis en affichant la liste des 10 premiers entiers</p> </li> <li> <p>Impl\u00e9menter d'autres fonctions sur votre structure de donn\u00e9es (taille, acc\u00e8s au n-i\u00e8me \u00e9l\u00e9ment, somme des \u00e9l\u00e9ments, \\(\\dots\\)).</p> </li> <li> <p>V\u00e9rifier l'absence de fuites m\u00e9moires.</p> </li> <li> <p>Reprendre cette exercice en cr\u00e9ant un type de liste doublement cha\u00een\u00e9es (vers le suivant et vers le pr\u00e9c\u00e9dent) appel\u00e9  deque (pour double ended queue) dans lequel on conserve un acc\u00e8s vers la t\u00eate de la liste (afin de pouvoir ajouter ou retirer un \u00e9l\u00e9ment \"\u00e0 gauche\" comme dans une liste chain\u00e9e \"traditionnelle\") mais aussi un acc\u00e8s vers le dernier \u00e9l\u00e9ment de la liste afin de pouvoir ajouter ou retirer un \u00e9l\u00e9ment \"\u00e0 droite\" de la liste en temps constant.</p> </li> </ol>"},{"location":"mp2i/sl/#exercice-2-implementation-avec-maillon-fantome","title":"Exercice 2 : Impl\u00e9mentation avec maillon fant\u00f4me","text":"<p>Une impl\u00e9mentation alternative des listes chain\u00e9es consiste \u00e0 utiliser un maillon de t\u00eate toujours vide, on parle alors de maillon fant\u00f4me ou maillon sentinelle (dummy head en anglais). Par rapport \u00e0 l'impl\u00e9mentation vue en cours (et trait\u00e9 dans l'exercice pr\u00e9c\u00e9dent), on n'a plus besoin de traiter le cas particulier de la liste vide dans les fonctions (une liste n'est jamais <code>NULL</code>, elle poss\u00e8de au moins le maillon fant\u00f4me). Le passage d'un pointeur sur un pointeur de maillon (m\u00eame si cela a \u00e9t\u00e9 masqu\u00e9 avec le type <code>list</code> dans l'impl\u00e9mentation pr\u00e9c\u00e9dente) n'est plus utilis\u00e9, cette impl\u00e9mentation est donc parfois consid\u00e9r\u00e9e comme plus facile.</p> <p>On a repr\u00e9sent\u00e9 ci-dessous la liste contenant les valeurs <code>5, 7, 4</code> avec cette impl\u00e9mentation, la valeur du maillon fant\u00f4me n'\u00e9tant pas utilis\u00e9e, on l'a repr\u00e9sent\u00e9 avec <code>@</code>.</p> <pre><code>    graph LR\n    classDef dashed stroke-dasharray:5 5,stroke:#333,fill:#eef,rx:5px,ry:5px;\n    classDef null stroke:#FFFFFF, fill:#FFFFFF\n    A[\"@\"] --&gt; B[\"5\"] --&gt; C[\"7\"] --&gt; D[\"4\"] --&gt; E[\"NULL\"]\n    class A dashed;\n    class E null;</code></pre> <p>Pour mettre en oeuvre cette impl\u00e9mentation, on propose le type structur\u00e9 suivant : <pre><code>struct list_s\n{\n    int value;\n    struct list_s * next;\n};\ntypedef struct list_s list;\n</code></pre></p> <p>Note</p> <p>Remarquez bien la diff\u00e9rence avec l'impl\u00e9mentation pr\u00e9c\u00e9dente, une liste est maintenant un maillon et non plus un pointeur vers un maillon.</p> <ol> <li> <p>Ecrire la fonction de signature <code>list make_list()</code> qui renvoie une liste vide.</p> </li> <li> <p>Ecrire la fonction de signature <code>void add(list *l, int v)</code> qui ajoute une valeur <code>v</code> en t\u00eate de liste (donc apr\u00e8s le maillon fantome)</p> </li> <li> <p>Ecrire la fonction de signature <code>void view(list l)</code> permettant d'afficher une liste puis tester votre impl\u00e9mentation.</p> </li> <li> <p>Ecrire la fonction de signature <code>int del(list *l)</code> qui supprime le maillon suivant le maillon fantome et renvoie sa valeur.</p> </li> <li> <p>On propose maintenant d'utiliser le maillon de t\u00eate afin d'y stocker la taille de la liste. Modifier en cons\u00e9quence les fonctions pr\u00e9c\u00e9dentes et \u00e9crire la fonction de signature <code>int size(list l)</code> qui renvoie le nombre d'\u00e9l\u00e9ments de la liste.</p> </li> </ol>"},{"location":"mp2i/sl/#exercice-3-des-listes-dentiers-en-ocaml","title":"Exercice 3 : Des listes d'entiers en OCaml","text":"<p>En OCaml, on consid\u00e8re le type somme suivant afin de repr\u00e9senter  des listes d'entiers :</p> <p><pre><code>    type intlist =\n    | Vide\n    | TeteQueue of int * intlist;;\n</code></pre> C'est \u00e0 dire qu'une liste d'entier est soit vide, soit form\u00e9 d'un couple <code>(tete, queue)</code> o\u00f9 <code>tete</code> est un entier et <code>queue</code> une liste d'entiers.</p> <ol> <li> <p>Ecrire une fonction <code>ajoute : int -&gt; intlist -&gt; intlist</code> qui ajoute un entier en t\u00eate d'une <code>intlist</code>.</p> </li> <li> <p>Ecrire une fonction <code>aleatoire : int -&gt; int -&gt; int -&gt; intlist</code> qui prend en argument trois entiers <code>n</code>, <code>vmin</code> et <code>vmax</code> et renvoie une <code>intlist</code> de <code>n</code> entiers compris entre <code>vmin</code> et <code>vmax</code>.</p> </li> <li> <p>Ecrire une fonction <code>affiche : intlist -&gt; unit</code> qui affiche les \u00e9l\u00e9ments d'une <code>intlist</code> </p> </li> <li> <p>Ecrire une fonction <code>longueur : intlist -&gt; int</code> qui renvoie le nombre d'\u00e9lements d'une <code>intlist</code></p> </li> <li> <p>Ecrire une fonction <code>enleve : intlist -&gt; intlist</code> qui supprime le premier \u00e9l\u00e9ment d'une <code>intlist</code>, on traitera le cas de la liste vide avec un <code>failwith</code></p> </li> <li> <p>Ecrire une fonction <code>partitionne : intlist -&gt; (int -&gt; bool) -&gt; int list * intlist</code> qui partitionne une <code>intlist</code> suivant le pr\u00e9dicat fourni en argument.</p> </li> </ol>"},{"location":"mp2i/sl/#exercice-4-une-implementation-des-listes-de-python-en-c","title":"Exercice 4 : Une impl\u00e9mentation des listes de Python en C","text":"<p>Le but de l'exercice est d'\u00e9crire une impl\u00e9mentation en C des list de Python et des fonctions associ\u00e9s (append et pop), on utilisera pour cela le type structur\u00e9 suivant :</p> <pre><code>    struct list\n    {\n        int current_size;\n        int max_size;\n        int *array;\n    };\n    typedef struct list list;\n</code></pre> <p>o\u00f9 le champ <code>current_size</code> contient la taille actuelle de la liste et le champ <code>array</code> est un tableau de longueur <code>max_size</code> (sup\u00e9rieur ou \u00e9gal \u00e0 <code>current_size</code>) contenant les \u00e9l\u00e9ments de la liste.</p> <ol> <li> <p>Ecrire la fonction de cr\u00e9ation d'une liste en donnant sa taille et une valeur d'initialisation. La signature de cette fonction est donn\u00e9e ci-dessous :</p> <pre><code>    list create(int size, int value)\n</code></pre> <p>On initialisera la valeur de la taille maximale \u00e0 la taille courante.</p> </li> <li> <p>Ecrire une fonction d'affichage pour une liste, on pourra pr\u00e9voir d'afficher en m\u00eame temps la taille courante et la taille maximale du tableau. La signature de cette fonction est :</p> <pre><code>    void display(list v)\n</code></pre> <p>Un exemple d'affichage est donn\u00e9 ci-dessous : <pre><code>Contenu = [10, 10, 10, 10, 10, 11 ]\nTaille actuelle : 7\nTaille maxi : 10\n</code></pre></p> </li> <li> <p>Ecrire une fonction append d'ajout d'un \u00e9l\u00e9ment \u00e0 une liste de signature :</p> <pre><code>    void append(list *v, int value)\n</code></pre> <p>On remarquera que comme en Python, notre fonction ne renvoie rien mais modifie la liste pass\u00e9 en argument (et que donc on doit passer un pointeur vers elle)</p> <p>Aide</p> <p>On devra distinguer deux cas :</p> <ul> <li>si  <code>current_size &lt; max_size</code> : on peut ajouter au tableau sans le redimensionner</li> <li>sinon, on doit doubler la taille du tableau et recopier les \u00e9l\u00e9ments pr\u00e9sents dans l'ancien tableau</li> </ul> </li> <li> <p>Ecrire une fonction pop qui supprime l'\u00e9l\u00e9ment en fin de liste et le renvoie. La signature sera :</p> <p><code>c     int pop(list *v)</code></p> <p>L\u00e0 aussi, puisque la liste est modifi\u00e9e (sa taille diminue), on doit passer un pointeur.</p> </li> <li> <p>On pourra poursuivre cet exercice en impl\u00e9mentant d'autres fonctions du type list de Python.</p> </li> </ol>"},{"location":"mp2i/sl/#exercice-5-tableaux-dynamiques-en-c","title":"Exercice 5 : Tableaux dynamiques en C","text":"<p>Le but est de l'exercice est d'impl\u00e9menter un type Vector de tableaux redimensionnables en C. On utilise le type structur\u00e9 suivant :     <pre><code>    struct vector {\n        int current_size; // nombre d'\u00e9l\u00e9ments\n        int max_size; // taille du tableau\n        int* array; // tableau utilis\u00e9 pour stocker les \u00e9l\u00e9ments\n        int default_value; //valeur par defaut d'un \u00e9l\u00e9ment du tableau\n    };\n</code></pre></p> <ol> <li> <p>Ecrire les fonctions suivantes :</p> <ol> <li> <p>Une fonction <code>create</code> de signature <code>vector create(int size, int value)</code> qui renvoie un objet de type <code>vector</code> dont les <code>size</code> \u00e9l\u00e9ments du tableau sont initialis\u00e9s \u00e0 <code>value</code>  et dont le champ <code>max_size</code> vaut aussi <code>size</code> et le champ <code>default_value</code> \u00e0 <code>value</code>.</p> </li> <li> <p>Ecrire une fonction <code>display</code> de signature <code>void display(vector v)</code> qui affiche les \u00e9l\u00e9ments d'un objet de type <code>vector</code>. Cette affichage pourra aussi indiquer les tailles actuelles (<code>current_size</code>) et maximales (<code>max_size</code>).</p> </li> <li> <p>Ecrire une fonction <code>get_element</code> de signature <code>int get_element(vector v, int index)</code> qui renvoie l'\u00e9l\u00e9ment du tableau situ\u00e9 \u00e0 l'indice <code>index</code> dans le tableau. On v\u00e9rifiera \u00e0 l'aide d'un <code>assert</code> que <code>index</code> \\(\\leq\\) <code>current_size</code>.</p> </li> <li> <p>Ecrire une fonction <code>set_element</code> de signature <code>void set_element(vector v, int index, int value)</code> qui affecte \u00e0 l'\u00e9l\u00e9ment situ\u00e9 \u00e0 l'indice <code>index</code> dans le tableau la valeur <code>value</code>.</p> </li> <li> <p>Ecrire une fonction <code>resize</code> de signature <code>void resize(vector *v, int new_size)</code> qui redimensionne le <code>v</code>. Dans le cas o\u00f9 la nouvelle taille est sup\u00e9rieure \u00e0 l'ancienne, les nouveaux \u00e9l\u00e9ments seront initialis\u00e9s \u00e0 <code>default_value</code>.</p> </li> <li> <p>Ecrire une fonction <code>destroy</code> permettant de lib\u00e9rer l'espace m\u00e9moire occup\u00e9e par l'objet <code>vector</code> donn\u00e9 en argument.</p> </li> </ol> </li> <li> <p>En revoyant si besoin le cours sur la compilation s\u00e9par\u00e9e \u00e9crire les fichiers <code>vector.h</code> et <code>vector.c</code> permettant de compiler s\u00e9par\u00e9ment les fonctions ci-dessus afin de les utiliser dans un autre programme.</p> </li> </ol>"},{"location":"mp2i/sl/#exercice-6-implementations-de-piles","title":"Exercice 6 : Impl\u00e9mentations de piles","text":"<ol> <li> <p>En C (mutable), impl\u00e9menter la structure de donn\u00e9es pile au choix \u00e0 l'aide d'une liste cha\u00een\u00e9e ou d'un tableau (voir cours). On \u00e9crira les fichiers <code>pile.h</code> et <code>pile.c</code> de fa\u00e7on \u00e0 disposer de cette structure de donn\u00e9e pour la suite.</p> </li> <li> <p>En Ocaml (non mutable) : impl\u00e9menter la structure de donn\u00e9es pile \u00e0 l'aide du type <code>list</code> de OCaml, on rappelle que ce type \u00e9tant non mutable,  <code>empiler</code> doit renvoyer une nouvelle pile et <code>depiler</code> doit renvoyer un couple (le sommet de la pile et la nouvelle pile)</p> </li> </ol>"},{"location":"mp2i/sl/#exercice-7-implementations-de-files-en-c","title":"Exercice 7 : Impl\u00e9mentations de files en C","text":"<ol> <li> <p>R\u00e9aliser en C l'impl\u00e9mentation d'une file \u00e0 l'aide d'une liste cha\u00een\u00e9e en utilisant deux pointeurs l'un vers le premier maillon de la liste et le second vers le dernier maillon</p> <p>Aide</p> <p>On fera bien attention aux cas particuliers des files contenant moins de deux \u00e9l\u00e9ments dans lesquels les deux pointeurs sont identiques</p> </li> <li> <p>R\u00e9aliser en C l'impl\u00e9mentation d'une file de taille maximale connue \\(n\\) \u00e0 l'aide d'un tableau circulaire de taille \\(n\\) (voir cours)</p> </li> </ol>"},{"location":"mp2i/sl/#exercice-8-file-de-priorite","title":"Exercice 8 : File de priorit\u00e9","text":"<p>Une file de priorit\u00e9 est une structure de donn\u00e9es dans laquelle chaque \u00e9l\u00e9ment est enfil\u00e9 avec une priorit\u00e9, lorsqu'on veut d\u00e9filer un \u00e9l\u00e9ment c'est celui ayant la plus faible priorit\u00e9 qui est extrait. Une impl\u00e9mentation efficace de cette structure de donn\u00e9es sera vu plus loin dans le cours, on propose ici de r\u00e9aliser une impl\u00e9mentation utilisant une liste chain\u00e9e d'entiers (repr\u00e9sentant les priorit\u00e9s) que l'on garde tri\u00e9e ainsi le prochain \u00e9l\u00e9ment \u00e0 d\u00e9filer se trouve toujours en t\u00eate de la liste. L'insertion doit maintenir la liste tri\u00e9e. </p> <p>Par exemple, apr\u00e8s insertion des valeurs <code>12, 7, 13, 8 , 10</code>, la liste sera :</p> <pre><code>    graph LR\n    classDef null stroke:#FFFFFF, fill:#FFFFFF\n    A[\"7\"] --&gt; B[\"8\"] --&gt; C[\"10\"] --&gt; D[\"12\"] --&gt; E[\"13\"] --&gt; F[\"NULL\"]\n    class F null</code></pre> <p>Si on d\u00e9file un \u00e9l\u00e9ment c'est celui figurant en t\u00eate de liste (donc <code>7</code> dans l'exemple) qui sera extrait.</p> <p>On utilisera le type structur\u00e9 d\u00e9j\u00e0 rencontr\u00e9 en cours : <pre><code>    struct maillon_s\n    {\n        int prio;\n        struct maillon_s *suivant;\n    };\n    typedef struct maillon_s maillon;\n    typedef maillon *fprio;\n</code></pre></p> <ol> <li> <p>Quelle sera la complexit\u00e9 des op\u00e9rations enfiler et d\u00e9filer ?</p> </li> <li> <p>Ecrire la fonction de signature <code>enfiler(list* l, int p)</code> qui enfile l'\u00e9l\u00e9ment de priorit\u00e9 <code>p</code> dans la liste <code>l</code>.</p> <p>Aide</p> <p>On rappelle que cette se fait en supposant la liste tri\u00e9e et qu'elle doit la maintenir tri\u00e9e. Comme toujours lorsqu'on utilise une liste chain\u00e9e, on recommande vivement de sch\u00e9matiser avant de passer \u00e0 la programmation. Pour l'op\u00e9ration <code>enfiler</code> on pourra distinguer les deux cas suivants :</p> <ul> <li>l'insertion s'effectue en t\u00eate de liste, cela se produit dans les deux cas suivants : la liste est vide ou alors la priorit\u00e9 du maillon de t\u00eate est sup\u00e9reure \u00e0 celle de l'\u00e9l\u00e9ment \u00e0 ins\u00e9ser,</li> <li>l'insertion s'effectue apr\u00e8s le maillon de t\u00eate.</li> </ul> </li> <li> <p>Ecrire la fonction permettant de d\u00e9filer un \u00e9l\u00e9ment et tester votre impl\u00e9mentation.</p> </li> <li> <p>Ecrire la fonction de signature <code>void detruit(fprio *f)</code> qui supprime une file de priorit\u00e9 en lib\u00e9rant l'espace m\u00e9moire allou\u00e9e lors de sa construction.</p> </li> <li> <p>On donne ci-dessous un fichier simulant l'arriv\u00e9e et la prise en charge de patients dans un hopital, chaque patient a une priorit\u00e9 de traitement unique permettant de l'identifier. L'arriv\u00e9e du patient de priorit\u00e9 <code>x</code> est indiqu\u00e9 dans le fichier par la ligne <code>+ x</code>. La prise en charge d'un patient est indiqu\u00e9 par une ligne <code>-</code>. Par exemple les lignes : <pre><code>+ 42\n+ 12\n-\n+ 7\n</code></pre> Signifient que les patients 42, 12 et 7 sont arriv\u00e9s dans cet ordre, une seule prise en charge \u00e0 eu lieu : celle du patient de priorit\u00e9 12 (il \u00e9tait au moment de la prise en charge le plus prioritaire). On pr\u00e9cise que ce fichier contient un total de 1000 op\u00e9rations (arriv\u00e9es et prise en charge). Patients  En utilisant la file de priorit\u00e9 impl\u00e9ment\u00e9e aux questions pr\u00e9c\u00e9dentes, d\u00e9terminer au terme des 1000 op\u00e9rations indiqu\u00e9es dans le fichier la liste des patients qui a \u00e9t\u00e9 prise en charge. V\u00e9rifier votre r\u00e9ponse en entrant la liste des priorit\u00e9s des patients (dans leur ordre de prise en charge et s\u00e9par\u00e9 par des virgules) dans le cadre suivant :   </p> </li> </ol>"},{"location":"mp2i/sl/#exercice-9-implementation-dune-file-avec-deux-piles","title":"Exercice 9 : Impl\u00e9mentation d'une file avec deux piles","text":"<p>On consid\u00e8re la file suivante  :  On peut aussi la sch\u00e9matiser  sous la forme de deux piles :  Pour comprendre ce fonctionnement, on part d'une file vide et on montre par quelques exemples l'\u00e9tat de la file et des deux piles qui la repr\u00e9sente : </p> Etape Op\u00e9ration Etat de la file Pile d'entr\u00e9e Pile de sortie Enfiler <code>a</code> <code>&gt;a&gt;</code> <code>|a&gt;</code> <code>|&gt;</code> Enfiler <code>b</code> <code>&gt;b,a&gt;</code> <code>|a,b&gt;</code> <code>|&gt;</code> Enfiler <code>c</code> <code>&gt;c,b,a&gt;</code> <code>|a,b,c&gt;</code> <code>|&gt;</code> D\u00e9filer (<code>a</code>) <code>&gt;c,b&gt;</code> <code>|&gt;</code> <code>|c,b&gt;</code> D\u00e9filer (<code>b</code>) <code>&gt;c&gt;</code> <code>|&gt;</code> <code>|c&gt;</code> Enfiler <code>d</code> <code>&gt;d,c&gt;</code> <code>|d&gt;</code> <code>|c&gt;</code> <p>Aide</p> <p>Observer attentivement ce qui se passe \u00e0 l'\u00e9tape  : la pile de sortie \u00e9tant vide, la totalit\u00e9 de la pile d'entr\u00e9e est d\u00e9pil\u00e9 dans la pile de sortie.</p> <ol> <li> <p>Compl\u00e9ter le tableau ci-dessous avec les \u00e9tapes suivantes :</p> <ol> <li>D\u00e9filer </li> <li>Enfiler <code>e</code></li> <li>D\u00e9filer</li> </ol> </li> <li> <p>Mettre par \u00e9crit le principe de l'impl\u00e9mentation d'une file avec deux piles (une pile d'entr\u00e9e et une pile de sortie), on indiquera pr\u00e9cis\u00e9ment :</p> <ul> <li>l'effet d'enfiler un \u00e9l\u00e9ment sur chacune des deux piles</li> <li>l'effet de d\u00e9filer sur chacune des deux piles (en distinguant les deux cas)</li> </ul> </li> <li> <p>Ecrire en OCaml une impl\u00e9mentation d'une file sous la forme de deux piles (structure non mutable).</p> </li> <li> <p>Tester votre impl\u00e9mentation (reprendre \u00e9ventuellement les op\u00e9rations  \u00e0  en faisant afficher l'\u00e9tat de la file et des deux piles \u00e0 chaque \u00e9tape). </p> <p>Pour aller plus loin</p> <p>Rechercher la complexit\u00e9 des op\u00e9rations de cette impl\u00e9mentation.</p> </li> </ol>"},{"location":"mp2i/sl/#exercice-10-expression-bien-parenthesee","title":"Exercice 10 : Expression bien parenth\u00e9s\u00e9e","text":"<p>On consid\u00e8re dans cet exercice un parenth\u00e9sage avec les couples \\((\\;), [\\;]\\) et \\(\\{\\;\\}\\). On dit qu'une expression est bien parenth\u00e9s\u00e9e lorsque chaque symbole ouvrant est associ\u00e9 \u00e0 un unique symbole fermant et si l'expression contenue \u00e0 l'int\u00e9rieur est elle-m\u00eame bien parenth\u00e9s\u00e9e. Par exemple, on a soulign\u00e9 dans l'expression suivante le probl\u00e8me de parenth\u00e9sage :  \\((3+2)\\textcolor{red}{\\underline{]}}-(4+1)\\)</p> <ol> <li> <p>Les expressions suivantes sont-elles bien parenth\u00e9s\u00e9es ? Sinon, indiquer l'emplacement dans la cha\u00eene de caract\u00e8res o\u00f9 l'erreur est d\u00e9tect\u00e9e.</p> <ol> <li>\\(3+\\left.\\left[5-4\\div(3+2)\\right]\\right]+10\\)</li> <li>\\(\\left\\{(3+2)\\times 5\\right.\\) </li> <li>\\(5)-4\\times2(\\) </li> <li>\\(\\left\\{(3+2)\\times(5-3)\\right\\}\\)</li> </ol> </li> <li> <p>Ecrire une fonction <code>bien_parenthesee</code> qui prend en argument une expression (sous la forme d'une chaine de caract\u00e8res) et qui renvoie \\(-1\\) lorsque l'expression est bien parenth\u00e9s\u00e9e et sinon un entier indiquant l'emplacement dans l'expression o\u00f9 l'erreur de parenth\u00e9sage est d\u00e9tect\u00e9e.</p> <p>Aide</p> <p>On pourra, parcourir l'expression et utiliser une pile qui stocke les indices de chaque parenth\u00e8ses ouvrante. On d\u00e9pile, lorsqu'on rencontre une parenth\u00e8se fermante.</p> </li> <li> <p>Tester votre fonction sur les expressions de la question 1.</p> </li> <li>Utiliser cette fonction afin de produire un affichage de l'erreur  avec un caract\u00e8re <code>^</code> en dessous de l'erreur. Par exemple  : \\((2+3)\\underset{\\textcolor{red}{\\wedge}}{)}-5\\)</li> </ol>"},{"location":"mp2i/sl/#exercice-11-evaluation-dune-expression-en-notation-polonaise-inverse","title":"Exercice 11 : Evaluation d'une expression en notation polonaise inverse","text":"<p>La notation polonaise inverse (npi) est une m\u00e9thode d'\u00e9criture des expressions math\u00e9matiques qui n'utilise pas de parenth\u00e8ses et qui de plus se calcule sans r\u00e8gles de priorit\u00e9. Prenons un exemple, l'expression \\((3+7)\\times5\\), s'\u00e9crit en notation polonaise invers\u00e9e : \\(3\\ 7\\ + 5 \\times\\). c'est-\u00e0-dire qu'on donne d'abord les deux op\u00e9randes puis l'op\u00e9ration. Pour d'autres exemples on pourra consulter : la page wikipedia d\u00e9di\u00e9e </p> <p>Le but de l'exercice est d'\u00e9crire une fonction  \u00e9valuant une expression en npi pass\u00e9e en param\u00e8tre \u00e0 l'aide d'une pile :</p> <ul> <li>Parcourir l'expression de gauche \u00e0 droite</li> <li>Si on rencontre un nombre l'empiler</li> <li>Si on rencontre une op\u00e9ration effectuer cette op\u00e9ration entre les deux valeurs situ\u00e9s au dessus de la pile et empiler le r\u00e9sultat</li> </ul> <p>On repr\u00e9sente ci-dessous l'\u00e9tat de la pile pour l'\u00e9valuation de \\(3\\ 7\\ + 5\\ \\times\\) :</p> 3 73 10 510 50 <p>Mettre en oeuvre cette m\u00e9thode et la tester.</p>"},{"location":"mp2i/sl/#exercice-12-mot-mystere","title":"Exercice 12 : Mot myst\u00e8re","text":"<p>Vous pouvez t\u00e9l\u00e9charger ci-dessous un fichier contenant \\(10\\,000\\) caract\u00e8res. Le but de l'exercice est de trouver une strat\u00e9gie efficace afin de d\u00e9couvrir le mot cach\u00e9 qui s'y trouve. Pour cela, \u00e0 chaque fois que deux lettres identiques se suivent, on doit les supprimer. Cela peut entrainer l'apparition de nouveau caract\u00e8res identiques qui se suivent et donc offrir de nouvelles possibilit\u00e9s de suppression. Par exemple, avec la chaine de d\u00e9part \"ASSAMPOZZOPPI\" on peut supprimer les deux S au d\u00e9but ce qui donne \"AAMPOZZOPPI\", puis \"MPOZZOPPI\", puis, \"MPOOPPI\" et enfin \"MPI\".</p> <p>Mot myst\u00e8re </p> <p>Vous pouvez tester votre r\u00e9ponse (en lettres majuscules) dans le formulaire suivant :   </p> <p>Aide</p> <p>Il faut choisir une structure de donn\u00e9es adapt\u00e9e !</p>"},{"location":"mp2i/sl/#exercice-13-probleme-de-joseph","title":"Exercice 13 : Probl\u00e8me de Joseph","text":"<p>Le but de l'exercice est d'\u00e9crire un programme permettant de r\u00e9soudre le probl\u00e8me de Joseph en simulant le d\u00e9roulement des \u00e9liminations successives.</p> <p>On repr\u00e9sente un cercle de \\(n\\) soldats par la suite de valeurs <code>1,2,..,n</code> et on d\u00e9cide que le soldat situ\u00e9 en premier dans la liste est celui qui tient l'\u00e9p\u00e9e. Ainsi en utilisant cette fa\u00e7on de repr\u00e9senter le probl\u00e8me, dans un cercle de 5 soldats le proc\u00e9d\u00e9 d\u00e9crit donne :</p> <ul> <li><code>1, 2, 3, 4, 5</code> : position initiale</li> <li><code>3, 4, 5, 1</code> (1 a \u00e9limin\u00e9 2 et transmis l'\u00e9p\u00e9e \u00e0 3)</li> <li><code>5, 1, 3</code> </li> <li><code>3, 5</code></li> <li><code>3</code></li> </ul> <ol> <li> <p>Proposer une structure de donn\u00e9es adapt\u00e9e \u00e0 la r\u00e9solution de ce probl\u00e8me (on veut que les op\u00e9rations \u00e0 effectuer sur cette structure de donn\u00e9e soient en \\(O(1)\\)).</p> </li> <li> <p>En donner une impl\u00e9mentation en C et l'utiliser afin de r\u00e9soudre ce probl\u00e8me.</p> </li> <li> <p>Quel est le soldat survivant dans un cercle d'un million de soldats ?    Vous pouvez tester votre r\u00e9ponse ci-dessous     (o\u00f9 alors avec la r\u00e9ponse math\u00e9matique au probl\u00e8me).</p> </li> </ol>"},{"location":"mp2i/sl/#exercice-14-un-etrange-clavier","title":"Exercice 14 : Un \u00e9trange clavier","text":"<p>Un ordinateur est dot\u00e9 d'un \u00e9trange clavier sur lequel ne figure que les lettres (majuscules ou minuscules) et le <code>0</code>. Lorsqu'on tape une lettre elle appara\u00eet sur la ligne du terminal \u00e0 l'\u00e9cran, mais cette ligne est limit\u00e9 \u00e0 10 caract\u00e8res et donc continuer \u00e0 taper des lettres alors  qu'il y a en d\u00e9j\u00e0  10 affich\u00e9es est sans effet. Enfin, le <code>0</code> permet d'effacer la premi\u00e8re lettre \u00e0 gauche.</p> <p>Par exemple, supposons qu'on tape dans l'ordre la suite de caract\u00e8res suivantes : <code>ZUP0M0P0I</code> alors on obtient successivement \u00e0 l'\u00e9cran <code>Z</code>, <code>ZU</code>, <code>ZUP</code>, <code>UP</code>, <code>UPM</code>, <code>PM</code>, <code>PMP</code>, <code>MP</code> et enfin <code>MPI</code>.</p> <p>Prenons un autre exemple : si on tape la suite de caract\u00e8res <code>ABCDEFGHIJKLMNOPQRSTUVWXYZ</code> alors seuls les 10 premiers apparaitront \u00e0 l'\u00e9cran et on obtiendra <code>ABCDEFGHIJ</code></p> <p>Quel sera donc le mot affich\u00e9 \u00e0 l'\u00e9cran si on tape la suite de caract\u00e8res donn\u00e9e dans le fichier ci-dessous : Touches tap\u00e9es </p> <p>Aide</p> <p>On fera bien \u00e9videmment attention \u00e0 utiliser une structure de donn\u00e9e adapt\u00e9e pour r\u00e9soudre ce probl\u00e8me.</p> <p>Tester votre r\u00e9ponse  :   </p>"},{"location":"mp2i/sl/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/systemes/","title":"C0 Syst\u00e8mes","text":"<p>\"I'm doing a (free) operating system (just a hobby, won't be big and   professional like gnu) (...)\"Linus Torvalds(comp.os.minix newsgroup 1991)</p>"},{"location":"mp2i/systemes/#cours","title":"Cours","text":"<p>Support de cours chapitre 0 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/systemes/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD0 </p>"},{"location":"mp2i/systemes/#travaux-pratiques","title":"Travaux pratiques","text":""},{"location":"mp2i/systemes/#exercice-1-les-bases-de-la-ligne-de-commande","title":"Exercice 1 : Les bases de la ligne de commande","text":"<ol> <li>En utilisant uniquement la  ligne de commande, cr\u00e9er l'arborescence suivante dans votre r\u00e9pertoire personnel :         <pre><code>    graph TD\n    A[MP2I] --&gt; B[C1-Syst\u00e8mes]\n    A[MP2I] --&gt; G[C2-OCaml]\n    A[MP2I] --&gt; F[C3-Arithm\u00e9tique]\n    B --&gt; C[Cours]\n    B --&gt; D[TD]\n    B --&gt; E[TP]</code></pre></li> <li>Renommer le dossier <code>C2-OCaml</code> en <code>C2-LangageC</code></li> <li>Aller dans le dossier <code>MP2I</code></li> <li>Taper la commande <code>tree</code>, quel est l'effet de cette commande ?</li> <li>Quelle option de la commande <code>tree</code> permet de limiter le niveau d\u2019arborescence souhait\u00e9 ?</li> </ol>"},{"location":"mp2i/systemes/#exercice-2-calendrier","title":"Exercice 2 : Calendrier","text":"<ol> <li>Ouvrir un terminal et y tester la commande <code>cal</code></li> <li>Lire la documentation de cette commande</li> <li>Quel \u00e9tait le jour de la semaine le 26 juin 1815 ?</li> <li>Quel commande faut-il \u00e9crire pour afficher le calendrier du mois de mai 1970 ?</li> </ol>"},{"location":"mp2i/systemes/#exercice-3-chercher-des-fichiers","title":"Exercice 3 : Chercher des fichiers","text":"<ol> <li>Lire les premi\u00e8res lignes de la documentation de la commande <code>find</code>. A quoi sert cette commande ?</li> <li> <p>Tester la commande <code>find ~ -name .*</code>. Expliquer le r\u00e9sultat obtenu et l'effet de la commande.</p> <p>Aide</p> <p>On rappelle que <code>~</code> d\u00e9signe votre r\u00e9pertoire personnel.</p> </li> <li> <p>Sachant que les commandes du syst\u00e8me se trouvent dans le repertoire <code>/usr/bin</code>, lister toutes les commandes dont le nom se terminent par \u00a0<code>dir</code> (<code>rmdir</code> et <code>mkdir</code> devraient donc appara\u00eetre).</p> </li> <li> <p>Alice est certaine d'avoir un fichier nomm\u00e9 <code>bob.txt</code> dans son r\u00e9pertoire personnel mais elle n'arrive plus \u00e0 le retrouver. Quelle commande devrait-elle taper ?</p> </li> <li> <p>Expliquer le but de la commande <code>find ~ -mtime 5 -name \"*.txt\"</code></p> </li> </ol>"},{"location":"mp2i/systemes/#exercice-4-gameshell","title":"Exercice 4 : Gameshell","text":"<p>Gameshell est un mini-jeu d'aventure dans le terminal dans lequel les commandes servent \u00e0 accomplir des missions. Il a \u00e9t\u00e9 developp\u00e9 par Pierre Hyvernat et Rodolphe Lepigre.</p> <ol> <li>Lancer un terminal (le raccourci clavier est Ctrl\uff0bAlt\uff0bT)</li> <li>Cr\u00e9er un dossier <code>gameshell</code> dans votre r\u00e9pertoire personnel</li> <li>Aller dans le r\u00e9pertoire <code>gameshell</code></li> <li> <p>Y copier le fichier <code>gameshell.sh</code> t\u00e9l\u00e9chargeable ci-dessous :     T\u00e9l\u00e9charger gameshell </p> <p>Note</p> <p>Depuis la ligne de commande, en l'absence de proxy (ce qui n'est pas le cas au lyc\u00e9e), on peut aussi taper : <pre><code>wget https://github.com/phyver/GameShell/releases/download/latest/gameshell.sh\n</code></pre></p> </li> <li> <p>Ajouter le droit d'ex\u00e9cution pour l'utilisateur sur le fichier <code>gameshell.sh</code>.</p> </li> <li> <p>Dans le terminal taper  <code>./gameshell.sh</code> </p> <p>A retenir</p> <p>On retiendra que pour lancer un ex\u00e9cutable  depuis le terminal, on donne son chemin. Ici puisqu'il se trouve dans le r\u00e9pertoire courant (c'est-\u00e0-dire <code>.</code>) on tape donc <code>./gameshell</code></p> <p>Aide</p> <p>Voici les principales commandes du jeu :</p> <ul> <li><code>gsh goal</code> : affiche l'objectif de la mission</li> <li><code>gsh check</code> : v\u00e9rifie que l'objectif est atteint et le cas \u00e9ch\u00e9ant passe \u00e0 la mission suivante</li> <li><code>gsh reset</code> : r\u00e9initialise la mission en cours </li> <li><code>gsh exit</code> : quitter le jeu</li> </ul> <p>Pour relancer le jeu \u00e0 partir de la derni\u00e8re sauvegarde taper <code>./gameshell-save.sh</code></p> </li> </ol>"},{"location":"mp2i/systemes/#exercice-5-the-command-line-murders","title":"Exercice 5 : The command line murders","text":"<p>Dans ce mini jeu (cr\u00e9e par Noah Veltman), vous devez r\u00e9soudre une enqu\u00eate polici\u00e8re en utilisant uniquement la ligne de commande. Pour jouer :</p> <ol> <li>Commencer par t\u00e9l\u00e9charger l'archive zip du jeu </li> <li>D\u00e9compresser cette archive dans le r\u00e9pertoire de votre choix, et aller dans le r\u00e9pertoire <code>clmystery-master</code></li> <li>Taper <code>cat instructions</code> pour demarrer</li> </ol> <p>Aide</p> <p>Toutes les commandes utiles pour r\u00e9soudre l'enqu\u00eate sont expliqu\u00e9es dans le fichier <code>cheatsheet.pdf</code> </p> <p>Lien</p> <p>En ligne (donc sans aucune installation sur son ordinateur personnel), on peut aussi jouer \u00e0 Terminus pour d\u00e9couvrir la ligne de commande</p>"},{"location":"mp2i/systemes/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/terminaison/","title":"C7 Terminaison, correction, complexit\u00e9","text":"<p>\"Beware of bugs in the above code; I have only proved it correct, not tried it.\"Donald Knuth(Correspondance avec van Emde Boas)</p>"},{"location":"mp2i/terminaison/#cours","title":"Cours","text":"<p>Support de cours chapitre 7 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/terminaison/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD7 </p>"},{"location":"mp2i/terminaison/#travaux-pratiques","title":"Travaux pratiques","text":"<p>Danger</p> <p>En cas de difficult\u00e9s sur les exercices de programmation propos\u00e9s dans ce chapitre, revenir sur ceux du chapitre pr\u00e9c\u00e9dent d'introduction \u00e0 OCaml.</p>"},{"location":"mp2i/terminaison/#exercice-1-compilation-en-ocaml","title":"Exercice 1 : Compilation en OCaml","text":"<ol> <li> <p>Ecrire dans \u00a0<code>utop</code> une fonction r\u00e9cursive <code>somme_carres : int -&gt; int</code> qui prend en entr\u00e9e un entier <code>n</code> positif et renvoie la somme des carr\u00e9s des entiers de 0 \u00e0 <code>n</code> (on calculera r\u00e9cursivement sans utiliser la formule donnant le r\u00e9sultat g\u00e9n\u00e9ral). Utiliser cette fonction afin de calculer la somme des carr\u00e9s entiers de 1 \u00e0 2024.</p> </li> <li> <p>On veut maintenant, \u00e9crire une version compil\u00e9e de ce programme, recopier dans <code>VS Code</code> le code de la fonction <code>somme_carres</code>. Le compilateur OCaml, est <code>ocamlopt</code>, comme avec <code>gcc</code>, on peut pr\u00e9ciser le nom de l'ex\u00e9cutable cr\u00e9e avec l'option <code>-o</code>. </p> <p>Aide</p> <p>Par exemple, pour compiler le programme <code>hello.ml</code> et produire l'ex\u00e9cutable <code>hello.exe</code>, on \u00e9crira simplement <code>ocamlopt hello.ml -o hello.exe</code>. </p> <p>Afin que le programme compil\u00e9 affiche la somme des carr\u00e9s entiers de 1 \u00e0 2024, on ajoute en fin de programme <code>let () = print_int (somme_carres 2024); print_newline () ;;</code>. En effet, la derni\u00e8re expression ne doit \u00eatre qu'un simple affichage, \u00e9crire <code>let () = ...</code> permet de v\u00e9rifier que l'\u00e9valuation de l'expression (un affichage) renvoie bien <code>()</code>.</p> </li> </ol>"},{"location":"mp2i/terminaison/#exercice-2-fonctions-anonymes","title":"Exercice 2 : Fonctions anonymes","text":"<p>On peut d\u00e9finir en OCaml des fonction anonymes, \u00e0 l'aide de la syntaxe <code>fun arg1 .. argn -&gt; expr</code> par exemple l'expression <code>let c = (fun n -&gt; n*n) 10;;</code> s'\u00e9value \u00e0 <code>100</code> car on applique la fonction (anonyme) \\(n \\mapsto n^2\\) \u00e0 10.</p> <ol> <li> <p>Ecrire une fonction <code>entiers</code> qui prend en argument un entier <code>n</code> et renvoie la liste des entiers de <code>n</code> \u00e0 <code>1</code>. </p> </li> <li> <p>En utilisant une fonction anonyme et <code>List.map</code> transformer cette liste en celle des inverses des entiers</p> </li> <li> <p>Calculer la somme des \u00e9l\u00e9ments de cette liste \u00e0 l'aide d'un <code>List.fold</code></p> </li> </ol>"},{"location":"mp2i/terminaison/#exercice-3-creation-et-affichage","title":"Exercice 3 : Creation et affichage","text":"<ol> <li> <p>Ecrire en OCaml une fonction <code>aleatoire</code> qui prend en argument un entier <code>n</code> et un entier  <code>vmin</code> et <code>vmax</code> et renvoie une liste de <code>n</code> valeurs enti\u00e8res comprises entres 0 et <code>vmax</code></p> <p>Aide</p> <p>En OCaml la fonction <code>Random.int</code> renvoie un entier au hasard entre 0 (inclus) et la valeur enti\u00e8re donn\u00e9e en argument (exclus).</p> </li> <li> <p>Ecrire en OCaml une fonction <code>affiche</code> qui prend en argument une liste d'entiers et l'affiche \u00e0 la fa\u00e7on de <code>utop</code>. Par exemple <code>affiche [2; 6; 7 ]</code> doit afficher dans le terminal <code>[2; 6; 7 ]</code></p> </li> </ol>"},{"location":"mp2i/terminaison/#exercice-4-manipulations-de-listes","title":"Exercice 4 : Manipulations de listes","text":"<ol> <li> <p>Ecrire une fonction <code>pair_impair : int list -&gt; int list * int list</code> qui prend en argument une liste d'entiers et renvoie la liste des \u00e9l\u00e9ments pairs et celle des \u00e9l\u00e9ments impairs. Par exemple <code>pair_impair [2; 7; 5; 4; 11; 8];;</code> renvoie <code>([2; 4; 8], [7; 5; 11])</code></p> </li> <li> <p>Ecrire une fonction <code>entrelace : 'a list -&gt; 'a list -&gt; 'a list</code> qui \"entrelace\" les deux listes donn\u00e9es en argument en piochant alternativement un \u00e9l\u00e9ment dans chacune des deux listes (jusqu'\u00e0 ce que l'une des deux soit vide), par exemple <code>entrelace [1; 2; 3] [2; 6; 5];;</code> renvoie <code>[1; 2; 2; 6; 3; 5]</code></p> </li> <li> <p>Ecrire une fonction <code>compression : int list -&gt; int list</code> qui prend en argument une liste et renvoie cette liste dans laquelle les \u00e9l\u00e9ments cons\u00e9cutifs \u00e9gaux ont \u00e9t\u00e9 supprim\u00e9s. Par exemple <code>compression [2; 2; 2; 1; 1; 2; 2; 2; 2]</code> renvoie <code>[2, 1, 2]</code>.</p> </li> </ol>"},{"location":"mp2i/terminaison/#exercice-5-tri-par-insertion-en-ocaml","title":"Exercice 5 : Tri par insertion en OCaml","text":"<ol> <li> <p>Ecrire en OCaml une fonction <code>insertion</code> qui prend en argument un entier <code>n</code> et une liste tri\u00e9e d'entiers <code>entiers</code> et renvoie la liste dans laquelle <code>n</code> a \u00e9t\u00e9 ins\u00e9r\u00e9 \u00e0 la bonne position dans <code>entiers</code>. Par exemple <code>insertion 3 [2; 7; 8 ]</code> doit renvoyer <code>|2; 3; 7; 8]</code></p> </li> <li> <p>En d\u00e9duire une fonction <code>tri_insertion</code> qui prend en argument une liste d'entiers et renvoie cette liste tri\u00e9e en utilisant l'algorithme du tri par insertion.</p> </li> <li> <p>Tester en utilisant les fonctions de l'exercice 1.</p> </li> </ol>"},{"location":"mp2i/terminaison/#exercice-6-tri-par-selection-en-ocaml","title":"Exercice 6 : Tri par s\u00e9lection en OCaml","text":"<ol> <li> <p>Ecrire en OCaml une fonction <code>min_reste</code> qui prend en argument une liste <code>entiers</code> et renvoie un couple compos\u00e9 du minimum de la liste <code>entiers</code> et de la liste <code>entiers</code> priv\u00e9 d'une seule occurrence du minimum. Par exemple : </p> <ul> <li><code>min_reste [6; 7; 3; 8; 10]</code> doit renvoyer <code>3, [6; 7; 8; 10]</code></li> <li><code>min_reste [2; 6; 1; 3; 1; 5]</code> doit renvoyer <code>1, [2; 6; 3; 1; 5]</code></li> </ul> </li> <li> <p>En d\u00e9duire une fonction <code>tri_selection</code> qui prend en argument une liste <code>entiers</code> et renvoie cette liste tri\u00e9e dans l'ordre croissant en utilisant l'algorithme du tri par s\u00e9lection.</p> </li> <li> <p>Tester en utilisant les fonctions de l'exercice 1.</p> </li> </ol>"},{"location":"mp2i/terminaison/#exercice-7-palindrome","title":"Exercice 7 : Palindrome","text":"<p>En OCaml, <code>String.sub : string -&gt; int -&gt; int -&gt; sub</code> prend en argument une chaine de caract\u00e8re <code>s</code>  et deux entiers <code>n</code> et <code>m</code> et renvoie la renvoie la portion de <code>s</code> commen\u00e7ant \u00e0 l'indice <code>n</code> et de longueur <code>m</code>, par exemple <code>String.sub \"abcdef\" 2 3 ;;</code> renvoie la chaine <code>\"cde\"</code>.</p> <p>Ecrire une fonction <code>est_palindrome : string -&gt; bool</code> qui renvoie <code>true</code> ssi la chaine fournie en argument est un palindrome</p>"},{"location":"mp2i/terminaison/#exercice-8-code-de-cesar-en-ocaml","title":"Exercice 8 : Code de C\u00e9sar en OCaml","text":"<ol> <li> <p>Ecrire en OCaml, une fonction <code>chiffre_caractere</code> qui prend en argument un caract\u00e8re <code>car</code> et une cl\u00e9 <code>cle</code> et renvoie <code>car</code> chiffr\u00e9 en utilisant le code de cesar de de cl\u00e9 <code>c</code> lorsque <code>car</code> est une lettre (majuscule ou minuscule), sinon on ne fait rien et on renvoie <code>car</code>.</p> <p>Aide</p> <p>Pour faire un pattern matching sur les lettres minusucles on peut \u00e9crire <code>| 'a'..'z' -&gt;</code></p> </li> <li> <p>Ecrire une fonction <code>reste</code> qui prend en argument une chaine et renvoie cette chaine priv\u00e9e de son premier caract\u00e8re</p> </li> <li> <p>Ecrire une fonction recursive <code>cesar</code> qui prend en argument une chaine et une cl\u00e9 et permet de chiffrer (ou de d\u00e9chiffrer) cette chaine avec le code de C\u00e9sar</p> </li> <li> <p>La fonction <code>String.map</code> permet d'appliquer une fonction \u00e0 chaque caract\u00e8re d'une chaine \u00e0 la fa\u00e7on de <code>List.map</code>. Proposer une version du chiffrement de C\u00e9sar utilisant <code>String.map</code></p> </li> </ol>"},{"location":"mp2i/terminaison/#exercice-9-tri-fusion-en-ocaml","title":"Exercice 9 : Tri fusion en OCaml","text":"<ol> <li> <p>Ecrire une fonction <code>separe</code> en OCaml qui prend en argument une liste <code>l</code> et renvoie deux listes contenant chacune la moiti\u00e9 (\u00e0 une unit\u00e9 pr\u00e8s) des \u00e9l\u00e9ments de <code>l</code></p> <p>Aide</p> <p>On pourra utiliser un pattern matching sur le motif <code>h1::h2::t</code> et mettre <code>h1</code> dans la premi\u00e8re liste et <code>h2</code> dans la seconde</p> </li> <li> <p>Ecrire une fonction <code>fusion</code> qui prend en argument deux listes d\u00e9j\u00e0 tri\u00e9es et renvoie la fusion de ces deux listes.</p> </li> <li> <p>Ecrire le <code>tri_fusion</code> en OCaml \u00e0 l'aide de ces deux listes</p> </li> <li> <p>Le tri rapide est similaire au tri fusion mais pour s\u00e9parer les deux listes, on utilise un pivot choisit au hasard dans la liste et on s\u00e9pare ensuite la liste entre les \u00e9l\u00e9ments inf\u00e9rieurs au pivot et les \u00e9l\u00e9ments sup\u00e9rieur au pivot. Impl\u00e9menter en OCaml ce nouvel algorithme de tri</p> </li> <li> <p>Quel est la complexit\u00e9 de ce nouvel algorithme dans le pire des cas ?</p> </li> <li> <p>Effectuer des mesures de temps de calcul pour ce nouvel algorithme. Commenter</p> </li> </ol>"},{"location":"mp2i/terminaison/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/textes/","title":"C19 Algorithmes des textes","text":"<p>\"An algorithm must be seen to be believed, and the best way to learn what an algorithm is all about is to try it. \"D. Knuth(The Art of Computer Programming Vol. 1, 3rd edition)</p>"},{"location":"mp2i/textes/#cours","title":"Cours","text":"<p>Support de cours chapitre 19 </p> <p>Attention</p> <p>Ce diaporama ne vous donne que quelques points de rep\u00e8res lors de vos r\u00e9visions. Il devrait \u00eatre compl\u00e9t\u00e9 par la relecture attentive de vos propres notes de cours et par une r\u00e9vision approfondie des exercices.</p>"},{"location":"mp2i/textes/#travaux-diriges","title":"Travaux dirig\u00e9s","text":"<p>Fiche de TD19 </p>"},{"location":"mp2i/textes/#travaux-pratiques","title":"Travaux pratiques","text":"<p>Danger</p> <ul> <li> <p>Afin de tester les divers algorithmes sur les textes, on suppose dans tous les exercices qu'on dispose d'un fichier texte encod\u00e9 au format ascii standard c'est-\u00e0-dire qu'on utilise 128 cract\u00e8res tous encod\u00e9s sur 8 bits. De cette fa\u00e7on :</p> <ul> <li>pour les algorithmes de recherche on pourra indexer chaque caract\u00e8re par une table de 128 entiers (c'est-\u00e0-dire identifier un caract\u00e8re \u00e0 son code ascii.</li> <li>pour mesurer les taux de compressions, on pourra consid\u00e9rer qu'un fichier contenant \\(n\\) caract\u00e8res a une taille de \\(8n\\) bits (le cas de l'utf-8 s'av\u00e8re bien plus probl\u00e9matique puis qu'un caract\u00e8re occupe de 1 \u00e0 4 octets.)</li> </ul> </li> <li> <p>On donne ci dessous un tel fichier pr\u00eat \u00e0 l'emploi \u00e0 t\u00e9l\u00e9charger : il s'agit du livre Notre-Dame de Paris (V. Hugo, 1831) qui servira d'exemple pour les tests.  Notre-Dame de Paris (ascii) </p> </li> <li>Pour produire de tels fichiers, on pourra partir de n'importe quel fichier texte au format utf-8 (par exemple un livre t\u00e9l\u00e9chargeable sur le site du   projet Gutenberg) puis convertir ce fichier au format ascii en effectuant une translitt\u00e9ration, c'est-\u00e0-dire par exemple en rempla\u00e7ant <code>\u00e0</code> par <code>a</code> ou encore <code>\u00e9</code> par <code>e</code> pour cela, on pourra utiliser l'utilitaire <code>iconv</code> en ligne de commande avec la syntaxe suivante : <pre><code>iconv -f utf-8 -t ascii//TRANSLIT &lt;source&gt; -o &lt;destination&gt;\n</code></pre></li> </ul> <p>Aide</p> <p>En Ocaml la fonction suivante <code>lire_fichier string -&gt; string</code> permet de lire la totalit\u00e9 d'un fichier dont on donne le nom et renvoie le contenu sous la forme d'une chaine de caract\u00e8re :</p> <pre><code>let lire_fichier fname =\nlet reader = open_in fname in\nIn_channel.input_all reader;;\n</code></pre>"},{"location":"mp2i/textes/#exercice-1-autour-de-la-recherche-naive","title":"Exercice 1 : Autour de la recherche na\u00efve","text":"<ol> <li> <p>En OCaml</p> <ol> <li> <p>Ecrire en OCaml l'algorithme de recherche na\u00eff vu en cours et qui renvoie la liste de toutes les occurrences du motif dans la chaine </p> </li> <li> <p>Tester la sortie anticip\u00e9e d'une boucle \u00e0 l'aide de la lev\u00e9e d'une exception de fa\u00e7on \u00e0 renvoyer uniquement la premi\u00e8re occurrence. On pourra utiliser l'exception pr\u00e9d\u00e9finie <code>Exit</code> ou cr\u00e9er une exception  en d\u00e9clarant par exemple <code>exception Trouve;;</code>.</p> </li> </ol> </li> <li> <p>En C</p> <ol> <li> <p>Ecrire l'algorithme de recherche na\u00eff qui renvoie l'indice de la premi\u00e8re occurence (ou <code>-1</code>) si le motif ne se trouve pas dans la chaine.</p> <p>Aide</p> <p>On pourra utiliser la fonction <code>strncmp</code> de <code>&lt;string.h&gt;</code> pour comparer directement le motif \u00e0 n'importe quelle partie du texte.</p> </li> <li> <p>Ecrire une fonction qui renvoie les indices de toutes les occurrences sous la forme d'une liste chain\u00e9e d'entiers (afin de revoir rapidement leur impl\u00e9mentation).</p> </li> </ol> </li> </ol> <p>Dans les deux langages, pour tester les programmes, on pourra :</p> <ol> <li> <p>Ecrire une fonction qui prend en argument un nom de fichier et renvoie une chaine de caract\u00e8res contenant les caract\u00e8res du fichiers.</p> </li> <li> <p>Tester les fonctions de recherche en \u00e9crivant un programme qui prend en argument sur la ligne de commande un motif et le nom du fichier contenant le texte.</p> <p>Aide</p> <p>On rappelle :  </p> <ul> <li>qu'en C, la fonction <code>main</code> doit alors s'\u00e9crire <code>main(int argc, char* argv[])</code> et que le tableau de chaines de caract\u00e8res <code>argv</code> contient les arguments pr\u00e9sents sur la ligne de commande \u00e0 partir de l'indice 1 (<code>argv[0]</code> est le nom de l'ex\u00e9cutable).</li> <li>qu'en OCaml, on peut r\u00e9cup\u00e9rer directement l'argument num\u00e9ro <code>i</code>  \u00e0 l'aide de <code>Sys.argv.(i)</code> (comme en C, l'argument d'indice 0 est le nom de l'ex\u00e9cutable)</li> </ul> </li> </ol>"},{"location":"mp2i/textes/#exercice-2-avec-une-table-de-decalage","title":"Exercice 2 : Avec une table de d\u00e9calage","text":"<p>On rappelle qu'on peut acc\u00e9l\u00e9rer la recherche en commen\u00e7ant par la fin du motif (de longueur \\(l_m\\)) et en utilisant une table de d\u00e9calage \\(d\\)  qui indique de combien d'emplacement on peut avancer lorsqu'on rencontre deux caract\u00e8res qui ne se correspondent pas :</p> <ul> <li>Si un caract\u00e8re \\(c\\) n'est pas dans le motif alors \\(d(c)=l_m\\) </li> <li>Si c est le dernier caract\u00e8re du motif, alors \\(d(c)\\) est la distance entre l'avant-derni\u00e8re occurrence de \\(c\\) et la fin du motif</li> <li>Sinon \\(d(c)\\) est la distance entre la derni\u00e8re occurrence de \\(c\\) et la fin du motif</li> </ul> <p>Dans une recherche na\u00efve on teste les correspondances \u00e0 chaque indice possible dans le texte, cette table de d\u00e9calage permet d'avancer plus vite (au maximum on avance de la longueur du motif).</p> <ol> <li>Ecrire la table de d\u00e9calage du motif <code>petite</code></li> <li>Ecrire dans le langage de votre choix une fonction <code>decalage</code> qui prend en argument un motif et renvoie sa table de d\u00e9calage. On rappelle qu'on utilise 128 caract\u00e8res, on connait donc \u00e0 l'avance la taille de la table de d\u00e9calage. Tester votre fonction sur le motif <code>petite</code></li> <li>Impl\u00e9menter l'algorithme de recherche de Boyer-Moore-Hoorspool</li> <li> <p>On propose de comparer le nombre de comparaisons effectu\u00e9s par la recherche na\u00efve et par l'algorithme de Boyer-Moore-Hoorspool :</p> <ul> <li>Modifier votre algorithme de recherche na\u00efve afin qu'il renvoie aussi le nombre de comparaisons effectu\u00e9s (dans le cas du C, on pourra passer un pointeur vers un entier en argument et le modifier d\u00e8s qu'une comparaison est faite)</li> <li>Modifier de m\u00eame votre impl\u00e9mentation de Boyer-Moore-Hoorspool afin d'obtenir le nombre de comparaisons effectu\u00e9s.</li> <li>Conclure en testant par exemple sur la recherche de <code>Quasimodo</code> dans le fichier <code>notredame_ascii.txt</code> t\u00e9l\u00e9chargeable ci-dessus.</li> </ul> </li> </ol>"},{"location":"mp2i/textes/#exercice-3-algorithme-de-rabin-karp","title":"Exercice 3 : Algorithme de Rabin-Karp","text":"<ol> <li> <p>Ecrire dans le langage de votre choix, une impl\u00e9mentation de l'algorithme de Rabin-Karp en utilisant la fonction de d\u00e9calage qui effectue la somme des codes des caract\u00e8res.</p> </li> <li> <p>Modifier votre fonction afin de pouvoir obtenir en plus le nombre de collisions </p> </li> <li> <p>Tester en recherchant <code>ab</code> dans le fichier <code>notredame_ascii.txt</code>, combien de collisions ne sont pas des correspondances ?   </p> </li> <li> <p>Tester avec la nouvelle fonction de hachage  \\(\\displaystyle{h(s) = \\sum_{i=0}^{n-1} 31^i \\times c_i}\\) (o\u00f9 les \\(c_i\\) sont les caract\u00e8res de la chaine \\(s\\))</p> </li> </ol>"},{"location":"mp2i/textes/#exercice-4-algorithme-de-huffmann-en-ocaml","title":"Exercice 4 : Algorithme de Huffmann en OCaml","text":"<p>Aide</p> <p>On rappelle  que lors de la phase de construction de l'arbre, on s\u00e9lectionne \u00e0 chaque \u00e9tape les deux arbres ayant les nombres d'occurrences les plus faibles. La structure de donn\u00e9es adapt\u00e9e est donc celle d'une file de priorit\u00e9 puisqu'elle permet la mise \u00e0 jour de la structure de donn\u00e9es en complexit\u00e9 logarithmique. Cette structure de donn\u00e9es  s'impl\u00e9mente usuellement \u00e0 l'aide d'un tas min binaire. Une impl\u00e9mentation de cette structure de donn\u00e9e en OCaml est donn\u00e9e ci-dessous. Cependant, on pourra aussi utiliser une simple liste dans laquelle on recherchera \u00e0 chaque \u00e9tape les \u00e9l\u00e9ments de plus petites priorit\u00e9s (ou coder sa propre impl\u00e9mentation). L'interface fournie est la suivante :</p> <ul> <li><code>let cree_file t default</code> cr\u00e9e une file de priorit\u00e9 de taille maximale <code>t</code> d'\u00e9l\u00e9ments de type de celui de <code>default</code>. Par exemple <code>let test = cree_file 10 \"\"</code> cr\u00e9e une file de priorit\u00e9 de taille 10 contenant des chaines de caract\u00e8res.</li> <li><code>let enfile elt fp</code> enfile l'\u00e9l\u00e9ment <code>elt</code> (repr\u00e9sent\u00e9 par un couple <code>priorite,valeur</code>) dans la file de priorit\u00e9 \u00a0<code>fp</code>. Par exemple <code>enfile (2,\"Albert\") test</code> ajoute \"Albert\" avec la priorit\u00e9 2 dans la file <code>test</code>.</li> <li><code>let defile fp</code> renvoie l'\u00e9lement de plus petite priorit\u00e9 (sous la forme d'un couple <code>priorite,valeur</code>)</li> <li><code>let taille fp</code> renvoie le nombre d'\u00e9lements de la file <code>fp</code></li> </ul> Impl\u00e9mentation d'une file de priorit\u00e9 <pre><code>type 'a file_priorite = {\n  mutable taille : int;\n  donnees : (int*'a) array};;\n\ntype abh = \n  | Feuille of char \n  | Noeud of abh*abh;;\n\nlet nbchar = 128;;\n\nlet fils i = 2 * i + 1;;\n\nlet parent i = (i-1)/2 ;;\n\nlet cree_file t default= {taille =  0; donnees = Array.make t (0,default)};;\n\nlet cmp_prio elt1 elt2 = \n  let p1 = fst elt1 in \n  let p2 = fst elt2 in\n  p1 &lt; p2;;\n\nlet taille fp = fp.taille;;\n\nlet swap tab i j =\n  let temp = tab.(i) in\n  tab.(i) &lt;- tab.(j);\n  tab.(j) &lt;- temp;;\n\nexception File_pleine;;\nexception File_vide;;\n\nlet enfile elt fp =\n  if fp.taille = Array.length fp.donnees then  raise File_pleine else\n    (let cp = ref fp.taille in\n     fp.taille &lt;- fp.taille + 1;\n     fp.donnees.(!cp) &lt;- elt;\n     while (!cp &lt;&gt;0 &amp;&amp;  cmp_prio fp.donnees.(!cp)  fp.donnees.(parent !cp)) do\n       (\n         swap fp.donnees !cp (parent !cp);\n         cp := parent !cp;\n       )\n     done;\n    );;\n\nlet defile fp =\n  if fp.taille = 0 then raise File_vide else\n    (\n      let res = fp.donnees.(0) in\n      swap fp.donnees 0 (fp.taille-1);\n      fp.taille &lt;- fp.taille-1;\n      let cp = ref 0 in\n      let lc = ref (fils !cp) in\n      (*Tant qu'il y a deux fils et que l'un est inf\u00e9rieur on \u00e9change*)\n      while (!lc+1 &lt; fp.taille &amp;&amp; (cmp_prio fp.donnees.(!lc) fp.donnees.(!cp) || cmp_prio fp.donnees.(!lc+1) fp.donnees.(!cp))) do\n        if (cmp_prio fp.donnees.(!lc) fp.donnees.(!lc+1)) then\n          (swap fp.donnees !cp !lc;\n           cp := !lc)\n        else  \n          (swap fp.donnees !cp (!lc+1);\n           cp := !lc+1);\n        lc := fils !cp ;\n      done;\n      (*Il reste au plus un fils, on compare et on \u00e9change le cas \u00e9ch\u00e9ant*)\n      if (!lc&lt;fp.taille &amp;&amp; cmp_prio fp.donnees.(!lc)  fp.donnees.(!cp)) then swap fp.donnees !cp !lc;\n      res;\n    )\n;;\n</code></pre> <p>Dans tout la suite on suppose qu'on veut compresser un texte encod\u00e9 en ascii et on suppose d\u00e9fini <code>let nbchar = 128</code>.</p> <ol> <li> <p>Ecrire  une fonction <code>occurences : string -&gt; int array</code> qui prend en argument une chaine de caract\u00e8res <code>texte</code> et renvoie un tableau d'entier <code>occ</code> tel que <code>occ.(i)</code> contienne le nombre d'occurrence du caract\u00e8re de code <code>i</code> dans <code>texte</code> (on rappelle qu'on consid\u00e8re que les codes des caract\u00e8res sont ceux de l'ascii) et donc vont de 0 \u00e0 127.</p> </li> <li> <p>On d\u00e9finit \u00e0 pr\u00e9sent le type : <pre><code>type abh = \n  | Feuille of char \n  | Noeud of abh*abh;;\n</code></pre> qui permet de repr\u00e9senter un arbre de codage de Huffman, car c'est soit une feuille (avec le code du caract\u00e8re) soit un noeud constitu\u00e9 d'un sous arbre droit et d'un sous arbre gauche.  Ecrire une fonction <code>let initialise_file int array -&gt; abh file priorite</code> qui prend en argument un tableau de taille 128 tel que <code>tab.(i)</code> contienne le nombre d'occurrence du caract\u00e8re <code>i</code> et renvoie une file de priorit\u00e9 dans laquelle on a enfil\u00e9 toutes les <code>Feuilles (char_of_int i)</code> pour <code>i=0...128</code> en leur donnant comme priorit\u00e9 le nombre d'occurrence du caract\u00e8re de code <code>i</code> (si ce nombre d'occurrence est non nul)</p> </li> <li> <p>Ecrire une fonction <code>construire_arbre abh file_priorite -&gt; abh</code> qui prend en argument un tableau d'occurrence et construit l'arbre de codage de Huffmann correspondant.</p> <p>Aide</p> <p>On rapelle que l'algorithme consiste, tant que la file de priorit\u00e9 n'est pas r\u00e9duit \u00e0 un seul \u00e9l\u00e9ment,  \u00e0 extraire les deux ayant la plus grande priorit\u00e9, les assembler en un nouvel arbre enfiler ce nouvel arbre en lui donnant la somme des priorit\u00e9s des deux \u00e9l\u00e9ments extraits.</p> </li> <li> <p>Ecrire une fonction <code>huffmann string -&gt; abh</code> qui prend en argument une chaine de caract\u00e8res et renvoie l'arbre de codage de huffman de cette chaine de caract\u00e8res.</p> <p>Note</p> <p>Une fonction de visualisation <code>abh -&gt; unit</code> est fournie ci-dessous et vous permet de visualiser l'arbre construit :</p> Visualisation d'un arbre de codage de Huffman <pre><code>let visualise arbre =\n  let num = ref 0 in\n  let outc = open_out \"temp.gv\" in\n  output_string outc \"digraph mygraph {\\n\";\n  let rec aux ab =\n    let id =  !num in\n    num := !num+1;\n    (match ab with\n     | Feuille c -&gt; if c='\"' then Printf.fprintf outc  \"n%d [shape=circle, style=filled, fillcolor=lightblue, label=\\\"\\\\\\\"\\\"]\\n\" id else Printf.fprintf outc  \"n%d [shape=circle, style=filled, fillcolor=lightblue, label=\\\"%c\\\"]\\n\" id c;\n     | Noeud (g,d) -&gt; Printf.fprintf outc \"n%d [shape=point, width=0.05, height=0.05]\\n\" id;\n      let idg = aux g in\n      let idd = aux d in \n      Printf.fprintf outc \"n%d -&gt; n%d\\n\" id idg;\n      Printf.fprintf outc \"n%d -&gt; n%d\\n\" id idd;\n       ;\n    );\n    id\n  in\n  ignore (aux arbre);\n  output_string outc \"}\\n\";\n  close_out outc;\n  ignore (Sys.command \"xdot temp.gv\");;\n</code></pre> <p>Par exemple, sur l'exemple du cours : <code>les petits tests</code>, vous devriez obtenir l'arbre suivant : </p> </li> <li> <p>Ecrire une fonction <code>cree_code ab -&gt; string array</code> qui prend en argument un arbre de codage de Huffmann et renvoie les codes des caract\u00e8res qu'il contient (on ajoute un 0 lorsqu'on par \u00e0 gauche et un 1 lorsqu'on part \u00e0 droite).</p> </li> <li> <p>Ecrire une fonction qui calcule le taux de compression du texte. Sur l'exemple pr\u00e9c\u00e9dent vous devriez obtenir un taux de compression  de \\(0,328125\\).</p> </li> <li> <p>Ecrire une fonction <code>lire_fichier string -&gt; string</code> qui renvoie dans une chaine de caract\u00e8re le contenu du fichier dont le nom est donn\u00e9 en argument</p> </li> <li> <p>Tester l'algorithme de compression de Huffmann sur le fichier <code>notre_dame_ascii.txt</code> disponible en t\u00e9l\u00e9chargement ci-dessus. Quel taux de compression obtient-on (arrondir \u00e0 3 chiffres apr\u00e8s la virgule) ?     (le s\u00e9parateur d\u00e9cimal est <code>.</code>)</p> </li> </ol>"},{"location":"mp2i/textes/#exercice-5-algorithme-de-huffmann-en-c","title":"Exercice 5 : Algorithme de Huffmann en C","text":"<p>On veut maintenant impl\u00e9menter l'algorithme de Huffman en C afin de compresser des textes encod\u00e9 en ascii, on indiquera la taille du code en d\u00e9but de programme \u00e0 l'aide d'une directive de compilation <code>#define CODESIZE 128</code></p> <ol> <li> <p>Ecrire une fonction de signature <code>int *count(char *texte)</code> qui renvoie un tableau de taille <code>CODESIZE</code> contenant le nombre d'occurrence de chaque caract\u00e8re dans le texte. Puisque le texte est encod\u00e9 en ascii, le tableau sera de taille 128 et la valeur situ\u00e9 \u00e0 l'indice <code>i</code> indique le nombre d'occurrences du caract\u00e8re de code <code>i</code>.</p> <p>Rappel</p> <p>Une conversion de type depuis un <code>char c</code> vers un <code>uint8_t i</code> peut s'effectuer \u00e0 l'aide d'un cast : <code>t = (uint8_t)c</code></p> </li> <li> <p>On doit maintenant d\u00e9finir le type repr\u00e9sentant un arbre binaire de Huffmann :      <pre><code>struct node_s\n{\n    unsigned char car; \n    int prio;\n    struct node_s *sag;\n    struct node_s *sad;\n};\ntypedef struct node_s node;\ntypedef node *abh;\n</code></pre></p> <p>Note</p> <p>On remarquera bien que :</p> <ul> <li>le champ <code>car</code> n'est utilis\u00e9 que pour les feuilles de l'arbre </li> <li>on pr\u00e9voit directement un champ <code>prio</code> afin d'y stocker la priorit\u00e9 de l'arbre</li> <li>un arbre binaire de Huffman (<code>abh</code>) est un pointeur vers un noeud <code>node</code>, ce qui permet de repr\u00e9senter l'arbre vide par <code>NULL</code>.</li> </ul> <p>Et un type permettant de repr\u00e9senter un tas binaire min contenant des \u00e9l\u00e9ments de type <code>abh</code></p> <pre><code>struct heap_s\n{\n    int size;\n    abh *data;\n};\ntypedef struct heap_s heap;\n</code></pre> <p>On doit donc commencer par \u00e9crire les fonctions permettant d'ins\u00e9rer et d'extraire des \u00e9l\u00e9ments de ce tas.</p> <ol> <li> <p>Ecrire les fonctions utilitaires suivantes : </p> <ul> <li><code>int son(int i)</code> qui renvoie l'indice du fils gauche du noeud d'indice <code>i</code>.</li> <li><code>int father(int i)</code> qui renvoie l'indice du p\u00e8re du noeud <code>i</code>.</li> <li><code>void swap(abh *data, int i, int j)</code> qui \u00e9change les deux \u00e9l\u00e9ments d'indice <code>i</code> et <code>j</code> dans <code>data</code>.</li> </ul> </li> <li> <p>Ecrire la fonction <code>heap make_heap(void)</code> qui renvoie un tas de taille vide avec un champ <code>data</code> pouvant contenant jusqu'\u00e0 <code>CODESIZE</code> \u00e9l\u00e9ments.</p> Proposition de correction <pre><code>    heap make_heap(void)\n    {\n        heap mh;\n        mh.size = 0;\n        mh.data = malloc(sizeof(abh) * CODESIZE);\n        return mh;\n    }\n</code></pre> </li> <li> <p>Ecrire la fonction <code>bool insert_heap(abh nv, heap *mh)</code> qui ins\u00e8re un \u00e9l\u00e9ment <code>nv</code> dans le tas <code>mh</code> et renvoie un bool\u00e9en indiquant si l'insertion \u00e0 \u00e9chou\u00e9 (tas plein) ou non.</p> Proposition de correction <pre><code>    bool insert_heap(abh nv, heap *mh)\n    {\n        int cp = mh-&gt;size;\n        if (mh-&gt;size == CODESIZE)\n        {\n            return false;\n        }\n        else\n        {\n            mh-&gt;data[cp] = nv;\n            while (cp != 0 &amp;&amp; mh-&gt;data[cp]-&gt;prio &lt; mh-&gt;data[father(cp)]-&gt;prio)\n            {\n                swap(mh-&gt;data, cp, father(cp));\n                cp = father(cp);\n            }\n            mh-&gt;size = mh-&gt;size + 1;\n            return true;\n        }\n    }\n</code></pre> </li> <li> <p>Ecrire la fonction <code>abh getmin(heap *mh)</code> qui renvoie le minimum du tas (on renvoie null si le tas est vide).</p> Proposition de correction <pre><code>    abh getmin(heap *mh)\n    {\n        if (mh-&gt;size &gt; 0)\n        {\n            abh mv = mh-&gt;data[0];\n            int cp = 0;\n            int leftson = 1;\n            mh-&gt;data[0] = mh-&gt;data[mh-&gt;size - 1];\n            mh-&gt;size = mh-&gt;size - 1;\n            while (leftson + 1 &lt; mh-&gt;size &amp;&amp; (mh-&gt;data[leftson + 1]-&gt;prio &lt; mh-&gt;data[cp]-&gt;prio || mh-&gt;data[leftson]-&gt;prio &lt; mh-&gt;data[cp]-&gt;prio))\n            {\n                if (mh-&gt;data[leftson]-&gt;prio &lt; mh-&gt;data[leftson + 1]-&gt;prio)\n                {\n                    swap(mh-&gt;data, cp, leftson);\n                    cp = leftson;\n                }\n                else\n                {\n                    swap(mh-&gt;data, cp, leftson + 1);\n                    cp = leftson + 1;\n                }\n                leftson = son(cp);\n            }\n            if ((leftson &lt; mh-&gt;size) &amp;&amp; (mh-&gt;data[leftson]-&gt;prio &lt; mh-&gt;data[cp]-&gt;prio))\n            {\n                swap(mh-&gt;data, cp, leftson);\n            }\n            return mv;\n        }\n        return NULL;\n    }\n</code></pre> </li> </ol> </li> <li> <p>Ecrire les fonction suivantes :</p> <ol> <li> <p>la fonction <code>heap init_heap(char *texte)</code> qui permet d'initialiser le tas en y ins\u00e9rant chaque caract\u00e8re contenu dans le texte avec son nombre d'occurrences, cette fonction utilise donc la fonction <code>count</code> \u00e9crite en d\u00e9but d'exercice.</p> Proposition de correction <pre><code>    heap init_heap(char *texte)\n    {\n        int *freq = frequence(texte);\n        heap mh = make_heap();\n        for (int i = 32; i &lt; CODESIZE; i++)\n        {\n            if (freq[i] != 0)\n            {\n                insert_heap(make_leaf((char)i, freq[i]), &amp;mh);\n            }\n        }\n        return mh;\n    }\n</code></pre> </li> <li> <p>la fonction <code>abh make_huffman(heap *mh)</code> qui g\u00e9n\u00e8re l'arbre de huffman \u00e0 partir du tas initialis\u00e9 \u00e0 la question pr\u00e9c\u00e9dente.</p> Proposition de correction <p>La proposition de correction ajoute un identifiant unique <code>node_idx</code> \u00e0 chaque noeud de l'arbre qui n'est pas une feuille, cela permet d'\u00e9crire plus facilement la fonction de visualisation de l'arbre.</p> <pre><code>    abh make_huffman(heap *mh)\n    {\n        abh g, d, new;\n        new = malloc(sizeof(abh));\n        uint8_t node_indx = CODESIZE + 1;\n        while (mh-&gt;size != 1)\n        {\n            g = getmin(mh);\n            d = getmin(mh);\n            new-&gt;car = node_indx;\n            node_indx++;\n            new = make_tree(g, d);\n            insert_heap(new, mh);\n        }\n        g = getmin(mh);\n        g-&gt;car = node_indx;\n        return g;\n    }\n</code></pre> Visualisation de l'arbre <pre><code>    bool is_leaf(abh g)\n    {\n        return (g-&gt;sag == NULL &amp;&amp; g-&gt;sad == NULL);\n    }\n\n    void write_nodes(FILE *writer, abh g)\n    {\n        const char *nstyle = \"[shape=point, width=0.05, height=0.05 xlabel=\\\"%d\\\"]\\n\";\n        const char *fstyle = \"[shape=circle, style=filled, fillcolor=lightblue, label=\\\"%c\\\" xlabel=\\\"%d\\\"]\\n\";\n        const char *gstyle = \"[shape=circle, style=filled, fillcolor=lightblue, label=\\\"\\\\\\\"\\\" xlabel=\\\"%d\\\"]\\n\";\n        if (is_leaf(g))\n        {\n            fprintf(writer, \"F%u \", (uint8_t)g-&gt;car);\n            if (g-&gt;car == '\"')\n            {\n                fprintf(writer,gstyle, g-&gt;prio);\n            }\n            else\n            {\n                fprintf(writer, fstyle, g-&gt;car, g-&gt;prio);\n            }\n        }\n        else\n        {\n            fprintf(writer, \"N%u \", (uint8_t)g-&gt;car);\n            fprintf(writer, nstyle, g-&gt;prio);\n            write_nodes(writer, g-&gt;sag);\n            write_nodes(writer, g-&gt;sad);\n        }\n    }\n\n    void make_edge(FILE *writer, node n1, node n2)\n    {\n        if ((uint8_t)n1.car &lt; CODESIZE)\n        {\n            fprintf(writer, \"F%u -&gt;\", (uint8_t)n1.car);\n        }\n        else\n        {\n            fprintf(writer, \"N%d -&gt; \", (uint8_t)n1.car);\n        }\n        if ((uint8_t)n2.car &lt; CODESIZE)\n        {\n            fprintf(writer, \"F%u\\n\", (uint8_t)n2.car);\n        }\n        else\n        {\n            fprintf(writer, \"N%d\\n\", (uint8_t)n2.car);\n        }\n    }\n\n    void write_edges(FILE *writer, abh g)\n    {\n        if (!is_leaf(g))\n        {\n            make_edge(writer, *g, *(g-&gt;sag));\n            make_edge(writer, *g, *(g-&gt;sad));\n            write_edges(writer, g-&gt;sag);\n            write_edges(writer, g-&gt;sad);\n        }\n    }\n\n    void view(abh g)\n    {\n        FILE *writer = fopen(\"temp.gv\", \"w\");\n        fprintf(writer, \"digraph huffmann {\\n\");\n        write_nodes(writer, g);\n        write_edges(writer, g);\n        fprintf(writer, \"}\\n\");\n        fclose(writer);\n        system(\"xdot temp.gv &amp;\");\n    }\n</code></pre> </li> </ol> </li> <li> <p>Tester votre fonction sur l'exemple \"comprendre un algorithme et le retenir\" et visualiser l'arbre obtenu. Vous devriez obtenir le r\u00e9sultat suivant :</p> <p></p> </li> <li> <p>Ecrire la fonction <code>char ** make_code(abh mh)</code> qui \u00e0 partir de l'arbre renvoie un tableau contenant le code de chaque caract\u00e8re.</p> <p>Aide</p> <p>On pourra utiliser les fonctions de <code>&lt;string.h&gt;</code> telles que <code>strlen</code>, <code>strcpy</code> ou encore <code>strcat</code>.</p> </li> <li> <p>Ecrire la fonction <code>char *read_file(char *fname)</code> permettant de lire le contenu d'un fichier dont on donne le nom, et tester l'algorithme sur le fichier <code>notredame_ascii.txt</code> (voir exercice pr\u00e9c\u00e9dent en OCaml)</p> </li> </ol>"},{"location":"mp2i/textes/#exercice-6-algorithme-lzw-en-ocaml","title":"Exercice 6 : Algorithme LZW en Ocaml","text":"<p>Le but de l'exercice est d'impl\u00e9menter en OCaml l'algorithme lzw, on rappelle qu'on consid\u00e8re qu'on compresse des textes en ascii et qu'on identifie un caract\u00e8re \u00e0 son code (un entier compris entre 0 et 127). On se fixe un maximum pour la taille des codes (en bits) produits par l'algorithme. Lorsque ce maximum est atteint, on ne produit plus de codes pour les prefixes rencontr\u00e9s.</p> <ol> <li> <p>D\u00e9finir en d\u00e9but de programme une constante <code>taille_max</code>, qui contiendra la taille maximale en bits d'un code, on pourra prendre la valeur 16 (de cette fa\u00e7on, un code occupe au maximum 2 octets). Ecrire une fonction qui renvoie le num\u00e9ro maximal d'un code en connaissant la taille maximale de code utilis\u00e9e.</p> </li> <li> <p>On stocke les codes de chacun pr\u00e9fixe dans une table de hachage, et on rappelle qu'initialement seuls les codes des lettres sont dans la table. Ecrire une fonction <code>code_ascii : () -&gt; (string, int) Hashtbl</code> qui renvoie une table de hachage dont les cl\u00e9s sont les caract\u00e8res ascii et les valeurs les codes associ\u00e9s.</p> <p>Aide</p> <ul> <li>On pourra commencer par \u00e9crire une fonction <code>string_of_char : char -&gt; string</code>  qui renvoie le caract\u00e8re pass\u00e9 en argument sous la forme d'une chaine de caract\u00e8re, par exemple <code>string_of_char 'A'</code> renvoie <code>\"A\"</code>.</li> <li>On rappelle les fonctions suivantes du module <code>Hashtbl</code> :<ul> <li><code>Hashtbl.mem</code> cr\u00e9e une table de hachage (on doit donner une taille initiale)</li> <li><code>Hashtbl.mem</code> permet de tester l'appartenance</li> <li><code>Hashtbl.add</code> permet d'ajouter un nouveau couple (cl\u00e9, valeur)</li> <li><code>Hashtbl.find</code> permet de r\u00e9cup\u00e9rer la valeur associ\u00e9e \u00e0 une cl\u00e9</li> <li><code>Hashtbl.replace</code> permet de modifier la valeur associ\u00e9e \u00e0 une cl\u00e9</li> </ul> </li> </ul> </li> <li> <p>Ecrire la fonction de compression de signature : <code>compression : string -&gt; (string,int) Hashtbl -&gt; int -&gt; int list * int</code> qui prend en argument  la texte \u00e0 compresser, la table de hachage, le nombre de caract\u00e8res de l'alphabet initial et renvoie la liste des codes g\u00e9n\u00e9r\u00e9s ainsi que le nombre total de codes.</p> <p>Aide</p> <p>On rappelle qu'\u00e0 chaque \u00e9tape :</p> <ul> <li>on \u00e9met le code du plus long pr\u00e9fixe se trouvant dans la table</li> <li>on cr\u00e9e un nouveau code pour ce pr\u00e9fixe augment\u00e9 du caract\u00e8re suivant</li> </ul> </li> <li> <p>Ecrire la fonction de d\u00e9compression de signature <code>decompression : int list -&gt; string</code> qui prend en argument la liste des codes et renvoie le texte d\u00e9compress\u00e9. Cette fois, on a besoin d'un tableau de chaines de caract\u00e8res dont indic\u00e9 par le num\u00e9ro des codes. Initialement ce tableau contient les caract\u00e8res ascii.</p> </li> <li> <p>Tester vos fonctions d'abord sur de petits exemples tels que ceux vu en cours puis des fichiers plus longs.</p> </li> </ol>"},{"location":"mp2i/textes/#exercice-7-ascii-art-et-compression","title":"Exercice 7 : ASCII art et compression","text":"<p>L'ASCII art consite \u00e0 r\u00e9aliser des images uniquement avec des lettres et ces caract\u00e8res sp\u00e9ciaux contenus dans le code ascii. Voici l'exemple d'un smiley r\u00e9alis\u00e9 en ASCII art (cr\u00e9dit : Wikip\u00e9dia):</p> <pre><code>                          oooo$$$$$$$$$$$$oooo\n                      oo$$$$$$$$$$$$$$$$$$$$$$$$o\n                   oo$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$o         o$   $$ o$\n   o $ oo        o$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$o       $$ $$ $$o$\noo $ $ '$      o$$$$$$$$$    $$$$$$$$$$$$$    $$$$$$$$$o       $$$o$$o$\n'$$$$$$o$     o$$$$$$$$$      $$$$$$$$$$$      $$$$$$$$$$o    $$$$$$$$\n  $$$$$$$    $$$$$$$$$$$      $$$$$$$$$$$      $$$$$$$$$$$$$$$$$$$$$$$\n  $$$$$$$$$$$$$$$$$$$$$$$    $$$$$$$$$$$$$    $$$$$$$$$$$$$$  '''$$$\n   '$$$''''$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     '$$$\n    $$$   o$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     '$$$o\n   o$$'   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$       $$$o\n   $$$    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$' '$$$$$$ooooo$$$$o\n  o$$$oooo$$$$$  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$   o$$$$$$$$$$$$$$$$$\n  $$$$$$$$'$$$$   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$     $$$$''''''''\n ''''       $$$$    '$$$$$$$$$$$$$$$$$$$$$$$$$$$$'      o$$$\n            '$$$o     '''$$$$$$$$$$$$$$$$$$'$$'         $$$\n              $$$o          '$$''$$$$$$''''           o$$$\n               $$$$o                                o$$$'\n                '$$$$o      o$$$$$$o'$$$$o        o$$$$\n                  '$$$$$oo     ''$$$$o$$$$$o   o$$$$''\n                     ''$$$$$oooo  '$$$o$$$$$$$$$'''\n                        ''$$$$$$$oo $$$$$$$$$$\n                                ''''$$$$$$$$$$$\n                                    $$$$$$$$$$$$\n                                     $$$$$$$$$$'\n                                      '$$$'' \n</code></pre> <p>Comme on peut le constater sur cet exemple, on trouve dans ce type d'image, de nombreuses r\u00e9p\u00e9titions du m\u00eame caract\u00e8re, (ici des suites de <code>$</code> ou de <code>\"</code>). Aussi, on cherche \u00e0 diminuer la taille de ces images en utilisant une compression de type RLE qui consiste \u00e0 remplacer des occurrences multiples d'un caract\u00e8re par le nombre de r\u00e9p\u00e9tition suivi du caract\u00e8re, par exemple la chaine \"AAAAABBBBCC\" pourrait se compresser en  \"5A4B2C\". </p> <ol> <li> <p>Afin de travailler sur ces images en OCaml, on propose dans un premier temps de les convertir en liste de caract\u00e8res. Ecrire une fonction <code>list_of_string : string -&gt; char list</code> qui prend en entr\u00e9e une chaine de caract\u00e8re et la convertit en une liste de caract\u00e8re. Par exemple <code>list_of_string \"XXXYY\"</code> donne la liste <code>['X','X','X','Y','Y']</code>.</p> <p>Aide</p> <p>On pourra dans un premier temps ne pas soulever des probl\u00e8mes de complexit\u00e9 et utiliser <code>String.sub</code> mais l'extraction d'une sous chaine est une op\u00e9ration en \\(\\mathcal{O}(m)\\) o\u00f9 \\(m\\) est la taille de la sous chaine, aussi r\u00e9p\u00e9ter l'extraction des sous chaines pour chaque emplacement donnera une complexit\u00e9 quadratique. Pour une solution de complexit\u00e9 lin\u00e9raire, on pourra penser \u00e0 utiliser <code>List.init</code>.</p> </li> <li> <p>Ecrire une fonction <code>compression</code> qui prend en entr\u00e9e une liste de caract\u00e8re et renvoie une liste de couples (un entier et un caract\u00e8re) correspondant \u00e0 la compression RLE d\u00e9crite ci-dessus par exemple <code>compression ['E';'E';'E';'C';'A';'A';'A';'A']</code> renvoie la liste <code>[(3,'E'),(1,'C'),(4,'A')]</code></p> </li> <li> <p>Compresser l'image du smiley ci-dessus, combien de couples <code>int*char</code> contient la liste obtenue ? V\u00e9rifier votre r\u00e9sultat :   </p> </li> <li> <p>Ecrire la fonction <code>d\u00e9compression : int*char -&gt; string</code> qui prend en entr\u00e9e une liste de couples repr\u00e9sentant une compression RLE d'une image en ASCII art et renvoie la chaine repr\u00e9sentant cette image.</p> </li> <li> <p>Tester votre fonction en d\u00e9compressant l'image repr\u00e9sent\u00e9 par la liste suivante : <pre><code>[(13,'_'); (1,'\\n'); (1,'('); (1,' '); (1,'H'); (1,'e'); (2,'l'); (1,'o'); (1,' '); (1,'w'); (1,'o'); (1,'r'); (1,'l'); (1,'d'); (1,' '); (1,')'); (1,'\\n'); (1,' '); (13,'-'); (1,'\\n'); (8,' '); (1,'o'); (3,' '); (1,'^'); (2,'_'); (1,'^'); (1,'\\n'); (9,' '); (1,'o'); (2,' '); (1,'('); (2,'o'); (1,')'); (1,'\\\\'); (7,'_'); (1,'\\n'); (12,' '); (1,'('); (2,'_'); (1,')'); (7,' '); (1,')'); (1,'\\\\'); (1,'/'); (1,'\\\\'); (1,'\\n'); (16,' '); (2,'|'); (4,'-'); (1,'w'); (1,' '); (1,'|'); (1,'\\n'); (16,' '); (2,'|'); (5,' '); (2,'|'); ]1\n</code></pre> Que peut-on lire sur cette image (respecter la casse) :   </p> </li> <li> <p>On suppose \u00e0 pr\u00e9sent que chaque couple <code>int*char</code> utilise 2 octets, d\u00e9terminer le taux de compression sur l'exemple du smiley.</p> </li> <li> <p>Comparer avec les taux de compression de l'algorithme de Huffman cod\u00e9 aux exercices pr\u00e9c\u00e9dents.</p> </li> <li> <p>M\u00eame question avec lzw.</p> </li> </ol>"},{"location":"mp2i/textes/#humour-dinformaticien","title":"Humour d'informaticien","text":""},{"location":"mp2i/Corriges/CMP2023/CMP2023/","title":"CMP \u00a02023","text":""},{"location":"mp2i/Corriges/CMP2023/CMP2023/#enonce","title":"Enonc\u00e9","text":"<p>Enonc\u00e9 </p>"},{"location":"mp2i/Corriges/CMP2023/CMP2023/#representation-binaire-gauche-des-entiers-naturels","title":"Repr\u00e9sentation binaire gauche des entiers naturels","text":""},{"location":"mp2i/Corriges/CMP2023/CMP2023/#question-1","title":"Question 1","text":"<p>On convient de noter entre parenth\u00e8se et avec un \\(g\\) en indice la repr\u00e9sentation gauche d'un entier, par d\u00e9finition de cette repr\u00e9sentation: </p> <ul> <li>\\((1\\underbrace{0\\dots 0}_{c\\text{ z\u00e9ros}})_g = 2^{c+1} - 1\\), or \\(2^{c+1}-1 = \\displaystyle{\\sum_{i=0}^{c} 2^i}\\) et donc \\((10\\dots 0)_g = (\\underbrace{1\\dots 1}_{(c+1) \\text{ un}})_2\\)</li> <li>\\((2\\underbrace{0\\dots 0}_{c\\text{ z\u00e9ros}})_g = 2^{c+2} - 2\\) et donc  \\((20\\dots 0)_g = (\\underbrace{1\\dots 1}_{(c+1) \\text{ un}}0)_2\\)</li> </ul>"},{"location":"mp2i/Corriges/CMP2023/CMP2023/#question-2","title":"Question 2","text":"<p>Le plus grand entier \\(M_N\\) admettant une repr\u00e9sentation gauche sur \\(N\\) chiffres est \\((20\\dots 0)_g = 2^{N+1} - 2\\), en effet en notant \\(m\\) une autre repr\u00e9sentation gauche sur \\(N\\) chiffres :</p> <ul> <li>Si \\(m\\) ne contient pas de 2, \\(m \\leqslant \\displaystyle{\\sum_{n=0}^{N-1} (2^{n+1}-1)} \\leqslant 2^{N+1}-2-N \\leqslant M_N\\)</li> <li>Si \\(m\\) contient un 2 \u00e0 la position \\(k\\) avec \\(0 \\leqslant k \\leqslant N-2\\) alors, \\(m \\leqslant \\displaystyle{\\sum_{n=k+1}^{N-1}}(2^{n+1}-1)+2(2^{k+1}-1)\\)</li> </ul>"},{"location":"mp2i/Evaluations/DM/DM1/DM1-Correction/","title":"DM1 Algorithme de Luhn","text":"<p>L'algorithme de Luhn, du nom de son inventeur  Hans Peter Luhn est c\u00e9l\u00e8bre car il est notamment utilis\u00e9e pour v\u00e9rifier qu'un num\u00e9ro de carte de cr\u00e9dit est valide. Pour valider un num\u00e9ro donn\u00e9 on calcule \u00e0 partir de ses chiffres une valeur appel\u00e9e somme de contr\u00f4le, si cette valeur est divisible par 10 alors le num\u00e9ro est valide.</p> <p>Le but de l'exercice est de mettre en oeuvre cet algorithme puis de le tester. </p>"},{"location":"mp2i/Evaluations/DM/DM1/DM1-Correction/#une-fonction-annexe","title":"Une fonction annexe","text":"<ol> <li> <p>On commence par \u00e9crire  une fonction annexe qui sera utile dans le calcul de la somme de contr\u00f4le. Ecrire une fonction de signature <code>int mult2(int c)</code> qui prend en entr\u00e9e un entier naturel \\(c\\) tel que \\(0\\leqslant c \\leqslant 9\\) et renvoie \\(2c\\)  lorsque \\(0\\leqslant 2c \\leqslant 9\\) et la somme des deux chiffres de \\(2c\\) sinon. On v\u00e9rifiera les pr\u00e9conditions \u00e0 l'aide d'instructions <code>assert</code>.</p> Correction <pre><code>// Prends en entr\u00e9e un chiffre c (0 \u00e0 9) et renvoie 2*c si 2*c&lt;10\n// sinon la somme des chiffres de 2*c\nint mult2(int c)\n{\n    assert(c &gt;= 0 &amp;&amp; c &lt;= 9);\n    int d = 2 * c;\n    if (d &gt;= 10)\n    {\n        return (d % 10 + 1);\n    }\n    else\n    {\n        return d;\n    }\n}\n</code></pre> </li> <li> <p>Pour v\u00e9rifier que la fonction <code>mult2</code> est totalement correcte, dix tests suffisent, lesquels et pourquoi ? Ecrire ces dix tests sous forme d'instructions <code>assert</code>.</p> Correction <p>L'unique argument de la fonction <code>mult2</code> ne prend que dix valeurs possibles (les chiffres de 0 \u00e0 9), donc on doit tester pour chacune de ces valeurs que le r\u00e9sultat renvoy\u00e9 est correct : <pre><code>    assert(mult2(0) == 0);\n    assert(mult2(1) == 2);\n    assert(mult2(2) == 4);\n    assert(mult2(3) == 6);\n    assert(mult2(4) == 8);\n    assert(mult2(5) == 1);\n    assert(mult2(6) == 3);\n    assert(mult2(7) == 5);\n    assert(mult2(8) == 7);\n    assert(mult2(9) == 9);\n</code></pre></p> </li> </ol>"},{"location":"mp2i/Evaluations/DM/DM1/DM1-Correction/#validation-dun-numero","title":"Validation d'un num\u00e9ro","text":"<p>Le calcul de la somme de contr\u00f4le consiste \u00e0 faire la somme des chiffres du num\u00e9ro \u00e0 tester en utilisant au pr\u00e9alable la fonction <code>mult2</code> sur les chiffres dont le rang est pair (c'est \u00e0 dire en partant de la fin du nombre, le 2e chiffre, le 4e, ...). Par exemples :</p> <ul> <li>pour <code>267</code> on doit faire <code>2 + mult2(6) + 7</code> ce qui donne  <code>2+3+7 = 12</code>.</li> <li>pour  <code>15782</code>, on doit faire la somme <code>1 + mult2(5) + 7 + mult2(8) + 2</code>, ce qui donne : <code>1+1+7+7+2 = 18</code>.</li> <li>pour  <code>124586</code>, on doit faire la somme <code>mult2(1) + 2 + mult2(4) + 5 + mult2(8) + 6</code>, ce qui donne : <code>2+2+8+5+7+6 = 30</code>.</li> </ul> <p>On rappelle que le num\u00e9ro est valide lorsque cette somme de contr\u00f4le est divisible par 10, ainsi des trois exemples pr\u00e9c\u00e9dents, seul le dernier est un num\u00e9ro valide.</p> <ol> <li> <p>V\u00e9rifier (\u00e0 la main) que le num\u00e9ro <code>4762</code> est valide mais pas le num\u00e9ro <code>5438</code>.</p> Correction <p>On effectue le calcul de la somme de contr\u00f4le pour chacun des deux nombres :</p> <ul> <li>pour <code>4762</code> : \\(8 + 7 + 3 + 2 = 20\\) donc ce num\u00e9ro est valide,</li> <li>pour <code>5438</code> : \\(1 + 4 + 6 + 8 = 19\\) donc ce num\u00e9ro est invalide.</li> </ul> </li> <li> <p>Ecrire une fonction de signature <code>bool valide(int n)</code> qui prend en entr\u00e9e un num\u00e9ro <code>n</code> et renvoie un bool\u00e9en indiquant si ce num\u00e9ro est valide.</p> <p>Aide</p> <p>On rappelle que <code>n%10</code> permet d'obtenir le dernier chiffre d'un nombre \u00e9crit en base 10.</p> Correction <pre><code>// Valide un num\u00e9ro de carte num avec l'algorithme de Luhn\nbool valide(int num)\n{\n    int spair = 0;\n    int simpair = 0;\n    bool impair = true;\n    int chiffre;\n    while (num != 0)\n    {\n        chiffre = num % 10;\n        num = num / 10;\n        if (impair)\n        {\n            simpair += chiffre;\n        }\n        else\n        {\n            spair += mult2(chiffre);\n        }\n        impair = !impair;\n    }\n    return (simpair + spair) % 10 == 0;\n}\n</code></pre> </li> </ol>"},{"location":"mp2i/Evaluations/DM/DM1/DM1-Correction/#tests","title":"Tests","text":"<p>On donne ci-dessous la d\u00e9finition en C d'un tableau de 100 num\u00e9ros dont un seul n'est pas valide :</p> <pre><code>int numeros[100] = {42893834, 469308860, 816927776, 146369152, 577477938, 242383354, 198853863, 497604926, 965166499, 896414216, 252023627, 504900275, 833686900, 25200593, 448977637, 675139265, 651805400, 403834260, 40891723, 34557363, 350052114, 215953688, 947025672, 269564290, 364657825, 610215303, 787228626, 336651237, 451740674, 687031351, 15139298, 19798024, 156340226, 357230580, 691330690, 258981679, 599613932, 890184567, 281750117, 564780427, 311762298, 533773735, 594844219, 145449195, 84137843, 568985378, 345751986, 735943243, 497983155, 386643704, 295664130, 848035267, 127760916, 242689800, 117599563, 492418736, 378068621, 429991706, 829069962, 354972812, 117023051, 844209254, 374770840, 273363275, 726603368, 591265053, 57508467, 326217296, 6613137, 339258576, 416161248, 843538950, 398195826, 11005451, 988988143, 482333671, 105154348, 859903643, 743440430, 603137506, 771710878, 564268084, 451172761, 899471783, 806957882, 93935849, 917054033, 185026515, 523927549, 746123991, 539999326, 640950606, 115496762, 439933680, 439477399, 842100126, 556362267, 496985862, 693480949, 562975391, };\n</code></pre> <ol> <li> <p>D\u00e9terminer \u00e0 l'aide d'un programme utilisant la fonction de validation lequel de ces num\u00e9ros est invalide. Tester votre r\u00e9ponse    :</p> Correction <p>Dans la correction ci-dessous, la variable <code>numeros</code> est le tableau donn\u00e9 dans l'\u00e9nonc\u00e9. <pre><code>    for (int i = 0; i &lt; 100; i++)\n    {\n        if (!valide(numeros[i]))\n        {\n            printf(\"Le nombre %d est invalide \\n\", numeros[i]);\n        }\n    }\n</code></pre></p> </li> <li> <p>Ecrire une fonction qui prend en entr\u00e9e un tableau d'entiers et renvoie le nombre de num\u00e9ros valide dans ce tableau. Par exemple sur le tableau <code>numeros</code> de 100 entiers  donn\u00e9 en exemple, cette fonction doit renvoyer 99 puisque un seul num\u00e9ro est invalide.</p> Correction <pre><code>// Compte le nombre de num\u00e9ros valides dans le tableau donn\u00e9 argument\nint compte_valide(int nums[], int size)\n{\n    int cpt = 0;\n    for (int i = 0; i &lt; size; i++)\n    {\n        if (valide(nums[i]))\n        {\n            cpt += 1;\n        }\n    }\n    return cpt;\n}\n</code></pre> </li> <li> <p>Dans la fonction <code>main</code> de votre programme, initialiser le g\u00e9n\u00e9rateur de nombre al\u00e9atoire avec la valeur 42 (on rappelle qu'il faut \u00e9crire <code>srand(42)</code>). Puis g\u00e9n\u00e9rer un tableau de 10000 nombres al\u00e9atoires inf\u00e9rieurs \u00e0 <code>100000000</code> (avec <code>rand() % 100000000</code>) et en utilisant la fonction \u00e9crite \u00e0 la question pr\u00e9c\u00e9dente d\u00e9terminer le nombre de num\u00e9ros valide dans le tableau. Tester votre r\u00e9ponse    .</p> Correction <pre><code>    srand(42);\n    int size = 10000;\n    int tab[size];\n    for (int i = 0; i &lt; size; i++)\n    {\n        tab[i] = rand() % 100000000;\n    }\n    printf(\"Nombre de num\u00e9ros valides : %d\\n\", compte_valide(tab, size));\n</code></pre> </li> </ol>"},{"location":"mp2i/Evaluations/DM/DM1/DM1-Correction/#completer-un-numero-valide","title":"Compl\u00e9ter un num\u00e9ro valide","text":"<ol> <li> <p>Ecrire une fonction qui prend en entr\u00e9e un entier <code>n</code> et d\u00e9termine quel chiffre ajouter \u00e0 droite de ce nombre de fa\u00e7on \u00e0 ce que le nombre ainsi form\u00e9 soit un num\u00e9ro valide. Par exemple pour 732, cette fonction renvoie 8 car le nombre 7328 est valide : <code>mult2(7) + 3 + mult2(2) + 8 = 5 + 3 + 4 + 8 = 20</code></p> Correction <pre><code>int cree_valide(int num)\n{\n    num = num * 10;\n    int spair = 0;\n    int simpair = 0;\n    bool impair = true;\n    int chiffre;\n    while (num != 0)\n    {\n        chiffre = num % 10;\n        num = num / 10;\n        if (impair)\n        {\n            simpair += chiffre;\n        }\n        else\n        {\n            spair += mult2(chiffre);\n        }\n        impair = !impair;\n    }\n    if ((simpair + spair) % 10 != 0)\n    {\n        return 10 - (simpair + spair)%10;\n    }\n    else\n    {\n        return 0;\n    }\n}\n</code></pre> </li> </ol>"},{"location":"mp2i/Evaluations/DM/DM1/DM1/","title":"DM1 Algorithme de Luhn","text":"<p>L'algorithme de Luhn, du nom de son inventeur  Hans Peter Luhn est c\u00e9l\u00e8bre car il est notamment utilis\u00e9e pour v\u00e9rifier qu'un num\u00e9ro de carte de cr\u00e9dit est valide. Pour valider un num\u00e9ro donn\u00e9 on calcule \u00e0 partir de ses chiffres une valeur appel\u00e9e somme de contr\u00f4le, si cette valeur est divisible par 10 alors le num\u00e9ro est valide.</p> <p>Le but de l'exercice est de mettre en oeuvre cet algorithme puis de le tester. </p>"},{"location":"mp2i/Evaluations/DM/DM1/DM1/#une-fonction-annexe","title":"Une fonction annexe","text":"<ol> <li> <p>On commence par \u00e9crire  une fonction annexe qui sera utile dans le calcul de la somme de contr\u00f4le. Ecrire une fonction de signature <code>int mult2(int c)</code> qui prend en entr\u00e9e un entier naturel \\(c\\) tel que \\(0\\leqslant c \\leqslant 9\\) et renvoie \\(2c\\)  lorsque \\(0\\leqslant 2c \\leqslant 9\\) et la somme des deux chiffres de \\(2c\\) sinon. On v\u00e9rifiera les pr\u00e9conditions \u00e0 l'aide d'instructions <code>assert</code>.</p> </li> <li> <p>Pour v\u00e9rifier que la fonction <code>mult2</code> est totalement correcte, dix tests suffisent, lesquels et pourquoi ? Ecrire ces dix tests sous forme d'instructions <code>assert</code>.</p> </li> </ol>"},{"location":"mp2i/Evaluations/DM/DM1/DM1/#validation-dun-numero","title":"Validation d'un num\u00e9ro","text":"<p>Le calcul de la somme de contr\u00f4le consiste \u00e0 faire la somme des chiffres du num\u00e9ro \u00e0 tester en utilisant au pr\u00e9alable la fonction <code>mult2</code> sur les chiffres dont le rang est pair (c'est \u00e0 dire en partant de la fin du nombre, le 2e chiffre, le 4e, ...). Par exemples :</p> <ul> <li>pour <code>267</code> on doit faire <code>2 + mult2(6) + 7</code> ce qui donne  <code>2+3+7 = 12</code>.</li> <li>pour  <code>15782</code>, on doit faire la somme <code>1 + mult2(5) + 7 + mult2(8) + 2</code>, ce qui donne : <code>1+1+7+7+2 = 18</code>.</li> <li>pour  <code>124586</code>, on doit faire la somme <code>mult2(1) + 2 + mult2(4) + 5 + mult2(8) + 6</code>, ce qui donne : <code>2+2+8+5+7+6 = 30</code>.</li> </ul> <p>On rappelle que le num\u00e9ro est valide lorsque cette somme de contr\u00f4le est divisible par 10, ainsi des trois exemples pr\u00e9c\u00e9dents, seul le dernier est un num\u00e9ro valide.</p> <ol> <li> <p>V\u00e9rifier (\u00e0 la main) que le num\u00e9ro <code>4762</code> est valide mais pas le num\u00e9ro <code>5438</code>.</p> </li> <li> <p>Ecrire une fonction de signature <code>bool valide(int n)</code> qui prend en entr\u00e9e un num\u00e9ro <code>n</code> et renvoie un bool\u00e9en indiquant si ce num\u00e9ro est valide.</p> <p>Aide</p> <p>On rappelle que <code>n%10</code> permet d'obtenir le dernier chiffre d'un nombre \u00e9crit en base 10.</p> </li> </ol>"},{"location":"mp2i/Evaluations/DM/DM1/DM1/#tests","title":"Tests","text":"<p>On donne ci-dessous la d\u00e9finition en C d'un tableau de 100 num\u00e9ros dont un seul n'est pas valide :</p> <pre><code>int numeros[100] = {42893834, 469308860, 816927776, 146369152, 577477938, 242383354, 198853863, 497604926, 965166499, 896414216, 252023627, 504900275, 833686900, 25200593, 448977637, 675139265, 651805400, 403834260, 40891723, 34557363, 350052114, 215953688, 947025672, 269564290, 364657825, 610215303, 787228626, 336651237, 451740674, 687031351, 15139298, 19798024, 156340226, 357230580, 691330690, 258981679, 599613932, 890184567, 281750117, 564780427, 311762298, 533773735, 594844219, 145449195, 84137843, 568985378, 345751986, 735943243, 497983155, 386643704, 295664130, 848035267, 127760916, 242689800, 117599563, 492418736, 378068621, 429991706, 829069962, 354972812, 117023051, 844209254, 374770840, 273363275, 726603368, 591265053, 57508467, 326217296, 6613137, 339258576, 416161248, 843538950, 398195826, 11005451, 988988143, 482333671, 105154348, 859903643, 743440430, 603137506, 771710878, 564268084, 451172761, 899471783, 806957882, 93935849, 917054033, 185026515, 523927549, 746123991, 539999326, 640950606, 115496762, 439933680, 439477399, 842100126, 556362267, 496985862, 693480949, 562975391, };\n</code></pre> <ol> <li> <p>D\u00e9terminer \u00e0 l'aide d'un programme utilisant la fonction de validation lequel de ces num\u00e9ros est invalide. Tester votre r\u00e9ponse    :</p> </li> <li> <p>Ecrire une fonction qui prend en entr\u00e9e un tableau d'entiers et renvoie le nombre de num\u00e9ros valide dans ce tableau. Par exemple sur le tableau <code>numeros</code> de 100 entiers  donn\u00e9 en exemple, cette fonction doit renvoyer 99 puisque un seul num\u00e9ro est invalide.</p> </li> <li> <p>Dans la fonction <code>main</code> de votre programme, initialiser le g\u00e9n\u00e9rateur de nombre al\u00e9atoire avec la valeur 42 (on rappelle qu'il faut \u00e9crire <code>srand(42)</code>). Puis g\u00e9n\u00e9rer un tableau de 10000 nombres al\u00e9atoires inf\u00e9rieurs \u00e0 <code>100000000</code> (avec <code>rand() % 100000000</code>) et en utilisant la fonction \u00e9crite \u00e0 la question pr\u00e9c\u00e9dente d\u00e9terminer le nombre de num\u00e9ros valide dans le tableau. Tester votre r\u00e9ponse    .</p> </li> </ol>"},{"location":"mp2i/Evaluations/DM/DM1/DM1/#completer-un-numero-valide","title":"Compl\u00e9ter un num\u00e9ro valide","text":"<ol> <li>Ecrire une fonction qui prend en entr\u00e9e un entier <code>n</code> et d\u00e9termine quel chiffre ajouter \u00e0 droite de ce nombre de fa\u00e7on \u00e0 ce que le nombre ainsi form\u00e9 soit un num\u00e9ro valide. Par exemple pour 732, cette fonction renvoie 8 car le nombre 7328 est valide : <code>mult2(7) + 3 + mult2(2) + 8 = 5 + 3 + 4 + 8 = 20</code></li> </ol>"},{"location":"mp2i/Evaluations/DM/DM2/DM2/","title":"DM2 Nombres de Lychrel","text":"<p>On dit qu'un nombre est un nombre palindrome lorsqu'il peut se lire indiff\u00e9remment de droite \u00e0 gauche ou de gauche \u00e0 droite. Par exemple 27172, 505 ou encore 183381 sont des nombres palindromes alors que 1515 ou 766 n'en sont pas. En partant d'un nombre quelconque \u00e9crit en base 10 et qu'on note \\((a_{n-1}\\dots a_0)_{10}\\), tant que ce nombre n'est pas un nombre palindrome on l'additionne avec le nombre obtenu en \u00e9crivant ses chiffres de droite \u00e0 gauche c'est \u00e0 dire qu'on effectue l'addition \\((a_{n-1}\\dots a_0)_{10} + (a_{0}\\dots a_{n-1})_{10}\\). </p> <p>Prenons quelques exemples,</p> <ul> <li>Avec le nombre de d\u00e9part \\(74\\) on obtient, \\(74 + 47 = 121\\) et donc un palindrome apr\u00e8s une it\u00e9ration du proc\u00e9d\u00e9.</li> <li>Avec le nombre \\(178\\) on obtient \\(178 + 871 = 1049\\) puis \\(1049 + 9401 = 10450\\) et enfin \\(10450 + 5401 = 15851\\) qui est un palindrome. Cette fois, trois it\u00e9rations ont \u00e9t\u00e9 n\u00e9cessaires pour produire un palindrome.</li> </ul> <p>Le fait de savoir si ce proc\u00e9d\u00e9 conduit toujours \u00e0 un palindrome est une question ouverte et on appelle nombre de lychrel un nombre pour lequel ce proc\u00e9d\u00e9 n'aboutit jamais \u00e0 un palindrome. On ne sait donc pas si de tels nombres existents mais le plus petit nombre candidat est 196 car apr\u00e8s trois ans de calcul (men\u00e9es \u00e0 la fin des ann\u00e9es 1980) et plusieurs millions d'it\u00e9rations, John Walker a montr\u00e9 que le proc\u00e9d\u00e9 ne fournissait toujours pas un palindrome. Le but de l'exercice est de reproduire ces r\u00e9sultats, mais les ordinateurs ayant maintenant de bien meilleures capacit\u00e9s de calcul, cela devrait nous prendre bien moins que trois ans de calcul ...</p>"},{"location":"mp2i/Evaluations/DM/DM2/DM2/#une-approche-naive","title":"Une approche na\u00efve","text":"<p>On utilise ici le type <code>uint64_t</code> du C (disponible dans <code>&lt;stdint.h&gt;</code>) afin de repr\u00e9senter un entier positif et on \u00e9crit les fonctions permettant d'it\u00e9rer le processus jusqu'\u00e0 d\u00e9tecter un palindrome.</p> <ol> <li> <p>Ecrire une fonction de signature <code>uint64_t envers(uint64_t n)</code> qui renvoie le nombre form\u00e9 par  les chiffres de l'entier <code>n</code> lus de droite \u00e0 gauche, par exemple <code>envers(1789)</code> renvoie <code>9871</code>.</p> </li> <li> <p>Ecrire une fonction de signature <code>bool palindrome(uint64_t n)</code> qui renvoie <code>true</code> lorsque <code>n</code> est un nombre palindrome.</p> </li> <li> <p>Ecrire une fonction de signature <code>uint64_t terme_suivant(uint64_t n)</code> qui prend en entr\u00e9e un entier <code>n</code> et renvoie le nombre obtenu en additionnant <code>n</code> au norme form\u00e9 en \u00e9crivant les chiffres de <code>n</code> \u00e0 l'envers.</p> </li> <li> <p>Ecrire une fonction de signature <code>int lychrel(unint64_t n, int limit, uint64_t *pal)</code> qui renvoie le nombre d'it\u00e9rations n\u00e9cessaire en partant de l'entier <code>n</code> pour obtenir un palindrome en r\u00e9p\u00e9tant le processus consistant \u00e0 additionner <code>n</code> avec le nombre form\u00e9 par les chiffres de <code>n</code> \u00e9crit \u00e0 l'envers. Cette fonction modifie aussi <code>*pal</code> en lui donnant la valeur du palindrome trouv\u00e9. Si apr\u00e8s <code>limit</code> it\u00e9rations un palindrome n'a pas \u00e9t\u00e9 obtenu on renvoie <code>-1</code> et le pointeur <code>*pal</code> n'est pas modifi\u00e9.</p> </li> <li> <p>V\u00e9rifier que pour tous les entiers positifs strictement inf\u00e9rieur \u00e0 196, le processus s'arr\u00eate en moins de 100 it\u00e9rations en produisant un palindrome. V\u00e9rifier vos r\u00e9sultats ci-dessous :</p> <ul> <li> <p>Nombre maximal d'it\u00e9rations avant d'atteindre un palindrome   </p> </li> <li> <p>Plus petit entier pour lequel le nombre d'it\u00e9ration est maximal   </p> </li> <li> <p>Plus grand nombre palindrome obtenu   </p> </li> </ul> </li> <li> <p>Modifier le code de la fonction <code>terme_suivant</code> (\u00e9crite \u00e0 la question 3) en ajoutant une instruction <code>assert</code> permettant de v\u00e9rifier que l'addition de <code>n</code> et de <code>n</code> \u00e9crit \u00e0 l'envers ne provoque pas de d\u00e9passement de capacit\u00e9. On pourra utiliser la constante <code>UINT64_MAX</code>. Tester alors la fonction <code>lychrel</code>  pour l'entier 196. Conclure quant \u00e0 l'approche utilisant les entiers <code>uint64_t</code>.</p> </li> </ol>"},{"location":"mp2i/Evaluations/DM/DM2/DM2/#utilisation-dun-type-structure","title":"Utilisation d'un type structur\u00e9","text":"<p>Afin d'\u00e9viter le probl\u00e8me du d\u00e9passement de capacit\u00e9, on propose d'utiliser un type structur\u00e9 afin de repr\u00e9senter un entier, l'un des champs est le nombre de chiffres de l'entier et l'autre un pointeur vers une zone m\u00e9moire qui contiendra le tableau des chiffres du nombres :</p> <pre><code>struct number_s\n{\n    uint8_t *digits; // pointeur vers le tableau des chiffres\n    uint64_t size;   // nombre de chiffres\n};\ntypedef struct number_s number;\n</code></pre> <p>Le champ <code>digits</code> sera allou\u00e9 dynamiquement sur le tas une fois connu le nombre de chiffres de l'entier, de cette fa\u00e7on on \u00e9vite les probl\u00e8mes de d\u00e9passement de capacit\u00e9. La seule limite est celle de la quantit\u00e9 de m\u00e9moire disponible. </p> <ol> <li> <p>Ecrire une fonction <code>number create(int n)</code> qui prend en entr\u00e9e un entier positif <code>n</code> et renvoie une variable de type <code>number</code> tel que le champ <code>size</code> contienne le nombre de chiffres de <code>n</code> et le champ <code>digits</code> pointe vers une zone m\u00e9moire qui contient les chiffres de <code>n</code>. Par exemple pour l'entier <code>1789</code>, le champ <code>size</code> contient <code>4</code> et le champ <code>digits</code> pointe vers une zone m\u00e9moire contenant (dans cet ordre) les entiers <code>9, 8, 7</code> et <code>1</code>.</p> </li> <li> <p>Ecrire une fonction <code>bool palindrome(number dn)</code> qui renvoie <code>true</code> lorsque le nombre repr\u00e9sent\u00e9 par <code>dn</code> est un nombre palindrome.</p> </li> <li> <p>Ecrire une fonction <code>void next(number *dn)</code> qui ne renvoie rien et modifie  <code>*dn</code> de fa\u00e7on \u00e0 repr\u00e9senter le terme suivant dans le processus consistant \u00e0 additionner un entier avec le nombre \u00e9crit en retournant ses chiffres. Par exemple si <code>dn</code> correspond \u00e0 l'entier <code>1789</code> alors apr\u00e8s l'appel <code>next(dn)</code>, <code>dn</code> correspondra \u00e0  l'entier <code>1789 + 9871 = 11660</code> c'est \u00e0 dire que son champ <code>size</code> contiendra 5 et que son champ <code>digits</code> pointera vers une nouvelle zone m\u00e9moire contenant les entiers <code>0, 6, 6, 1, 1</code> (on pensera \u00e0 lib\u00e9rer la zone m\u00e9moire pr\u00e9c\u00e9dente).</p> </li> <li> <p>Ecrire une fonction <code>int lychrel(number *dn, int limit)</code> qui it\u00e8re le processus consistant \u00e0 remplacer <code>dn</code> par le nombre obtenu en l'additionnant au nombre form\u00e9 en \u00e9crivant ses chiffres \u00e0 l'envers jusqu'\u00e0 soit atteindre un palindrome, soit atteindre un maximum de <code>limit</code> it\u00e9rations. </p> </li> <li> <p>Tester votre fonction en v\u00e9rifiant qu'en partant du nombre <code>1005499526</code> on obtient un palindrome apr\u00e8s 109 it\u00e9rations. Quel est ce palindrome ?   </p> </li> <li> <p>V\u00e9rifier qu'en partant de 196, on n'obtient pas de palindrome en fixant une limite de 10000 it\u00e9rations.</p> </li> </ol>"},{"location":"mp2i/Evaluations/DM/DM2/DM2/#reproduction-du-resultat-de-j-walker","title":"Reproduction du r\u00e9sultat de J. Walker","text":"<ol> <li> <p>Comme indiqu\u00e9 en introduction, en d\u00e9marrant de 196 et apr\u00e8s trois ans de calcul J; Walker a atteint un nombre d'un million de chiffres sans trouver de palindrome. Il avait donc fix\u00e9 une limite en nombre de chiffres et non pas en nombre d'it\u00e9rations comme nous venons de le faire. Ecrire une fonction <code>bool walker(number *dn, int limit, int *nb_iter)</code> qui r\u00e9p\u00e8te le processus jusqu'\u00e0 obtention d'un palindrome et dans ce cas renvoie <code>true</code> ou jusqu'\u00e0 atteindre un chiffre ayant \u00a0<code>limit</code> chiffres dans son \u00e9criture d\u00e9cimale et dans ce cas renvoie <code>false</code>. D'autre part cette fonction modifie <code>*nb_iter</code> en lui affectant le nombre d'it\u00e9rations effectu\u00e9s \u00e0 la fin du processus.</p> </li> <li> <p>Tester votre fonction en recherchant le nombre d'it\u00e9rations en partant de 196 pour atteindre un nombre ayant \\(100\\,000\\) chiffres. V\u00e9rifier votre r\u00e9ponse    .</p> <p>Aide</p> <p>On conseille de compiler avec l'option \u00a0<code>-O2</code> qui permet d'obtenir un code compil\u00e9 plus rapide.</p> </li> <li> <p>Retrouver le r\u00e9sultat de J. Walker en d\u00e9terminant le nombre d'it\u00e9rations n\u00e9cessaires avant de produire le premier nombre ayant un million de chiffres.</p> <p>Note</p> <p>Le temps de calcul risque d'\u00eatre cons\u00e9quent, mais devrait \u00eatre bien inf\u00e9rieur \u00e0 3 ans !</p> </li> </ol>"},{"location":"mp2i/OrauxMPI/Oraux2025/","title":"Mercredi 28 mai","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#sergio-sujet-a","title":"Sergio : Sujet A","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-a","title":"Ex A","text":"<ul> <li>H\u00e9sitation puis passe sur la Q1</li> <li>Q2 h\u00e9sitation ...</li> <li>Q3 perdu !</li> </ul> <p>Catastrophique (n'a pas eu le temps de r\u00e9viser le SQL)</p>"},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-b","title":"Ex B","text":"<ul> <li>Q1, ok (avec aide pour la somme)</li> <li>Q2, ok (aide)</li> <li>Q3, echec</li> <li>Q4</li> <li>Q5 ok </li> </ul> <p>Note : 7/20</p>"},{"location":"mp2i/OrauxMPI/Oraux2025/#vaity-sujet-b","title":"Va\u00efty : Sujet B","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-a_1","title":"Ex A","text":"<ul> <li>Q1 : compression ok : 0;3;2;5;5;6;1;1;3</li> <li>Q2 ; (taux) ok !</li> <li>Q3 : d\u00e9compression (avec de l'aide)</li> <li>Q4 : des difficult\u00e9s sur Huffman pour la construction de l'arbre.</li> </ul>"},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-b_1","title":"Ex B","text":"<ul> <li>Q1 erreur (parle d'ab \u00e9quilibr\u00e9)</li> <li>Q2 ok pour les indices</li> <li>Q3 voir Q2</li> <li>Q4 bug sur le parcours en largeur !</li> <li>Q5 </li> </ul> <p>Note 15/20</p>"},{"location":"mp2i/OrauxMPI/Oraux2025/#samuel-sujet-c","title":"Samuel : Sujet C","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-a_2","title":"Ex A","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-b_2","title":"Ex B","text":"<p>Note 20/20</p>"},{"location":"mp2i/OrauxMPI/Oraux2025/#mercredi-11-juin","title":"Mercredi 11 Juin","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#bastien-sujet-f","title":"Bastien Sujet F","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-a_3","title":"Ex A","text":"<ul> <li>Construction de l'arbre ok</li> <li>Obtention des codes ok</li> <li>Tout le reste ok (tas binaire min et percolation bien maitris\u00e9)</li> </ul>"},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-b_3","title":"Ex B","text":"<ul> <li>v\u00e9rification ok avec une m\u00e9thode bizzaro\u00efde</li> <li>m\u00e9thode gloutonne ok</li> <li>difficult\u00e9 \u00e9criture equations de recurrence</li> <li>manque impl\u00e9mentation</li> </ul> <p>Note 16/20</p>"},{"location":"mp2i/OrauxMPI/Oraux2025/#enio-sujet-e","title":"Enio Sujet E","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-a_4","title":"Ex A","text":"<ul> <li>Deux premi\u00e8res requ\u00eates ok</li> <li>Explication de la requ\u00eate ok</li> <li>Jointure </li> <li>Requ\u00eate ensembliste </li> </ul>"},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-b_4","title":"Ex B","text":"<ul> <li>Algorithme naif ok (mais stockage de la matrice)</li> <li>DPR : ok mais avec aide sur la max tranche k</li> <li>Ecriture de la fonction finale correcte</li> </ul> <p>Note 16/20</p>"},{"location":"mp2i/OrauxMPI/Oraux2025/#vaity-sujet-d","title":"Va\u00efty Sujet D","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-a_5","title":"Ex A","text":"<ul> <li>Probl\u00e8me sur le principe de la table de hachage </li> <li>R\u00e9solution de hash ok (avec de l'aide)</li> <li>Hash de taille quelconque </li> <li>Signature ok (avec aide)</li> </ul>"},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-b_5","title":"Ex B","text":"<ul> <li>Carr\u00e9 magique : probl\u00e8me sur l'obtention de la somme</li> <li>Q6 et Q7 sur la ligne : ok</li> </ul> <p>Note 10/20</p>"},{"location":"mp2i/OrauxMPI/Oraux2025/#lundi-16-juin","title":"Lundi 16 Juin","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#simon-sujet-g","title":"Simon Sujet G","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-a_6","title":"Ex A","text":"<ul> <li>Exercice tr\u00e8s bien trait\u00e9 !</li> <li>Aucun souci sur la preuve par IS</li> <li>Algo du nombre d'occurrences ok</li> </ul>"},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-b_6","title":"Ex B","text":"<ul> <li>Q1 ok</li> <li>Ajout ok petit souci sur le passage par valeur</li> <li>Q3</li> <li>Le reste pas termin\u00e9 !</li> </ul> <p>Note 18/20</p>"},{"location":"mp2i/OrauxMPI/Oraux2025/#caroline-sujet-c","title":"Caroline Sujet C","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-a_7","title":"Ex A :","text":"<ul> <li>Q1 et Q2 ok mais probl\u00e8me sur l'\u00e9quivalence s\u00e9mantique de l'implication</li> <li>Q3 pass\u00e9e</li> <li>Q4 ok</li> <li>Q5  table de v\u00e9rit\u00e9 ok</li> </ul>"},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-b_7","title":"Ex B","text":"<ul> <li>Q1 : ok</li> <li>Q2 : ok</li> <li>Q3 oublie la conversion en float</li> <li>Q4 : ok</li> <li>Q5 : oublie du tri dans la complexit\u00e9</li> </ul> <p>Note 16/20</p>"},{"location":"mp2i/OrauxMPI/Oraux2025/#timotheo-sujet-g","title":"Timoth\u00e9o Sujet G","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-a_8","title":"Ex A","text":"<ul> <li>Q1 ok</li> <li>Q2 ok</li> <li>Q3 ok</li> <li>Q4 ok</li> </ul>"},{"location":"mp2i/OrauxMPI/Oraux2025/#ex-b_8","title":"Ex B","text":"<p>Exo trait\u00e9 </p> <p>Note 18/20</p>"},{"location":"mp2i/OrauxMPI/Oraux2025/#mercredi-18-juin","title":"Mercredi 18 Juin","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#raphael-sujet-f","title":"Raphael Sujet F","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#exo-a","title":"Exo A","text":"<ul> <li>Codage de Huffman : probl\u00e8me pour la construction de l'arbre</li> <li>Reste ok</li> </ul>"},{"location":"mp2i/OrauxMPI/Oraux2025/#exo-b","title":"Exo B","text":"<ul> <li>Q1, Q2, Q3 : ok</li> <li>Q4 ok (mais solution o\u00f9 on recherche \u00e0 chaque fois la plus grande valeur)</li> <li>Q5 et Q6</li> </ul> <p>Note 12/20</p>"},{"location":"mp2i/OrauxMPI/Oraux2025/#virgile-sujet-b","title":"Virgile Sujet B","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#exo-a_1","title":"Exo A","text":"<ul> <li>Q1 et Q2 : ok sans difficult\u00e9</li> <li>Q3 : petit souci lors du cas o\u00f9 le code  est celui qui va \u00eatre \u00e9mis</li> <li>Q4 : Ok avec un peu d'aide</li> </ul>"},{"location":"mp2i/OrauxMPI/Oraux2025/#exo-b_1","title":"Exo B","text":"<ul> <li>Q1 : Ok d\u00e9finition tas</li> <li>Q2 : Pas de connaissance sur la percolation ou la structure de tas</li> </ul> <p>Note : 11/20</p>"},{"location":"mp2i/OrauxMPI/Oraux2025/#timotheo-sujet-c","title":"Timoth\u00e9o Sujet C","text":""},{"location":"mp2i/OrauxMPI/Oraux2025/#exo-a_2","title":"Exo A","text":"<p>Bien trait\u00e9 \u00e0 part des h\u00e9sitations sur le d\u00e9but et ne se rappelle plus de l'\u00e9quivalence s\u00e9mantique de l'implication</p>"},{"location":"mp2i/OrauxMPI/Oraux2025/#exo-b_2","title":"Exo B","text":"<ul> <li>Q1 : ok Probl\u00e8me de temps sur le reste de l'exercice (perte de temps sur l'exercice 1)</li> </ul> <p>Note 12/20</p>"}]}